
QualTestSCPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000031c  00800100  000049c8  00004a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000049c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022f  0080041c  0080041c  00004d78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004d78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004dd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000888  00000000  00000000  00004e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011cde  00000000  00000000  0000569c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000030ed  00000000  00000000  0001737a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ce06  00000000  00000000  0001a467  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002824  00000000  00000000  00027270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002406f  00000000  00000000  00029a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00012413  00000000  00000000  0004db03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001440  00000000  00000000  0005ff16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00008ef4  00000000  00000000  00061356  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a1 c0       	rjmp	.+322    	; 0x144 <__ctors_end>
       2:	00 00       	nop
       4:	be c0       	rjmp	.+380    	; 0x182 <__bad_interrupt>
       6:	00 00       	nop
       8:	bc c0       	rjmp	.+376    	; 0x182 <__bad_interrupt>
       a:	00 00       	nop
       c:	ba c0       	rjmp	.+372    	; 0x182 <__bad_interrupt>
       e:	00 00       	nop
      10:	b8 c0       	rjmp	.+368    	; 0x182 <__bad_interrupt>
      12:	00 00       	nop
      14:	b6 c0       	rjmp	.+364    	; 0x182 <__bad_interrupt>
      16:	00 00       	nop
      18:	b4 c0       	rjmp	.+360    	; 0x182 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b2 c0       	rjmp	.+356    	; 0x182 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b0 c0       	rjmp	.+352    	; 0x182 <__bad_interrupt>
      22:	00 00       	nop
      24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__vector_10>
      2c:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__vector_11>
      30:	a8 c0       	rjmp	.+336    	; 0x182 <__bad_interrupt>
      32:	00 00       	nop
      34:	a6 c0       	rjmp	.+332    	; 0x182 <__bad_interrupt>
      36:	00 00       	nop
      38:	a4 c0       	rjmp	.+328    	; 0x182 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a2 c0       	rjmp	.+324    	; 0x182 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a0 c0       	rjmp	.+320    	; 0x182 <__bad_interrupt>
      42:	00 00       	nop
      44:	9e c0       	rjmp	.+316    	; 0x182 <__bad_interrupt>
      46:	00 00       	nop
      48:	9c c0       	rjmp	.+312    	; 0x182 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9a c0       	rjmp	.+308    	; 0x182 <__bad_interrupt>
      4e:	00 00       	nop
      50:	98 c0       	rjmp	.+304    	; 0x182 <__bad_interrupt>
      52:	00 00       	nop
      54:	96 c0       	rjmp	.+300    	; 0x182 <__bad_interrupt>
      56:	00 00       	nop
      58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
      5e:	00 00       	nop
      60:	90 c0       	rjmp	.+288    	; 0x182 <__bad_interrupt>
      62:	00 00       	nop
      64:	8e c0       	rjmp	.+284    	; 0x182 <__bad_interrupt>
      66:	00 00       	nop
      68:	8c c0       	rjmp	.+280    	; 0x182 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8a c0       	rjmp	.+276    	; 0x182 <__bad_interrupt>
      6e:	00 00       	nop
      70:	88 c0       	rjmp	.+272    	; 0x182 <__bad_interrupt>
      72:	00 00       	nop
      74:	86 c0       	rjmp	.+268    	; 0x182 <__bad_interrupt>
      76:	00 00       	nop
      78:	84 c0       	rjmp	.+264    	; 0x182 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	82 c0       	rjmp	.+260    	; 0x182 <__bad_interrupt>
      7e:	00 00       	nop
      80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
      82:	00 00       	nop
      84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
      86:	00 00       	nop
      88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7a c0       	rjmp	.+244    	; 0x182 <__bad_interrupt>
      8e:	00 00       	nop
      90:	78 c0       	rjmp	.+240    	; 0x182 <__bad_interrupt>
      92:	00 00       	nop
      94:	76 c0       	rjmp	.+236    	; 0x182 <__bad_interrupt>
      96:	00 00       	nop
      98:	15 02       	muls	r17, r21
      9a:	2d 02       	muls	r18, r29
      9c:	31 02       	muls	r19, r17
      9e:	38 02       	muls	r19, r24
      a0:	53 02       	muls	r21, r19
      a2:	5a 02       	muls	r21, r26
      a4:	5e 02       	muls	r21, r30
      a6:	3c 02       	muls	r19, r28
      a8:	43 02       	muls	r20, r19
      aa:	47 02       	muls	r20, r23
      ac:	4b 17       	cp	r20, r27
      ae:	76 17       	cp	r23, r22
      b0:	6a 18       	sub	r6, r10
      b2:	76 17       	cp	r23, r22
      b4:	6a 18       	sub	r6, r10
      b6:	b9 17       	cp	r27, r25
      b8:	dc 17       	cp	r29, r28
      ba:	6a 18       	sub	r6, r10
      bc:	35 18       	sub	r3, r5
      be:	45 18       	sub	r4, r5
      c0:	a9 1a       	sub	r10, r25
      c2:	d2 1a       	sub	r13, r18
      c4:	0b 1b       	sub	r16, r27
      c6:	39 1b       	sub	r19, r25
      c8:	72 1b       	sub	r23, r18
      ca:	94 1b       	sub	r25, r20
      cc:	bb 1b       	sub	r27, r27

000000ce <ProductString>:
      ce:	1c 03 4c 00 55 00 46 00 41 00 20 00 54 00 4d 00     ..L.U.F.A. .T.M.
      de:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ec <ManufacturerString>:
      ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <LanguageString>:
     106:	04 03 09 04                                         ....

0000010a <ConfigurationDescriptor>:
     10a:	09 02 27 00 01 01 00 c0 32 09 04 00 00 03 fe 03     ..'.....2.......
     11a:	01 00 07 05 04 02 40 00 05 07 05 83 02 40 00 05     ......@......@..
     12a:	07 05 82 03 08 00 ff                                .......

00000131 <DeviceDescriptor>:
     131:	12 01 10 01 00 00 00 08 eb 03 65 20 01 00 01 02     ..........e ....
     141:	dc 01 00                                            ...

00000144 <__ctors_end>:
     144:	11 24       	eor	r1, r1
     146:	1f be       	out	0x3f, r1	; 63
     148:	cf ef       	ldi	r28, 0xFF	; 255
     14a:	d0 e2       	ldi	r29, 0x20	; 32
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	cd bf       	out	0x3d, r28	; 61

00000150 <__do_copy_data>:
     150:	14 e0       	ldi	r17, 0x04	; 4
     152:	a0 e0       	ldi	r26, 0x00	; 0
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	e8 ec       	ldi	r30, 0xC8	; 200
     158:	f9 e4       	ldi	r31, 0x49	; 73
     15a:	00 e0       	ldi	r16, 0x00	; 0
     15c:	0b bf       	out	0x3b, r16	; 59
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x14>
     160:	07 90       	elpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	ac 31       	cpi	r26, 0x1C	; 28
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0x10>

0000016a <__do_clear_bss>:
     16a:	26 e0       	ldi	r18, 0x06	; 6
     16c:	ac e1       	ldi	r26, 0x1C	; 28
     16e:	b4 e0       	ldi	r27, 0x04	; 4
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	ab 34       	cpi	r26, 0x4B	; 75
     176:	b2 07       	cpc	r27, r18
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <main>
     17e:	0c 94 e2 24 	jmp	0x49c4	; 0x49c4 <_exit>

00000182 <__bad_interrupt>:
     182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <SCPI_ErrorEmit>:
    fifo_remove(&context->error_queue, error);

    SCPI_ErrorEmitEmpty(context);

    return TRUE;
}
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	ec 01       	movw	r28, r24
     18e:	8b 01       	movw	r16, r22
     190:	44 e0       	ldi	r20, 0x04	; 4
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	ce d1       	rcall	.+924    	; 0x534 <SCPI_RegSetBits>
     198:	ee 89       	ldd	r30, Y+22	; 0x16
     19a:	ff 89       	ldd	r31, Y+23	; 0x17
     19c:	30 97       	sbiw	r30, 0x00	; 0
     19e:	41 f0       	breq	.+16     	; 0x1b0 <SCPI_ErrorEmit+0x2c>
     1a0:	01 90       	ld	r0, Z+
     1a2:	f0 81       	ld	r31, Z
     1a4:	e0 2d       	mov	r30, r0
     1a6:	30 97       	sbiw	r30, 0x00	; 0
     1a8:	19 f0       	breq	.+6      	; 0x1b0 <SCPI_ErrorEmit+0x2c>
     1aa:	b8 01       	movw	r22, r16
     1ac:	ce 01       	movw	r24, r28
     1ae:	09 95       	icall
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	1f 91       	pop	r17
     1b6:	0f 91       	pop	r16
     1b8:	08 95       	ret

000001ba <SCPI_ErrorInit>:
     1ba:	4d 96       	adiw	r24, 0x1d	; 29
     1bc:	77 c0       	rjmp	.+238    	; 0x2ac <fifo_init>
     1be:	08 95       	ret

000001c0 <SCPI_ErrorPushEx>:
 * @param context
 * @param err - error number
 * @param info - additional text information or NULL for no text
 * @param info_len - length of text or 0 for automatic length
 */
void SCPI_ErrorPushEx(scpi_t * context, int16_t err, char * info, size_t info_len) {
     1c0:	9f 92       	push	r9
     1c2:	af 92       	push	r10
     1c4:	bf 92       	push	r11
     1c6:	cf 92       	push	r12
     1c8:	df 92       	push	r13
     1ca:	ef 92       	push	r14
     1cc:	ff 92       	push	r15
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	00 d0       	rcall	.+0      	; 0x1d8 <SCPI_ErrorPushEx+0x18>
     1d8:	cd b7       	in	r28, 0x3d	; 61
     1da:	de b7       	in	r29, 0x3e	; 62
     1dc:	5c 01       	movw	r10, r24
     1de:	7b 01       	movw	r14, r22
    int i;
    /* automatic calculation of length */
    if (info && info_len == 0) {
     1e0:	41 15       	cp	r20, r1
     1e2:	51 05       	cpc	r21, r1
     1e4:	39 f0       	breq	.+14     	; 0x1f4 <SCPI_ErrorPushEx+0x34>
     1e6:	23 2b       	or	r18, r19
     1e8:	29 f4       	brne	.+10     	; 0x1f4 <SCPI_ErrorPushEx+0x34>
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
     1ea:	6f ef       	ldi	r22, 0xFF	; 255
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	ca 01       	movw	r24, r20
     1f0:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <BSD_strnlen>
    scpi_error_t error_value;
    /* SCPIDEFINE_strndup is sometimes a dumy that does not reference it's arguments. 
       Since info_len is not referenced elsewhere caoing to void prevents unusd argument warnings */
    (void) info_len;
    char * info_ptr = info ? SCPIDEFINE_strndup(&context->error_info_heap, info, info_len) : NULL;
    SCPI_ERROR_SETVAL(&error_value, err, info_ptr);
     1f4:	fa 82       	std	Y+2, r15	; 0x02
     1f6:	e9 82       	std	Y+1, r14	; 0x01
    if (!fifo_add(&context->error_queue, &error_value)) {
     1f8:	85 01       	movw	r16, r10
     1fa:	03 5e       	subi	r16, 0xE3	; 227
     1fc:	1f 4f       	sbci	r17, 0xFF	; 255
     1fe:	be 01       	movw	r22, r28
     200:	6f 5f       	subi	r22, 0xFF	; 255
     202:	7f 4f       	sbci	r23, 0xFF	; 255
     204:	c8 01       	movw	r24, r16
     206:	5e d0       	rcall	.+188    	; 0x2c4 <fifo_add>
     208:	98 2e       	mov	r9, r24
     20a:	81 11       	cpse	r24, r1
     20c:	0e c0       	rjmp	.+28     	; 0x22a <SCPI_ErrorPushEx+0x6a>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        fifo_remove_last(&context->error_queue, &error_value);
     20e:	be 01       	movw	r22, r28
     210:	6f 5f       	subi	r22, 0xFF	; 255
     212:	7f 4f       	sbci	r23, 0xFF	; 255
     214:	c8 01       	movw	r24, r16
     216:	86 d0       	rcall	.+268    	; 0x324 <fifo_remove_last>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
     218:	82 ea       	ldi	r24, 0xA2	; 162
     21a:	9e ef       	ldi	r25, 0xFE	; 254
     21c:	9a 83       	std	Y+2, r25	; 0x02
     21e:	89 83       	std	Y+1, r24	; 0x01
        fifo_add(&context->error_queue, &error_value);
     220:	be 01       	movw	r22, r28
     222:	6f 5f       	subi	r22, 0xFF	; 255
     224:	7f 4f       	sbci	r23, 0xFF	; 255
     226:	c8 01       	movw	r24, r16
     228:	4d d0       	rcall	.+154    	; 0x2c4 <fifo_add>
     22a:	0e e1       	ldi	r16, 0x1E	; 30
     22c:	11 e0       	ldi	r17, 0x01	; 1
     22e:	0f 2e       	mov	r0, r31
     230:	f4 e5       	ldi	r31, 0x54	; 84
     232:	cf 2e       	mov	r12, r31
     234:	f1 e0       	ldi	r31, 0x01	; 1
     236:	df 2e       	mov	r13, r31
     238:	f0 2d       	mov	r31, r0
     23a:	f8 01       	movw	r30, r16
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);

    for (i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
     23c:	80 81       	ld	r24, Z
     23e:	91 81       	ldd	r25, Z+1	; 0x01
     240:	8e 15       	cp	r24, r14
     242:	9f 05       	cpc	r25, r15
     244:	54 f0       	brlt	.+20     	; 0x25a <SCPI_ErrorPushEx+0x9a>
     246:	82 81       	ldd	r24, Z+2	; 0x02
     248:	93 81       	ldd	r25, Z+3	; 0x03
     24a:	e8 16       	cp	r14, r24
     24c:	f9 06       	cpc	r15, r25
     24e:	2c f0       	brlt	.+10     	; 0x25a <SCPI_ErrorPushEx+0x9a>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
     250:	44 81       	ldd	r20, Z+4	; 0x04
     252:	55 81       	ldd	r21, Z+5	; 0x05
     254:	62 e0       	ldi	r22, 0x02	; 2
     256:	c5 01       	movw	r24, r10
     258:	6d d1       	rcall	.+730    	; 0x534 <SCPI_RegSetBits>
     25a:	0a 5f       	subi	r16, 0xFA	; 250
     25c:	1f 4f       	sbci	r17, 0xFF	; 255
    if (info && info_len == 0) {
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);

    for (i = 0; i < ERROR_DEFS_N; i++) {
     25e:	0c 15       	cp	r16, r12
     260:	1d 05       	cpc	r17, r13
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
        }
    }

    SCPI_ErrorEmit(context, err);
     262:	59 f7       	brne	.-42     	; 0x23a <SCPI_ErrorPushEx+0x7a>
     264:	b7 01       	movw	r22, r14
     266:	c5 01       	movw	r24, r10
     268:	8d df       	rcall	.-230    	; 0x184 <SCPI_ErrorEmit>
    if (queue_overflow) {
     26a:	91 10       	cpse	r9, r1
        SCPI_ErrorEmit(context, SCPI_ERROR_QUEUE_OVERFLOW);
     26c:	04 c0       	rjmp	.+8      	; 0x276 <SCPI_ErrorPushEx+0xb6>
     26e:	62 ea       	ldi	r22, 0xA2	; 162
     270:	7e ef       	ldi	r23, 0xFE	; 254
     272:	c5 01       	movw	r24, r10
     274:	87 df       	rcall	.-242    	; 0x184 <SCPI_ErrorEmit>
    }

    if (context) {
     276:	a1 14       	cp	r10, r1
     278:	b1 04       	cpc	r11, r1
     27a:	21 f0       	breq	.+8      	; 0x284 <SCPI_ErrorPushEx+0xc4>
        context->cmd_error = TRUE;
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	d5 01       	movw	r26, r10
     280:	5c 96       	adiw	r26, 0x1c	; 28
     282:	8c 93       	st	X, r24
    }
}
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	1f 91       	pop	r17
     28e:	0f 91       	pop	r16
     290:	ff 90       	pop	r15
     292:	ef 90       	pop	r14
     294:	df 90       	pop	r13
     296:	cf 90       	pop	r12
     298:	bf 90       	pop	r11
     29a:	af 90       	pop	r10
     29c:	9f 90       	pop	r9
     29e:	08 95       	ret

000002a0 <SCPI_ErrorPush>:
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
    SCPI_ErrorPushEx(context, err, NULL, 0);
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	50 e0       	ldi	r21, 0x00	; 0
     2a8:	8b cf       	rjmp	.-234    	; 0x1c0 <SCPI_ErrorPushEx>
     2aa:	08 95       	ret

000002ac <fifo_init>:

    fifo->rd = (fifo->rd + 1) % (fifo->size);
    fifo->count -= 1;

    return TRUE;
}
     2ac:	fc 01       	movw	r30, r24
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	10 82       	st	Z, r1
     2b2:	13 82       	std	Z+3, r1	; 0x03
     2b4:	12 82       	std	Z+2, r1	; 0x02
     2b6:	15 82       	std	Z+5, r1	; 0x05
     2b8:	14 82       	std	Z+4, r1	; 0x04
     2ba:	71 87       	std	Z+9, r23	; 0x09
     2bc:	60 87       	std	Z+8, r22	; 0x08
     2be:	57 83       	std	Z+7, r21	; 0x07
     2c0:	46 83       	std	Z+6, r20	; 0x06
     2c2:	08 95       	ret

000002c4 <fifo_add>:
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	fc 01       	movw	r30, r24
     2ca:	24 81       	ldd	r18, Z+4	; 0x04
     2cc:	35 81       	ldd	r19, Z+5	; 0x05
     2ce:	86 81       	ldd	r24, Z+6	; 0x06
     2d0:	97 81       	ldd	r25, Z+7	; 0x07
     2d2:	28 17       	cp	r18, r24
     2d4:	39 07       	cpc	r19, r25
     2d6:	01 f1       	breq	.+64     	; 0x318 <fifo_add+0x54>
     2d8:	61 15       	cp	r22, r1
     2da:	71 05       	cpc	r23, r1
     2dc:	f9 f0       	breq	.+62     	; 0x31c <fifo_add+0x58>
     2de:	a0 81       	ld	r26, Z
     2e0:	b1 81       	ldd	r27, Z+1	; 0x01
     2e2:	aa 0f       	add	r26, r26
     2e4:	bb 1f       	adc	r27, r27
     2e6:	80 85       	ldd	r24, Z+8	; 0x08
     2e8:	91 85       	ldd	r25, Z+9	; 0x09
     2ea:	a8 0f       	add	r26, r24
     2ec:	b9 1f       	adc	r27, r25
     2ee:	eb 01       	movw	r28, r22
     2f0:	88 81       	ld	r24, Y
     2f2:	99 81       	ldd	r25, Y+1	; 0x01
     2f4:	8d 93       	st	X+, r24
     2f6:	9c 93       	st	X, r25
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	66 81       	ldd	r22, Z+6	; 0x06
     300:	77 81       	ldd	r23, Z+7	; 0x07
     302:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__divmodhi4>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	80 83       	st	Z, r24
     30a:	84 81       	ldd	r24, Z+4	; 0x04
     30c:	95 81       	ldd	r25, Z+5	; 0x05
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	95 83       	std	Z+5, r25	; 0x05
     312:	84 83       	std	Z+4, r24	; 0x04
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	03 c0       	rjmp	.+6      	; 0x31e <fifo_add+0x5a>
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	01 c0       	rjmp	.+2      	; 0x31e <fifo_add+0x5a>
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <fifo_remove_last>:
 * Remove last element from fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove_last(scpi_fifo_t * fifo, scpi_error_t * value) {
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	fc 01       	movw	r30, r24
     32a:	eb 01       	movw	r28, r22
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
     32c:	84 81       	ldd	r24, Z+4	; 0x04
     32e:	95 81       	ldd	r25, Z+5	; 0x05
     330:	89 2b       	or	r24, r25
     332:	f1 f0       	breq	.+60     	; 0x370 <fifo_remove_last+0x4c>
        return FALSE;
    }

    fifo->wr = (fifo->wr + fifo->size - 1) % (fifo->size);
     334:	66 81       	ldd	r22, Z+6	; 0x06
     336:	77 81       	ldd	r23, Z+7	; 0x07
     338:	80 81       	ld	r24, Z
     33a:	91 81       	ldd	r25, Z+1	; 0x01
     33c:	86 0f       	add	r24, r22
     33e:	97 1f       	adc	r25, r23
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__divmodhi4>
     346:	91 83       	std	Z+1, r25	; 0x01
     348:	80 83       	st	Z, r24

    if (value) {
     34a:	20 97       	sbiw	r28, 0x00	; 0
     34c:	51 f0       	breq	.+20     	; 0x362 <fifo_remove_last+0x3e>
        *value = fifo->data[fifo->wr];
     34e:	88 0f       	add	r24, r24
     350:	99 1f       	adc	r25, r25
     352:	a0 85       	ldd	r26, Z+8	; 0x08
     354:	b1 85       	ldd	r27, Z+9	; 0x09
     356:	a8 0f       	add	r26, r24
     358:	b9 1f       	adc	r27, r25
     35a:	8d 91       	ld	r24, X+
     35c:	9c 91       	ld	r25, X
     35e:	99 83       	std	Y+1, r25	; 0x01
     360:	88 83       	st	Y, r24
    }
    fifo->count -= 1;
     362:	84 81       	ldd	r24, Z+4	; 0x04
     364:	95 81       	ldd	r25, Z+5	; 0x05
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	95 83       	std	Z+5, r25	; 0x05
     36a:	84 83       	std	Z+4, r24	; 0x04

    return TRUE;
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	01 c0       	rjmp	.+2      	; 0x372 <fifo_remove_last+0x4e>
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove_last(scpi_fifo_t * fifo, scpi_error_t * value) {
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
        return FALSE;
     370:	80 e0       	ldi	r24, 0x00	; 0
        *value = fifo->data[fifo->wr];
    }
    fifo->count -= 1;

    return TRUE;
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <SCPI_RegClearBits>:
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && context) {
     378:	6a 30       	cpi	r22, 0x0A	; 10
     37a:	58 f4       	brcc	.+22     	; 0x392 <SCPI_RegClearBits+0x1a>
     37c:	00 97       	sbiw	r24, 0x00	; 0
     37e:	61 f0       	breq	.+24     	; 0x398 <SCPI_RegClearBits+0x20>
        return context->registers[name];
     380:	e6 2f       	mov	r30, r22
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	ee 0f       	add	r30, r30
     386:	ff 1f       	adc	r31, r31
     388:	e8 0f       	add	r30, r24
     38a:	f9 1f       	adc	r31, r25
     38c:	27 a1       	ldd	r18, Z+39	; 0x27
     38e:	30 a5       	ldd	r19, Z+40	; 0x28
     390:	05 c0       	rjmp	.+10     	; 0x39c <SCPI_RegClearBits+0x24>
    } else {
        return 0;
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	02 c0       	rjmp	.+4      	; 0x39c <SCPI_RegClearBits+0x24>
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
     39c:	40 95       	com	r20
     39e:	50 95       	com	r21
     3a0:	42 23       	and	r20, r18
     3a2:	53 23       	and	r21, r19
     3a4:	1a c0       	rjmp	.+52     	; 0x3da <SCPI_RegSet>
     3a6:	08 95       	ret

000003a8 <regUpdateSTB>:
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && context) {
     3a8:	4a 30       	cpi	r20, 0x0A	; 10
     3aa:	98 f4       	brcc	.+38     	; 0x3d2 <regUpdateSTB+0x2a>
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	89 f0       	breq	.+34     	; 0x3d2 <regUpdateSTB+0x2a>
        return context->registers[name];
     3b0:	e4 2f       	mov	r30, r20
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	ee 0f       	add	r30, r30
     3b6:	ff 1f       	adc	r31, r31
     3b8:	e8 0f       	add	r30, r24
     3ba:	f9 1f       	adc	r31, r25
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
    if (val & SCPI_RegGet(context, mask)) {
     3bc:	07 a0       	ldd	r0, Z+39	; 0x27
     3be:	f0 a5       	ldd	r31, Z+40	; 0x28
     3c0:	e0 2d       	mov	r30, r0
     3c2:	6e 23       	and	r22, r30
     3c4:	7f 23       	and	r23, r31
     3c6:	67 2b       	or	r22, r23
     3c8:	21 f0       	breq	.+8      	; 0x3d2 <regUpdateSTB+0x2a>
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
     3ca:	a9 01       	movw	r20, r18
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	b2 c0       	rjmp	.+356    	; 0x534 <SCPI_RegSetBits>
     3d0:	08 95       	ret
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
     3d2:	a9 01       	movw	r20, r18
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	d0 cf       	rjmp	.-96     	; 0x378 <SCPI_RegClearBits>
     3d8:	08 95       	ret

000003da <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	ec 01       	movw	r28, r24
     3e8:	7a 01       	movw	r14, r20
    scpi_bool_t srq = FALSE;
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
     3ea:	6a 30       	cpi	r22, 0x0A	; 10
     3ec:	08 f0       	brcs	.+2      	; 0x3f0 <SCPI_RegSet+0x16>
     3ee:	87 c0       	rjmp	.+270    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     3f0:	00 97       	sbiw	r24, 0x00	; 0
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <SCPI_RegSet+0x1c>
     3f4:	84 c0       	rjmp	.+264    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
        return;
    }

    /* store old register value */
    old_val = context->registers[name];
     3f6:	06 2f       	mov	r16, r22
     3f8:	10 e0       	ldi	r17, 0x00	; 0
     3fa:	d8 01       	movw	r26, r16
     3fc:	aa 0f       	add	r26, r26
     3fe:	bb 1f       	adc	r27, r27
     400:	a8 0f       	add	r26, r24
     402:	b9 1f       	adc	r27, r25
     404:	97 96       	adiw	r26, 0x27	; 39
     406:	4d 91       	ld	r20, X+
     408:	5c 91       	ld	r21, X
     40a:	98 97       	sbiw	r26, 0x28	; 40

    /* set register value */
    context->registers[name] = val;
     40c:	98 96       	adiw	r26, 0x28	; 40
     40e:	fc 92       	st	X, r15
     410:	ee 92       	st	-X, r14
     412:	97 97       	sbiw	r26, 0x27	; 39

    /** @TODO: remove recutsion */
    switch (name) {
     414:	86 2f       	mov	r24, r22
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	8a 30       	cpi	r24, 0x0A	; 10
     41a:	91 05       	cpc	r25, r1
     41c:	08 f0       	brcs	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	6f c0       	rjmp	.+222    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     420:	fc 01       	movw	r30, r24
     422:	e4 5b       	subi	r30, 0xB4	; 180
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <__tablejump2__>
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
            mask &= ~STB_SRQ;
            if (val & mask) {
     42a:	89 a5       	ldd	r24, Y+41	; 0x29
     42c:	9a a5       	ldd	r25, Y+42	; 0x2a
     42e:	8f 7b       	andi	r24, 0xBF	; 191
     430:	8e 21       	and	r24, r14
     432:	9f 21       	and	r25, r15
     434:	89 2b       	or	r24, r25
     436:	71 f0       	breq	.+28     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
                val |= STB_SRQ;
     438:	68 94       	set
     43a:	e6 f8       	bld	r14, 6
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
     43c:	00 0f       	add	r16, r16
     43e:	11 1f       	adc	r17, r17
     440:	fe 01       	movw	r30, r28
     442:	e0 0f       	add	r30, r16
     444:	f1 1f       	adc	r31, r17
     446:	f0 a6       	std	Z+40, r15	; 0x28
     448:	e7 a2       	std	Z+39, r14	; 0x27

    if (srq) {
     44a:	4e 15       	cp	r20, r14
     44c:	5f 05       	cpc	r21, r15
     44e:	09 f0       	breq	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     450:	41 c0       	rjmp	.+130    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     452:	55 c0       	rjmp	.+170    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
                    srq = TRUE;
                }
            } else {
                val &= ~STB_SRQ;
     454:	e8 94       	clt
     456:	e6 f8       	bld	r14, 6
     458:	4c c0       	rjmp	.+152    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
            }
            break;
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	ce 01       	movw	r24, r28
     45e:	56 d0       	rcall	.+172    	; 0x50c <regUpdate>
            break;
     460:	48 c0       	rjmp	.+144    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
     462:	20 e2       	ldi	r18, 0x20	; 32
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	43 e0       	ldi	r20, 0x03	; 3
     468:	b7 01       	movw	r22, r14
     46a:	ce 01       	movw	r24, r28
     46c:	9d df       	rcall	.-198    	; 0x3a8 <regUpdateSTB>
            break;
     46e:	41 c0       	rjmp	.+130    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
     470:	62 e0       	ldi	r22, 0x02	; 2
     472:	ce 01       	movw	r24, r28
     474:	4b d0       	rcall	.+150    	; 0x50c <regUpdate>
            break;
     476:	3d c0       	rjmp	.+122    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
     478:	28 e0       	ldi	r18, 0x08	; 8
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	48 e0       	ldi	r20, 0x08	; 8
     47e:	b7 01       	movw	r22, r14
     480:	ce 01       	movw	r24, r28
     482:	92 df       	rcall	.-220    	; 0x3a8 <regUpdateSTB>
            break;
     484:	36 c0       	rjmp	.+108    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
     486:	67 e0       	ldi	r22, 0x07	; 7
     488:	ce 01       	movw	r24, r28
     48a:	40 d0       	rcall	.+128    	; 0x50c <regUpdate>
     48c:	32 c0       	rjmp	.+100    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
            break;
     48e:	40 95       	com	r20
 * @param context
 * @param condReg - condition register name
 * @param eventReg - event register name
 */
static void regUpdateEvent(scpi_t * context, scpi_reg_val_t oldCondVal, scpi_reg_val_t newCondVal, scpi_reg_name_t eventReg) {
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
     490:	50 95       	com	r21
     492:	4e 21       	and	r20, r14
     494:	5f 21       	and	r21, r15
     496:	8d a9       	ldd	r24, Y+53	; 0x35
     498:	9e a9       	ldd	r25, Y+54	; 0x36
     49a:	48 2b       	or	r20, r24
     49c:	59 2b       	or	r21, r25
     49e:	67 e0       	ldi	r22, 0x07	; 7
     4a0:	ce 01       	movw	r24, r28
     4a2:	9b df       	rcall	.-202    	; 0x3da <SCPI_RegSet>
     4a4:	26 c0       	rjmp	.+76     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4a6:	20 e8       	ldi	r18, 0x80	; 128
            break;
        case SCPI_REG_QUESC:
            regUpdateEvent(context, old_val, val, SCPI_REG_QUES);
            break;
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	45 e0       	ldi	r20, 0x05	; 5
     4ac:	b7 01       	movw	r22, r14
     4ae:	ce 01       	movw	r24, r28
     4b0:	7b df       	rcall	.-266    	; 0x3a8 <regUpdateSTB>
     4b2:	1f c0       	rjmp	.+62     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
            break;
     4b4:	64 e0       	ldi	r22, 0x04	; 4
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
     4b6:	ce 01       	movw	r24, r28
     4b8:	29 d0       	rcall	.+82     	; 0x50c <regUpdate>
     4ba:	1b c0       	rjmp	.+54     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4bc:	40 95       	com	r20
            break;
     4be:	50 95       	com	r21
 * @param context
 * @param condReg - condition register name
 * @param eventReg - event register name
 */
static void regUpdateEvent(scpi_t * context, scpi_reg_val_t oldCondVal, scpi_reg_val_t newCondVal, scpi_reg_name_t eventReg) {
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
     4c0:	4e 21       	and	r20, r14
     4c2:	5f 21       	and	r21, r15
     4c4:	8f a5       	ldd	r24, Y+47	; 0x2f
     4c6:	98 a9       	ldd	r25, Y+48	; 0x30
     4c8:	48 2b       	or	r20, r24
     4ca:	59 2b       	or	r21, r25
     4cc:	64 e0       	ldi	r22, 0x04	; 4
     4ce:	ce 01       	movw	r24, r28
     4d0:	84 df       	rcall	.-248    	; 0x3da <SCPI_RegSet>
     4d2:	0f c0       	rjmp	.+30     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4d4:	ee 89       	ldd	r30, Y+22	; 0x16
     4d6:	ff 89       	ldd	r31, Y+23	; 0x17
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
     4d8:	30 97       	sbiw	r30, 0x00	; 0
     4da:	89 f0       	breq	.+34     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4dc:	04 80       	ldd	r0, Z+4	; 0x04
     4de:	f5 81       	ldd	r31, Z+5	; 0x05
     4e0:	e0 2d       	mov	r30, r0
     4e2:	30 97       	sbiw	r30, 0x00	; 0
     4e4:	61 f0       	breq	.+24     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4e6:	4f a1       	ldd	r20, Y+39	; 0x27
     4e8:	58 a5       	ldd	r21, Y+40	; 0x28
        return context->interface->control(context, ctrl, val);
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	ce 01       	movw	r24, r28
     4ee:	09 95       	icall
     4f0:	06 c0       	rjmp	.+12     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4f2:	00 0f       	add	r16, r16
     4f4:	11 1f       	adc	r17, r17
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
     4f6:	c0 0f       	add	r28, r16
     4f8:	d1 1f       	adc	r29, r17
     4fa:	f8 a6       	std	Y+40, r15	; 0x28
     4fc:	ef a2       	std	Y+39, r14	; 0x27
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28

    if (srq) {
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
    }
}
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	08 95       	ret

0000050c <regUpdate>:
     50c:	6a 30       	cpi	r22, 0x0A	; 10
     50e:	58 f4       	brcc	.+22     	; 0x526 <regUpdate+0x1a>
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && context) {
     510:	00 97       	sbiw	r24, 0x00	; 0
     512:	61 f0       	breq	.+24     	; 0x52c <regUpdate+0x20>
        return context->registers[name];
     514:	e6 2f       	mov	r30, r22
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	ee 0f       	add	r30, r30
     51a:	ff 1f       	adc	r31, r31
     51c:	e8 0f       	add	r30, r24
     51e:	f9 1f       	adc	r31, r25
     520:	47 a1       	ldd	r20, Z+39	; 0x27
     522:	50 a5       	ldd	r21, Z+40	; 0x28
     524:	05 c0       	rjmp	.+10     	; 0x530 <regUpdate+0x24>
    } else {
        return 0;
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	02 c0       	rjmp	.+4      	; 0x530 <regUpdate+0x24>
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	50 e0       	ldi	r21, 0x00	; 0
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
     530:	54 cf       	rjmp	.-344    	; 0x3da <SCPI_RegSet>
     532:	08 95       	ret

00000534 <SCPI_RegSetBits>:
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && context) {
     534:	6a 30       	cpi	r22, 0x0A	; 10
     536:	58 f4       	brcc	.+22     	; 0x54e <SCPI_RegSetBits+0x1a>
     538:	00 97       	sbiw	r24, 0x00	; 0
     53a:	61 f0       	breq	.+24     	; 0x554 <SCPI_RegSetBits+0x20>
        return context->registers[name];
     53c:	e6 2f       	mov	r30, r22
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	ee 0f       	add	r30, r30
     542:	ff 1f       	adc	r31, r31
     544:	e8 0f       	add	r30, r24
     546:	f9 1f       	adc	r31, r25
     548:	27 a1       	ldd	r18, Z+39	; 0x27
     54a:	30 a5       	ldd	r19, Z+40	; 0x28
     54c:	05 c0       	rjmp	.+10     	; 0x558 <SCPI_RegSetBits+0x24>
    } else {
        return 0;
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	02 c0       	rjmp	.+4      	; 0x558 <SCPI_RegSetBits+0x24>
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
     558:	42 2b       	or	r20, r18
     55a:	53 2b       	or	r21, r19
     55c:	3e cf       	rjmp	.-388    	; 0x3da <SCPI_RegSet>
     55e:	08 95       	ret

00000560 <iseos>:
        token->len = 0;
        token->type = SCPI_TOKEN_UNKNOWN;
    }

    return token->len;
}
     560:	fc 01       	movw	r30, r24
     562:	80 81       	ld	r24, Z
     564:	91 81       	ldd	r25, Z+1	; 0x01
     566:	24 81       	ldd	r18, Z+4	; 0x04
     568:	35 81       	ldd	r19, Z+5	; 0x05
     56a:	28 0f       	add	r18, r24
     56c:	39 1f       	adc	r19, r25
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	42 81       	ldd	r20, Z+2	; 0x02
     574:	53 81       	ldd	r21, Z+3	; 0x03
     576:	42 17       	cp	r20, r18
     578:	53 07       	cpc	r21, r19
     57a:	10 f4       	brcc	.+4      	; 0x580 <iseos+0x20>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	08 95       	ret

00000582 <skipWs>:
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	ec 01       	movw	r28, r24
     58c:	00 e0       	ldi	r16, 0x00	; 0
     58e:	10 e0       	ldi	r17, 0x00	; 0
     590:	05 c0       	rjmp	.+10     	; 0x59c <skipWs+0x1a>
     592:	31 96       	adiw	r30, 0x01	; 1
     594:	fb 83       	std	Y+3, r31	; 0x03
     596:	ea 83       	std	Y+2, r30	; 0x02
     598:	0f 5f       	subi	r16, 0xFF	; 255
     59a:	1f 4f       	sbci	r17, 0xFF	; 255
     59c:	ce 01       	movw	r24, r28
     59e:	e0 df       	rcall	.-64     	; 0x560 <iseos>
     5a0:	89 2b       	or	r24, r25
     5a2:	59 f4       	brne	.+22     	; 0x5ba <skipWs+0x38>
     5a4:	ea 81       	ldd	r30, Y+2	; 0x02
     5a6:	fb 81       	ldd	r31, Y+3	; 0x03
     5a8:	80 81       	ld	r24, Z
     5aa:	08 2e       	mov	r0, r24
     5ac:	00 0c       	add	r0, r0
     5ae:	99 0b       	sbc	r25, r25
     5b0:	80 32       	cpi	r24, 0x20	; 32
     5b2:	91 05       	cpc	r25, r1
     5b4:	71 f3       	breq	.-36     	; 0x592 <skipWs+0x10>
     5b6:	09 97       	sbiw	r24, 0x09	; 9
     5b8:	61 f3       	breq	.-40     	; 0x592 <skipWs+0x10>
     5ba:	c8 01       	movw	r24, r16
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	08 95       	ret

000005c6 <skipDigit>:
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	ec 01       	movw	r28, r24
     5cc:	c9 df       	rcall	.-110    	; 0x560 <iseos>
     5ce:	00 97       	sbiw	r24, 0x00	; 0
     5d0:	79 f4       	brne	.+30     	; 0x5f0 <skipDigit+0x2a>
     5d2:	ea 81       	ldd	r30, Y+2	; 0x02
     5d4:	fb 81       	ldd	r31, Y+3	; 0x03
     5d6:	20 81       	ld	r18, Z
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	20 53       	subi	r18, 0x30	; 48
     5dc:	31 09       	sbc	r19, r1
     5de:	2a 30       	cpi	r18, 0x0A	; 10
     5e0:	31 05       	cpc	r19, r1
     5e2:	40 f4       	brcc	.+16     	; 0x5f4 <skipDigit+0x2e>
     5e4:	31 96       	adiw	r30, 0x01	; 1
     5e6:	fb 83       	std	Y+3, r31	; 0x03
     5e8:	ea 83       	std	Y+2, r30	; 0x02
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <skipDigit+0x2e>
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <skipNumbers>:
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	ec 01       	movw	r28, r24
     604:	00 e0       	ldi	r16, 0x00	; 0
     606:	10 e0       	ldi	r17, 0x00	; 0
     608:	05 c0       	rjmp	.+10     	; 0x614 <skipNumbers+0x1a>
     60a:	31 96       	adiw	r30, 0x01	; 1
     60c:	fb 83       	std	Y+3, r31	; 0x03
     60e:	ea 83       	std	Y+2, r30	; 0x02
     610:	0f 5f       	subi	r16, 0xFF	; 255
     612:	1f 4f       	sbci	r17, 0xFF	; 255
     614:	ce 01       	movw	r24, r28
     616:	a4 df       	rcall	.-184    	; 0x560 <iseos>
     618:	89 2b       	or	r24, r25
     61a:	39 f4       	brne	.+14     	; 0x62a <skipNumbers+0x30>
     61c:	ea 81       	ldd	r30, Y+2	; 0x02
     61e:	fb 81       	ldd	r31, Y+3	; 0x03
     620:	80 81       	ld	r24, Z
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	c0 97       	sbiw	r24, 0x30	; 48
     626:	0a 97       	sbiw	r24, 0x0a	; 10
     628:	80 f3       	brcs	.-32     	; 0x60a <skipNumbers+0x10>
     62a:	c8 01       	movw	r24, r16
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	08 95       	ret

00000636 <skipPlusmn>:
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	ec 01       	movw	r28, r24
     63c:	91 df       	rcall	.-222    	; 0x560 <iseos>
     63e:	00 97       	sbiw	r24, 0x00	; 0
     640:	91 f4       	brne	.+36     	; 0x666 <skipPlusmn+0x30>
     642:	ea 81       	ldd	r30, Y+2	; 0x02
     644:	fb 81       	ldd	r31, Y+3	; 0x03
     646:	20 81       	ld	r18, Z
     648:	02 2e       	mov	r0, r18
     64a:	00 0c       	add	r0, r0
     64c:	33 0b       	sbc	r19, r19
     64e:	2b 32       	cpi	r18, 0x2B	; 43
     650:	31 05       	cpc	r19, r1
     652:	19 f0       	breq	.+6      	; 0x65a <skipPlusmn+0x24>
     654:	2d 32       	cpi	r18, 0x2D	; 45
     656:	31 05       	cpc	r19, r1
     658:	41 f4       	brne	.+16     	; 0x66a <skipPlusmn+0x34>
     65a:	31 96       	adiw	r30, 0x01	; 1
     65c:	fb 83       	std	Y+3, r31	; 0x03
     65e:	ea 83       	std	Y+2, r30	; 0x02
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	02 c0       	rjmp	.+4      	; 0x66a <skipPlusmn+0x34>
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <skipChr>:
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	ec 01       	movw	r28, r24
     678:	16 2f       	mov	r17, r22
     67a:	72 df       	rcall	.-284    	; 0x560 <iseos>
     67c:	00 97       	sbiw	r24, 0x00	; 0
     67e:	59 f4       	brne	.+22     	; 0x696 <skipChr+0x26>
     680:	ea 81       	ldd	r30, Y+2	; 0x02
     682:	fb 81       	ldd	r31, Y+3	; 0x03
     684:	20 81       	ld	r18, Z
     686:	12 13       	cpse	r17, r18
     688:	08 c0       	rjmp	.+16     	; 0x69a <skipChr+0x2a>
     68a:	31 96       	adiw	r30, 0x01	; 1
     68c:	fb 83       	std	Y+3, r31	; 0x03
     68e:	ea 83       	std	Y+2, r30	; 0x02
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	02 c0       	rjmp	.+4      	; 0x69a <skipChr+0x2a>
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	1f 91       	pop	r17
     6a0:	08 95       	ret

000006a2 <skipAlpha>:
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	8c 01       	movw	r16, r24
     6b0:	e1 2c       	mov	r14, r1
     6b2:	f1 2c       	mov	r15, r1
     6b4:	07 c0       	rjmp	.+14     	; 0x6c4 <skipAlpha+0x22>
     6b6:	21 96       	adiw	r28, 0x01	; 1
     6b8:	f8 01       	movw	r30, r16
     6ba:	d3 83       	std	Z+3, r29	; 0x03
     6bc:	c2 83       	std	Z+2, r28	; 0x02
     6be:	ff ef       	ldi	r31, 0xFF	; 255
     6c0:	ef 1a       	sub	r14, r31
     6c2:	ff 0a       	sbc	r15, r31
     6c4:	c8 01       	movw	r24, r16
     6c6:	4c df       	rcall	.-360    	; 0x560 <iseos>
     6c8:	89 2b       	or	r24, r25
     6ca:	49 f4       	brne	.+18     	; 0x6de <skipAlpha+0x3c>
     6cc:	f8 01       	movw	r30, r16
     6ce:	c2 81       	ldd	r28, Z+2	; 0x02
     6d0:	d3 81       	ldd	r29, Z+3	; 0x03
     6d2:	88 81       	ld	r24, Y
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 60 21 	call	0x42c0	; 0x42c0 <isalpha>
     6da:	89 2b       	or	r24, r25
     6dc:	61 f7       	brne	.-40     	; 0x6b6 <skipAlpha+0x14>
     6de:	c7 01       	movw	r24, r14
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	08 95       	ret

000006ee <skipProgramMnemonic>:
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	8c 01       	movw	r16, r24
     6fe:	fc 01       	movw	r30, r24
     700:	c2 80       	ldd	r12, Z+2	; 0x02
     702:	d3 80       	ldd	r13, Z+3	; 0x03
     704:	2d df       	rcall	.-422    	; 0x560 <iseos>
     706:	89 2b       	or	r24, r25
     708:	19 f5       	brne	.+70     	; 0x750 <skipProgramMnemonic+0x62>
     70a:	f6 01       	movw	r30, r12
     70c:	80 81       	ld	r24, Z
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 60 21 	call	0x42c0	; 0x42c0 <isalpha>
     714:	89 2b       	or	r24, r25
     716:	21 f1       	breq	.+72     	; 0x760 <skipProgramMnemonic+0x72>
     718:	c6 01       	movw	r24, r12
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	f8 01       	movw	r30, r16
     71e:	93 83       	std	Z+3, r25	; 0x03
     720:	82 83       	std	Z+2, r24	; 0x02
     722:	04 c0       	rjmp	.+8      	; 0x72c <skipProgramMnemonic+0x3e>
     724:	21 96       	adiw	r28, 0x01	; 1
     726:	f8 01       	movw	r30, r16
     728:	d3 83       	std	Z+3, r29	; 0x03
     72a:	c2 83       	std	Z+2, r28	; 0x02
     72c:	c8 01       	movw	r24, r16
     72e:	18 df       	rcall	.-464    	; 0x560 <iseos>
     730:	89 2b       	or	r24, r25
     732:	71 f4       	brne	.+28     	; 0x750 <skipProgramMnemonic+0x62>
     734:	f8 01       	movw	r30, r16
     736:	c2 81       	ldd	r28, Z+2	; 0x02
     738:	d3 81       	ldd	r29, Z+3	; 0x03
     73a:	f8 80       	ld	r15, Y
     73c:	8f 2d       	mov	r24, r15
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 53 21 	call	0x42a6	; 0x42a6 <isalnum>
     744:	89 2b       	or	r24, r25
     746:	71 f7       	brne	.-36     	; 0x724 <skipProgramMnemonic+0x36>
     748:	ff e5       	ldi	r31, 0x5F	; 95
     74a:	ff 16       	cp	r15, r31
     74c:	59 f3       	breq	.-42     	; 0x724 <skipProgramMnemonic+0x36>
     74e:	08 c0       	rjmp	.+16     	; 0x760 <skipProgramMnemonic+0x72>
     750:	f8 01       	movw	r30, r16
     752:	82 81       	ldd	r24, Z+2	; 0x02
     754:	93 81       	ldd	r25, Z+3	; 0x03
     756:	96 01       	movw	r18, r12
     758:	28 1b       	sub	r18, r24
     75a:	39 0b       	sbc	r19, r25
     75c:	c9 01       	movw	r24, r18
     75e:	05 c0       	rjmp	.+10     	; 0x76a <skipProgramMnemonic+0x7c>
     760:	f8 01       	movw	r30, r16
     762:	82 81       	ldd	r24, Z+2	; 0x02
     764:	93 81       	ldd	r25, Z+3	; 0x03
     766:	8c 19       	sub	r24, r12
     768:	9d 09       	sbc	r25, r13
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	df 90       	pop	r13
     776:	cf 90       	pop	r12
     778:	08 95       	ret

0000077a <skipQuoteProgramData>:
     77a:	ff 92       	push	r15
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	8c 01       	movw	r16, r24
     786:	f6 2e       	mov	r15, r22
     788:	24 c0       	rjmp	.+72     	; 0x7d2 <skipQuoteProgramData+0x58>
     78a:	f8 01       	movw	r30, r16
     78c:	c2 81       	ldd	r28, Z+2	; 0x02
     78e:	d3 81       	ldd	r29, Z+3	; 0x03
     790:	88 81       	ld	r24, Y
     792:	8f 37       	cpi	r24, 0x7F	; 127
     794:	09 f0       	breq	.+2      	; 0x798 <skipQuoteProgramData+0x1e>
     796:	30 f4       	brcc	.+12     	; 0x7a4 <skipQuoteProgramData+0x2a>
     798:	8f 15       	cp	r24, r15
     79a:	31 f0       	breq	.+12     	; 0x7a8 <skipQuoteProgramData+0x2e>
     79c:	21 96       	adiw	r28, 0x01	; 1
     79e:	d3 83       	std	Z+3, r29	; 0x03
     7a0:	c2 83       	std	Z+2, r28	; 0x02
     7a2:	17 c0       	rjmp	.+46     	; 0x7d2 <skipQuoteProgramData+0x58>
     7a4:	8f 11       	cpse	r24, r15
     7a6:	19 c0       	rjmp	.+50     	; 0x7da <skipQuoteProgramData+0x60>
     7a8:	ce 01       	movw	r24, r28
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	f8 01       	movw	r30, r16
     7ae:	93 83       	std	Z+3, r25	; 0x03
     7b0:	82 83       	std	Z+2, r24	; 0x02
     7b2:	c8 01       	movw	r24, r16
     7b4:	d5 de       	rcall	.-598    	; 0x560 <iseos>
     7b6:	89 2b       	or	r24, r25
     7b8:	41 f4       	brne	.+16     	; 0x7ca <skipQuoteProgramData+0x50>
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	f8 12       	cpse	r15, r24
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <skipQuoteProgramData+0x50>
     7c0:	22 96       	adiw	r28, 0x02	; 2
     7c2:	f8 01       	movw	r30, r16
     7c4:	d3 83       	std	Z+3, r29	; 0x03
     7c6:	c2 83       	std	Z+2, r28	; 0x02
     7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <skipQuoteProgramData+0x58>
     7ca:	f8 01       	movw	r30, r16
     7cc:	d3 83       	std	Z+3, r29	; 0x03
     7ce:	c2 83       	std	Z+2, r28	; 0x02
     7d0:	04 c0       	rjmp	.+8      	; 0x7da <skipQuoteProgramData+0x60>
     7d2:	c8 01       	movw	r24, r16
     7d4:	c5 de       	rcall	.-630    	; 0x560 <iseos>
     7d6:	89 2b       	or	r24, r25
     7d8:	c1 f2       	breq	.-80     	; 0x78a <skipQuoteProgramData+0x10>
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	08 95       	ret

000007e6 <skipColon>:
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	ec 01       	movw	r28, r24
     7ec:	b9 de       	rcall	.-654    	; 0x560 <iseos>
     7ee:	00 97       	sbiw	r24, 0x00	; 0
     7f0:	59 f4       	brne	.+22     	; 0x808 <skipColon+0x22>
     7f2:	ea 81       	ldd	r30, Y+2	; 0x02
     7f4:	fb 81       	ldd	r31, Y+3	; 0x03
     7f6:	20 81       	ld	r18, Z
     7f8:	2a 33       	cpi	r18, 0x3A	; 58
     7fa:	41 f4       	brne	.+16     	; 0x80c <skipColon+0x26>
     7fc:	31 96       	adiw	r30, 0x01	; 1
     7fe:	fb 83       	std	Y+3, r31	; 0x03
     800:	ea 83       	std	Y+2, r30	; 0x02
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	02 c0       	rjmp	.+4      	; 0x80c <skipColon+0x26>
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <scpiLex_IsEos>:
     812:	a6 ce       	rjmp	.-692    	; 0x560 <iseos>
     814:	08 95       	ret

00000816 <scpiLex_WhiteSpace>:
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	8c 01       	movw	r16, r24
     820:	eb 01       	movw	r28, r22
     822:	fc 01       	movw	r30, r24
     824:	82 81       	ldd	r24, Z+2	; 0x02
     826:	93 81       	ldd	r25, Z+3	; 0x03
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	c8 01       	movw	r24, r16
     82e:	a9 de       	rcall	.-686    	; 0x582 <skipWs>
     830:	f8 01       	movw	r30, r16
     832:	82 81       	ldd	r24, Z+2	; 0x02
     834:	93 81       	ldd	r25, Z+3	; 0x03
     836:	29 81       	ldd	r18, Y+1	; 0x01
     838:	3a 81       	ldd	r19, Y+2	; 0x02
     83a:	82 1b       	sub	r24, r18
     83c:	93 0b       	sbc	r25, r19
     83e:	9c 83       	std	Y+4, r25	; 0x04
     840:	8b 83       	std	Y+3, r24	; 0x03
     842:	18 16       	cp	r1, r24
     844:	19 06       	cpc	r1, r25
     846:	1c f4       	brge	.+6      	; 0x84e <scpiLex_WhiteSpace+0x38>
     848:	27 e1       	ldi	r18, 0x17	; 23
     84a:	28 83       	st	Y, r18
     84c:	02 c0       	rjmp	.+4      	; 0x852 <scpiLex_WhiteSpace+0x3c>
     84e:	2a e1       	ldi	r18, 0x1A	; 26
     850:	28 83       	st	Y, r18
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	08 95       	ret

0000085c <scpiLex_ProgramHeader>:
     85c:	ef 92       	push	r14
     85e:	ff 92       	push	r15
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	ec 01       	movw	r28, r24
     86a:	8b 01       	movw	r16, r22
     86c:	8a 81       	ldd	r24, Y+2	; 0x02
     86e:	9b 81       	ldd	r25, Y+3	; 0x03
     870:	fb 01       	movw	r30, r22
     872:	92 83       	std	Z+2, r25	; 0x02
     874:	81 83       	std	Z+1, r24	; 0x01
     876:	8a e1       	ldi	r24, 0x1A	; 26
     878:	80 83       	st	Z, r24
     87a:	ce 01       	movw	r24, r28
     87c:	71 de       	rcall	.-798    	; 0x560 <iseos>
     87e:	89 2b       	or	r24, r25
     880:	09 f0       	breq	.+2      	; 0x884 <scpiLex_ProgramHeader+0x28>
     882:	65 c0       	rjmp	.+202    	; 0x94e <scpiLex_ProgramHeader+0xf2>
     884:	ea 81       	ldd	r30, Y+2	; 0x02
     886:	fb 81       	ldd	r31, Y+3	; 0x03
     888:	80 81       	ld	r24, Z
     88a:	8a 32       	cpi	r24, 0x2A	; 42
     88c:	09 f0       	breq	.+2      	; 0x890 <scpiLex_ProgramHeader+0x34>
     88e:	5f c0       	rjmp	.+190    	; 0x94e <scpiLex_ProgramHeader+0xf2>
     890:	31 96       	adiw	r30, 0x01	; 1
     892:	fb 83       	std	Y+3, r31	; 0x03
     894:	ea 83       	std	Y+2, r30	; 0x02
     896:	ce 01       	movw	r24, r28
     898:	2a df       	rcall	.-428    	; 0x6ee <skipProgramMnemonic>
     89a:	89 2b       	or	r24, r25
     89c:	09 f0       	breq	.+2      	; 0x8a0 <scpiLex_ProgramHeader+0x44>
     89e:	4f c0       	rjmp	.+158    	; 0x93e <scpiLex_ProgramHeader+0xe2>
     8a0:	84 e1       	ldi	r24, 0x14	; 20
     8a2:	f8 01       	movw	r30, r16
     8a4:	80 83       	st	Z, r24
     8a6:	36 c0       	rjmp	.+108    	; 0x914 <scpiLex_ProgramHeader+0xb8>
     8a8:	86 e1       	ldi	r24, 0x16	; 22
     8aa:	f8 01       	movw	r30, r16
     8ac:	80 83       	st	Z, r24
     8ae:	32 c0       	rjmp	.+100    	; 0x914 <scpiLex_ProgramHeader+0xb8>
     8b0:	83 e1       	ldi	r24, 0x13	; 19
     8b2:	f8 01       	movw	r30, r16
     8b4:	80 83       	st	Z, r24
     8b6:	2e c0       	rjmp	.+92     	; 0x914 <scpiLex_ProgramHeader+0xb8>
     8b8:	ce 01       	movw	r24, r28
     8ba:	19 df       	rcall	.-462    	; 0x6ee <skipProgramMnemonic>
     8bc:	99 23       	and	r25, r25
     8be:	a4 f0       	brlt	.+40     	; 0x8e8 <scpiLex_ProgramHeader+0x8c>
     8c0:	89 2b       	or	r24, r25
     8c2:	01 f1       	breq	.+64     	; 0x904 <scpiLex_ProgramHeader+0xa8>
     8c4:	ce 01       	movw	r24, r28
     8c6:	8f df       	rcall	.-226    	; 0x7e6 <skipColon>
     8c8:	89 2b       	or	r24, r25
     8ca:	b1 f7       	brne	.-20     	; 0x8b8 <scpiLex_ProgramHeader+0x5c>
     8cc:	0d c0       	rjmp	.+26     	; 0x8e8 <scpiLex_ProgramHeader+0x8c>
     8ce:	99 23       	and	r25, r25
     8d0:	5c f0       	brlt	.+22     	; 0x8e8 <scpiLex_ProgramHeader+0x8c>
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	ef 28       	or	r14, r15
     8d8:	11 f4       	brne	.+4      	; 0x8de <scpiLex_ProgramHeader+0x82>
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	91 95       	neg	r25
     8e0:	81 95       	neg	r24
     8e2:	91 09       	sbc	r25, r1
     8e4:	9a f4       	brpl	.+38     	; 0x90c <scpiLex_ProgramHeader+0xb0>
     8e6:	0e c0       	rjmp	.+28     	; 0x904 <scpiLex_ProgramHeader+0xa8>
     8e8:	6f e3       	ldi	r22, 0x3F	; 63
     8ea:	ce 01       	movw	r24, r28
     8ec:	c1 de       	rcall	.-638    	; 0x670 <skipChr>
     8ee:	18 16       	cp	r1, r24
     8f0:	19 06       	cpc	r1, r25
     8f2:	24 f4       	brge	.+8      	; 0x8fc <scpiLex_ProgramHeader+0xa0>
     8f4:	85 e1       	ldi	r24, 0x15	; 21
     8f6:	f8 01       	movw	r30, r16
     8f8:	80 83       	st	Z, r24
     8fa:	0c c0       	rjmp	.+24     	; 0x914 <scpiLex_ProgramHeader+0xb8>
     8fc:	81 e1       	ldi	r24, 0x11	; 17
     8fe:	f8 01       	movw	r30, r16
     900:	80 83       	st	Z, r24
     902:	08 c0       	rjmp	.+16     	; 0x914 <scpiLex_ProgramHeader+0xb8>
     904:	82 e1       	ldi	r24, 0x12	; 18
     906:	f8 01       	movw	r30, r16
     908:	80 83       	st	Z, r24
     90a:	04 c0       	rjmp	.+8      	; 0x914 <scpiLex_ProgramHeader+0xb8>
     90c:	f8 01       	movw	r30, r16
     90e:	80 81       	ld	r24, Z
     910:	8a 31       	cpi	r24, 0x1A	; 26
     912:	51 f0       	breq	.+20     	; 0x928 <scpiLex_ProgramHeader+0xcc>
     914:	8a 81       	ldd	r24, Y+2	; 0x02
     916:	9b 81       	ldd	r25, Y+3	; 0x03
     918:	f8 01       	movw	r30, r16
     91a:	21 81       	ldd	r18, Z+1	; 0x01
     91c:	32 81       	ldd	r19, Z+2	; 0x02
     91e:	82 1b       	sub	r24, r18
     920:	93 0b       	sbc	r25, r19
     922:	94 83       	std	Z+4, r25	; 0x04
     924:	83 83       	std	Z+3, r24	; 0x03
     926:	07 c0       	rjmp	.+14     	; 0x936 <scpiLex_ProgramHeader+0xda>
     928:	f8 01       	movw	r30, r16
     92a:	14 82       	std	Z+4, r1	; 0x04
     92c:	13 82       	std	Z+3, r1	; 0x03
     92e:	81 81       	ldd	r24, Z+1	; 0x01
     930:	92 81       	ldd	r25, Z+2	; 0x02
     932:	9b 83       	std	Y+3, r25	; 0x03
     934:	8a 83       	std	Y+2, r24	; 0x02
     936:	f8 01       	movw	r30, r16
     938:	83 81       	ldd	r24, Z+3	; 0x03
     93a:	94 81       	ldd	r25, Z+4	; 0x04
     93c:	12 c0       	rjmp	.+36     	; 0x962 <scpiLex_ProgramHeader+0x106>
     93e:	6f e3       	ldi	r22, 0x3F	; 63
     940:	ce 01       	movw	r24, r28
     942:	96 de       	rcall	.-724    	; 0x670 <skipChr>
     944:	18 16       	cp	r1, r24
     946:	19 06       	cpc	r1, r25
     948:	0c f4       	brge	.+2      	; 0x94c <scpiLex_ProgramHeader+0xf0>
     94a:	ae cf       	rjmp	.-164    	; 0x8a8 <scpiLex_ProgramHeader+0x4c>
     94c:	b1 cf       	rjmp	.-158    	; 0x8b0 <scpiLex_ProgramHeader+0x54>
     94e:	ce 01       	movw	r24, r28
     950:	4a df       	rcall	.-364    	; 0x7e6 <skipColon>
     952:	7c 01       	movw	r14, r24
     954:	ce 01       	movw	r24, r28
     956:	cb de       	rcall	.-618    	; 0x6ee <skipProgramMnemonic>
     958:	18 16       	cp	r1, r24
     95a:	19 06       	cpc	r1, r25
     95c:	0c f4       	brge	.+2      	; 0x960 <scpiLex_ProgramHeader+0x104>
     95e:	b2 cf       	rjmp	.-156    	; 0x8c4 <scpiLex_ProgramHeader+0x68>
     960:	b6 cf       	rjmp	.-148    	; 0x8ce <scpiLex_ProgramHeader+0x72>
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	08 95       	ret

00000970 <scpiLex_CharacterProgramData>:
     970:	cf 92       	push	r12
     972:	df 92       	push	r13
     974:	ff 92       	push	r15
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	8c 01       	movw	r16, r24
     980:	6b 01       	movw	r12, r22
     982:	fc 01       	movw	r30, r24
     984:	82 81       	ldd	r24, Z+2	; 0x02
     986:	93 81       	ldd	r25, Z+3	; 0x03
     988:	fb 01       	movw	r30, r22
     98a:	92 83       	std	Z+2, r25	; 0x02
     98c:	81 83       	std	Z+1, r24	; 0x01
     98e:	c8 01       	movw	r24, r16
     990:	e7 dd       	rcall	.-1074   	; 0x560 <iseos>
     992:	89 2b       	or	r24, r25
     994:	19 f5       	brne	.+70     	; 0x9dc <scpiLex_CharacterProgramData+0x6c>
     996:	f8 01       	movw	r30, r16
     998:	c2 81       	ldd	r28, Z+2	; 0x02
     99a:	d3 81       	ldd	r29, Z+3	; 0x03
     99c:	88 81       	ld	r24, Y
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 60 21 	call	0x42c0	; 0x42c0 <isalpha>
     9a4:	89 2b       	or	r24, r25
     9a6:	d1 f0       	breq	.+52     	; 0x9dc <scpiLex_CharacterProgramData+0x6c>
     9a8:	21 96       	adiw	r28, 0x01	; 1
     9aa:	f8 01       	movw	r30, r16
     9ac:	d3 83       	std	Z+3, r29	; 0x03
     9ae:	c2 83       	std	Z+2, r28	; 0x02
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <scpiLex_CharacterProgramData+0x4a>
     9b2:	21 96       	adiw	r28, 0x01	; 1
     9b4:	f8 01       	movw	r30, r16
     9b6:	d3 83       	std	Z+3, r29	; 0x03
     9b8:	c2 83       	std	Z+2, r28	; 0x02
     9ba:	c8 01       	movw	r24, r16
     9bc:	d1 dd       	rcall	.-1118   	; 0x560 <iseos>
     9be:	89 2b       	or	r24, r25
     9c0:	69 f4       	brne	.+26     	; 0x9dc <scpiLex_CharacterProgramData+0x6c>
     9c2:	f8 01       	movw	r30, r16
     9c4:	c2 81       	ldd	r28, Z+2	; 0x02
     9c6:	d3 81       	ldd	r29, Z+3	; 0x03
     9c8:	f8 80       	ld	r15, Y
     9ca:	8f 2d       	mov	r24, r15
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 53 21 	call	0x42a6	; 0x42a6 <isalnum>
     9d2:	89 2b       	or	r24, r25
     9d4:	71 f7       	brne	.-36     	; 0x9b2 <scpiLex_CharacterProgramData+0x42>
     9d6:	ff e5       	ldi	r31, 0x5F	; 95
     9d8:	ff 16       	cp	r15, r31
     9da:	59 f3       	breq	.-42     	; 0x9b2 <scpiLex_CharacterProgramData+0x42>
     9dc:	f8 01       	movw	r30, r16
     9de:	82 81       	ldd	r24, Z+2	; 0x02
     9e0:	93 81       	ldd	r25, Z+3	; 0x03
     9e2:	f6 01       	movw	r30, r12
     9e4:	21 81       	ldd	r18, Z+1	; 0x01
     9e6:	32 81       	ldd	r19, Z+2	; 0x02
     9e8:	82 1b       	sub	r24, r18
     9ea:	93 0b       	sbc	r25, r19
     9ec:	94 83       	std	Z+4, r25	; 0x04
     9ee:	83 83       	std	Z+3, r24	; 0x03
     9f0:	18 16       	cp	r1, r24
     9f2:	19 06       	cpc	r1, r25
     9f4:	1c f4       	brge	.+6      	; 0x9fc <scpiLex_CharacterProgramData+0x8c>
     9f6:	29 e0       	ldi	r18, 0x09	; 9
     9f8:	20 83       	st	Z, r18
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <scpiLex_CharacterProgramData+0x92>
     9fc:	2a e1       	ldi	r18, 0x1A	; 26
     9fe:	f6 01       	movw	r30, r12
     a00:	20 83       	st	Z, r18
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	ff 90       	pop	r15
     a0c:	df 90       	pop	r13
     a0e:	cf 90       	pop	r12
     a10:	08 95       	ret

00000a12 <scpiLex_DecimalNumericProgramData>:
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	ec 01       	movw	r28, r24
     a20:	8b 01       	movw	r16, r22
     a22:	8a 81       	ldd	r24, Y+2	; 0x02
     a24:	9b 81       	ldd	r25, Y+3	; 0x03
     a26:	fb 01       	movw	r30, r22
     a28:	92 83       	std	Z+2, r25	; 0x02
     a2a:	81 83       	std	Z+1, r24	; 0x01
     a2c:	ce 01       	movw	r24, r28
     a2e:	03 de       	rcall	.-1018   	; 0x636 <skipPlusmn>
     a30:	ce 01       	movw	r24, r28
     a32:	e3 dd       	rcall	.-1082   	; 0x5fa <skipNumbers>
     a34:	7c 01       	movw	r14, r24
     a36:	6e e2       	ldi	r22, 0x2E	; 46
     a38:	ce 01       	movw	r24, r28
     a3a:	1a de       	rcall	.-972    	; 0x670 <skipChr>
     a3c:	89 2b       	or	r24, r25
     a3e:	21 f0       	breq	.+8      	; 0xa48 <scpiLex_DecimalNumericProgramData+0x36>
     a40:	ce 01       	movw	r24, r28
     a42:	db dd       	rcall	.-1098   	; 0x5fa <skipNumbers>
     a44:	e8 0e       	add	r14, r24
     a46:	f9 1e       	adc	r15, r25
     a48:	ef 28       	or	r14, r15
     a4a:	e1 f0       	breq	.+56     	; 0xa84 <scpiLex_DecimalNumericProgramData+0x72>
     a4c:	ea 80       	ldd	r14, Y+2	; 0x02
     a4e:	fb 80       	ldd	r15, Y+3	; 0x03
     a50:	ce 01       	movw	r24, r28
     a52:	97 dd       	rcall	.-1234   	; 0x582 <skipWs>
     a54:	ce 01       	movw	r24, r28
     a56:	84 dd       	rcall	.-1272   	; 0x560 <iseos>
     a58:	89 2b       	or	r24, r25
     a5a:	89 f4       	brne	.+34     	; 0xa7e <scpiLex_DecimalNumericProgramData+0x6c>
     a5c:	ea 81       	ldd	r30, Y+2	; 0x02
     a5e:	fb 81       	ldd	r31, Y+3	; 0x03
     a60:	80 81       	ld	r24, Z
     a62:	8f 7d       	andi	r24, 0xDF	; 223
     a64:	85 34       	cpi	r24, 0x45	; 69
     a66:	59 f4       	brne	.+22     	; 0xa7e <scpiLex_DecimalNumericProgramData+0x6c>
     a68:	31 96       	adiw	r30, 0x01	; 1
     a6a:	fb 83       	std	Y+3, r31	; 0x03
     a6c:	ea 83       	std	Y+2, r30	; 0x02
     a6e:	ce 01       	movw	r24, r28
     a70:	88 dd       	rcall	.-1264   	; 0x582 <skipWs>
     a72:	ce 01       	movw	r24, r28
     a74:	e0 dd       	rcall	.-1088   	; 0x636 <skipPlusmn>
     a76:	ce 01       	movw	r24, r28
     a78:	c0 dd       	rcall	.-1152   	; 0x5fa <skipNumbers>
     a7a:	89 2b       	or	r24, r25
     a7c:	41 f4       	brne	.+16     	; 0xa8e <scpiLex_DecimalNumericProgramData+0x7c>
     a7e:	fb 82       	std	Y+3, r15	; 0x03
     a80:	ea 82       	std	Y+2, r14	; 0x02
     a82:	05 c0       	rjmp	.+10     	; 0xa8e <scpiLex_DecimalNumericProgramData+0x7c>
     a84:	f8 01       	movw	r30, r16
     a86:	81 81       	ldd	r24, Z+1	; 0x01
     a88:	92 81       	ldd	r25, Z+2	; 0x02
     a8a:	9b 83       	std	Y+3, r25	; 0x03
     a8c:	8a 83       	std	Y+2, r24	; 0x02
     a8e:	8a 81       	ldd	r24, Y+2	; 0x02
     a90:	9b 81       	ldd	r25, Y+3	; 0x03
     a92:	f8 01       	movw	r30, r16
     a94:	21 81       	ldd	r18, Z+1	; 0x01
     a96:	32 81       	ldd	r19, Z+2	; 0x02
     a98:	82 1b       	sub	r24, r18
     a9a:	93 0b       	sbc	r25, r19
     a9c:	94 83       	std	Z+4, r25	; 0x04
     a9e:	83 83       	std	Z+3, r24	; 0x03
     aa0:	18 16       	cp	r1, r24
     aa2:	19 06       	cpc	r1, r25
     aa4:	1c f4       	brge	.+6      	; 0xaac <scpiLex_DecimalNumericProgramData+0x9a>
     aa6:	2a e0       	ldi	r18, 0x0A	; 10
     aa8:	20 83       	st	Z, r18
     aaa:	03 c0       	rjmp	.+6      	; 0xab2 <scpiLex_DecimalNumericProgramData+0xa0>
     aac:	2a e1       	ldi	r18, 0x1A	; 26
     aae:	f8 01       	movw	r30, r16
     ab0:	20 83       	st	Z, r18
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	08 95       	ret

00000ac0 <scpiLex_SuffixProgramData>:
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	ec 01       	movw	r28, r24
     aca:	8b 01       	movw	r16, r22
     acc:	8a 81       	ldd	r24, Y+2	; 0x02
     ace:	9b 81       	ldd	r25, Y+3	; 0x03
     ad0:	fb 01       	movw	r30, r22
     ad2:	92 83       	std	Z+2, r25	; 0x02
     ad4:	81 83       	std	Z+1, r24	; 0x01
     ad6:	6f e2       	ldi	r22, 0x2F	; 47
     ad8:	ce 01       	movw	r24, r28
     ada:	ca dd       	rcall	.-1132   	; 0x670 <skipChr>
     adc:	ce 01       	movw	r24, r28
     ade:	e1 dd       	rcall	.-1086   	; 0x6a2 <skipAlpha>
     ae0:	89 2b       	or	r24, r25
     ae2:	d1 f0       	breq	.+52     	; 0xb18 <scpiLex_SuffixProgramData+0x58>
     ae4:	6d e2       	ldi	r22, 0x2D	; 45
     ae6:	ce 01       	movw	r24, r28
     ae8:	c3 dd       	rcall	.-1146   	; 0x670 <skipChr>
     aea:	ce 01       	movw	r24, r28
     aec:	6c dd       	rcall	.-1320   	; 0x5c6 <skipDigit>
     aee:	ce 01       	movw	r24, r28
     af0:	37 dd       	rcall	.-1426   	; 0x560 <iseos>
     af2:	89 2b       	or	r24, r25
     af4:	89 f4       	brne	.+34     	; 0xb18 <scpiLex_SuffixProgramData+0x58>
     af6:	ea 81       	ldd	r30, Y+2	; 0x02
     af8:	fb 81       	ldd	r31, Y+3	; 0x03
     afa:	80 81       	ld	r24, Z
     afc:	8e 52       	subi	r24, 0x2E	; 46
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	58 f4       	brcc	.+22     	; 0xb18 <scpiLex_SuffixProgramData+0x58>
     b02:	31 96       	adiw	r30, 0x01	; 1
     b04:	fb 83       	std	Y+3, r31	; 0x03
     b06:	ea 83       	std	Y+2, r30	; 0x02
     b08:	ce 01       	movw	r24, r28
     b0a:	cb dd       	rcall	.-1130   	; 0x6a2 <skipAlpha>
     b0c:	6d e2       	ldi	r22, 0x2D	; 45
     b0e:	ce 01       	movw	r24, r28
     b10:	af dd       	rcall	.-1186   	; 0x670 <skipChr>
     b12:	ce 01       	movw	r24, r28
     b14:	58 dd       	rcall	.-1360   	; 0x5c6 <skipDigit>
     b16:	eb cf       	rjmp	.-42     	; 0xaee <scpiLex_SuffixProgramData+0x2e>
     b18:	f8 01       	movw	r30, r16
     b1a:	21 81       	ldd	r18, Z+1	; 0x01
     b1c:	32 81       	ldd	r19, Z+2	; 0x02
     b1e:	8a 81       	ldd	r24, Y+2	; 0x02
     b20:	9b 81       	ldd	r25, Y+3	; 0x03
     b22:	82 1b       	sub	r24, r18
     b24:	93 0b       	sbc	r25, r19
     b26:	94 83       	std	Z+4, r25	; 0x04
     b28:	83 83       	std	Z+3, r24	; 0x03
     b2a:	18 16       	cp	r1, r24
     b2c:	19 06       	cpc	r1, r25
     b2e:	1c f4       	brge	.+6      	; 0xb36 <scpiLex_SuffixProgramData+0x76>
     b30:	8c e0       	ldi	r24, 0x0C	; 12
     b32:	80 83       	st	Z, r24
     b34:	07 c0       	rjmp	.+14     	; 0xb44 <scpiLex_SuffixProgramData+0x84>
     b36:	8a e1       	ldi	r24, 0x1A	; 26
     b38:	f8 01       	movw	r30, r16
     b3a:	80 83       	st	Z, r24
     b3c:	3b 83       	std	Y+3, r19	; 0x03
     b3e:	2a 83       	std	Y+2, r18	; 0x02
     b40:	14 82       	std	Z+4, r1	; 0x04
     b42:	13 82       	std	Z+3, r1	; 0x03
     b44:	f8 01       	movw	r30, r16
     b46:	83 81       	ldd	r24, Z+3	; 0x03
     b48:	94 81       	ldd	r25, Z+4	; 0x04
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	08 95       	ret

00000b54 <scpiLex_NondecimalNumericData>:
     b54:	af 92       	push	r10
     b56:	bf 92       	push	r11
     b58:	cf 92       	push	r12
     b5a:	df 92       	push	r13
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	ec 01       	movw	r28, r24
     b6a:	8b 01       	movw	r16, r22
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	9b 81       	ldd	r25, Y+3	; 0x03
     b70:	fb 01       	movw	r30, r22
     b72:	92 83       	std	Z+2, r25	; 0x02
     b74:	81 83       	std	Z+1, r24	; 0x01
     b76:	63 e2       	ldi	r22, 0x23	; 35
     b78:	ce 01       	movw	r24, r28
     b7a:	7a dd       	rcall	.-1292   	; 0x670 <skipChr>
     b7c:	89 2b       	or	r24, r25
     b7e:	09 f4       	brne	.+2      	; 0xb82 <scpiLex_NondecimalNumericData+0x2e>
     b80:	7b c0       	rjmp	.+246    	; 0xc78 <scpiLex_NondecimalNumericData+0x124>
     b82:	ce 01       	movw	r24, r28
     b84:	ed dc       	rcall	.-1574   	; 0x560 <iseos>
     b86:	5c 01       	movw	r10, r24
     b88:	89 2b       	or	r24, r25
     b8a:	09 f0       	breq	.+2      	; 0xb8e <scpiLex_NondecimalNumericData+0x3a>
     b8c:	75 c0       	rjmp	.+234    	; 0xc78 <scpiLex_NondecimalNumericData+0x124>
     b8e:	ea 81       	ldd	r30, Y+2	; 0x02
     b90:	fb 81       	ldd	r31, Y+3	; 0x03
     b92:	80 81       	ld	r24, Z
     b94:	8f 7d       	andi	r24, 0xDF	; 223
     b96:	88 34       	cpi	r24, 0x48	; 72
     b98:	f9 f4       	brne	.+62     	; 0xbd8 <scpiLex_NondecimalNumericData+0x84>
     b9a:	31 96       	adiw	r30, 0x01	; 1
     b9c:	fb 83       	std	Y+3, r31	; 0x03
     b9e:	ea 83       	std	Y+2, r30	; 0x02
     ba0:	c1 2c       	mov	r12, r1
     ba2:	d1 2c       	mov	r13, r1
     ba4:	08 c0       	rjmp	.+16     	; 0xbb6 <scpiLex_NondecimalNumericData+0x62>
     ba6:	ff ef       	ldi	r31, 0xFF	; 255
     ba8:	ef 1a       	sub	r14, r31
     baa:	ff 0a       	sbc	r15, r31
     bac:	fb 82       	std	Y+3, r15	; 0x03
     bae:	ea 82       	std	Y+2, r14	; 0x02
     bb0:	2f ef       	ldi	r18, 0xFF	; 255
     bb2:	c2 1a       	sub	r12, r18
     bb4:	d2 0a       	sbc	r13, r18
     bb6:	ce 01       	movw	r24, r28
     bb8:	d3 dc       	rcall	.-1626   	; 0x560 <iseos>
     bba:	89 2b       	or	r24, r25
     bbc:	49 f4       	brne	.+18     	; 0xbd0 <scpiLex_NondecimalNumericData+0x7c>
     bbe:	ea 80       	ldd	r14, Y+2	; 0x02
     bc0:	fb 80       	ldd	r15, Y+3	; 0x03
     bc2:	f7 01       	movw	r30, r14
     bc4:	80 81       	ld	r24, Z
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 67 21 	call	0x42ce	; 0x42ce <isxdigit>
     bcc:	89 2b       	or	r24, r25
     bce:	59 f7       	brne	.-42     	; 0xba6 <scpiLex_NondecimalNumericData+0x52>
     bd0:	86 e0       	ldi	r24, 0x06	; 6
     bd2:	f8 01       	movw	r30, r16
     bd4:	80 83       	st	Z, r24
     bd6:	3d c0       	rjmp	.+122    	; 0xc52 <scpiLex_NondecimalNumericData+0xfe>
     bd8:	81 35       	cpi	r24, 0x51	; 81
     bda:	e9 f4       	brne	.+58     	; 0xc16 <scpiLex_NondecimalNumericData+0xc2>
     bdc:	31 96       	adiw	r30, 0x01	; 1
     bde:	fb 83       	std	Y+3, r31	; 0x03
     be0:	ea 83       	std	Y+2, r30	; 0x02
     be2:	c1 2c       	mov	r12, r1
     be4:	d1 2c       	mov	r13, r1
     be6:	06 c0       	rjmp	.+12     	; 0xbf4 <scpiLex_NondecimalNumericData+0xa0>
     be8:	31 96       	adiw	r30, 0x01	; 1
     bea:	fb 83       	std	Y+3, r31	; 0x03
     bec:	ea 83       	std	Y+2, r30	; 0x02
     bee:	ff ef       	ldi	r31, 0xFF	; 255
     bf0:	cf 1a       	sub	r12, r31
     bf2:	df 0a       	sbc	r13, r31
     bf4:	ce 01       	movw	r24, r28
     bf6:	b4 dc       	rcall	.-1688   	; 0x560 <iseos>
     bf8:	89 2b       	or	r24, r25
     bfa:	49 f4       	brne	.+18     	; 0xc0e <scpiLex_NondecimalNumericData+0xba>
     bfc:	ea 81       	ldd	r30, Y+2	; 0x02
     bfe:	fb 81       	ldd	r31, Y+3	; 0x03
     c00:	80 81       	ld	r24, Z
     c02:	08 2e       	mov	r0, r24
     c04:	00 0c       	add	r0, r0
     c06:	99 0b       	sbc	r25, r25
     c08:	c0 97       	sbiw	r24, 0x30	; 48
     c0a:	08 97       	sbiw	r24, 0x08	; 8
     c0c:	68 f3       	brcs	.-38     	; 0xbe8 <scpiLex_NondecimalNumericData+0x94>
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	f8 01       	movw	r30, r16
     c12:	80 83       	st	Z, r24
     c14:	1e c0       	rjmp	.+60     	; 0xc52 <scpiLex_NondecimalNumericData+0xfe>
     c16:	82 34       	cpi	r24, 0x42	; 66
     c18:	79 f5       	brne	.+94     	; 0xc78 <scpiLex_NondecimalNumericData+0x124>
     c1a:	31 96       	adiw	r30, 0x01	; 1
     c1c:	fb 83       	std	Y+3, r31	; 0x03
     c1e:	ea 83       	std	Y+2, r30	; 0x02
     c20:	c1 2c       	mov	r12, r1
     c22:	d1 2c       	mov	r13, r1
     c24:	06 c0       	rjmp	.+12     	; 0xc32 <scpiLex_NondecimalNumericData+0xde>
     c26:	31 96       	adiw	r30, 0x01	; 1
     c28:	fb 83       	std	Y+3, r31	; 0x03
     c2a:	ea 83       	std	Y+2, r30	; 0x02
     c2c:	ff ef       	ldi	r31, 0xFF	; 255
     c2e:	cf 1a       	sub	r12, r31
     c30:	df 0a       	sbc	r13, r31
     c32:	ce 01       	movw	r24, r28
     c34:	95 dc       	rcall	.-1750   	; 0x560 <iseos>
     c36:	89 2b       	or	r24, r25
     c38:	49 f4       	brne	.+18     	; 0xc4c <scpiLex_NondecimalNumericData+0xf8>
     c3a:	ea 81       	ldd	r30, Y+2	; 0x02
     c3c:	fb 81       	ldd	r31, Y+3	; 0x03
     c3e:	80 81       	ld	r24, Z
     c40:	08 2e       	mov	r0, r24
     c42:	00 0c       	add	r0, r0
     c44:	99 0b       	sbc	r25, r25
     c46:	c0 97       	sbiw	r24, 0x30	; 48
     c48:	02 97       	sbiw	r24, 0x02	; 2
     c4a:	68 f3       	brcs	.-38     	; 0xc26 <scpiLex_NondecimalNumericData+0xd2>
     c4c:	88 e0       	ldi	r24, 0x08	; 8
     c4e:	f8 01       	movw	r30, r16
     c50:	80 83       	st	Z, r24
     c52:	cd 28       	or	r12, r13
     c54:	89 f0       	breq	.+34     	; 0xc78 <scpiLex_NondecimalNumericData+0x124>
     c56:	f8 01       	movw	r30, r16
     c58:	21 81       	ldd	r18, Z+1	; 0x01
     c5a:	32 81       	ldd	r19, Z+2	; 0x02
     c5c:	2e 5f       	subi	r18, 0xFE	; 254
     c5e:	3f 4f       	sbci	r19, 0xFF	; 255
     c60:	32 83       	std	Z+2, r19	; 0x02
     c62:	21 83       	std	Z+1, r18	; 0x01
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	9b 81       	ldd	r25, Y+3	; 0x03
     c68:	82 1b       	sub	r24, r18
     c6a:	93 0b       	sbc	r25, r19
     c6c:	94 83       	std	Z+4, r25	; 0x04
     c6e:	83 83       	std	Z+3, r24	; 0x03
     c70:	18 16       	cp	r1, r24
     c72:	19 06       	cpc	r1, r25
     c74:	6c f0       	brlt	.+26     	; 0xc90 <scpiLex_NondecimalNumericData+0x13c>
     c76:	10 c0       	rjmp	.+32     	; 0xc98 <scpiLex_NondecimalNumericData+0x144>
     c78:	8a e1       	ldi	r24, 0x1A	; 26
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 83       	st	Z, r24
     c7e:	81 81       	ldd	r24, Z+1	; 0x01
     c80:	92 81       	ldd	r25, Z+2	; 0x02
     c82:	9b 83       	std	Y+3, r25	; 0x03
     c84:	8a 83       	std	Y+2, r24	; 0x02
     c86:	14 82       	std	Z+4, r1	; 0x04
     c88:	13 82       	std	Z+3, r1	; 0x03
     c8a:	a1 2c       	mov	r10, r1
     c8c:	b1 2c       	mov	r11, r1
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <scpiLex_NondecimalNumericData+0x144>
     c90:	5c 01       	movw	r10, r24
     c92:	f2 e0       	ldi	r31, 0x02	; 2
     c94:	af 0e       	add	r10, r31
     c96:	b1 1c       	adc	r11, r1
     c98:	c5 01       	movw	r24, r10
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	df 90       	pop	r13
     ca8:	cf 90       	pop	r12
     caa:	bf 90       	pop	r11
     cac:	af 90       	pop	r10
     cae:	08 95       	ret

00000cb0 <scpiLex_StringProgramData>:
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	8c 01       	movw	r16, r24
     cba:	eb 01       	movw	r28, r22
     cbc:	dc 01       	movw	r26, r24
     cbe:	12 96       	adiw	r26, 0x02	; 2
     cc0:	8d 91       	ld	r24, X+
     cc2:	9c 91       	ld	r25, X
     cc4:	13 97       	sbiw	r26, 0x03	; 3
     cc6:	9a 83       	std	Y+2, r25	; 0x02
     cc8:	89 83       	std	Y+1, r24	; 0x01
     cca:	c8 01       	movw	r24, r16
     ccc:	49 dc       	rcall	.-1902   	; 0x560 <iseos>
     cce:	89 2b       	or	r24, r25
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <scpiLex_StringProgramData+0x24>
     cd2:	5a c0       	rjmp	.+180    	; 0xd88 <scpiLex_StringProgramData+0xd8>
     cd4:	d8 01       	movw	r26, r16
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	ed 91       	ld	r30, X+
     cda:	fc 91       	ld	r31, X
     cdc:	13 97       	sbiw	r26, 0x03	; 3
     cde:	80 81       	ld	r24, Z
     ce0:	82 32       	cpi	r24, 0x22	; 34
     ce2:	41 f5       	brne	.+80     	; 0xd34 <scpiLex_StringProgramData+0x84>
     ce4:	31 96       	adiw	r30, 0x01	; 1
     ce6:	13 96       	adiw	r26, 0x03	; 3
     ce8:	fc 93       	st	X, r31
     cea:	ee 93       	st	-X, r30
     cec:	12 97       	sbiw	r26, 0x02	; 2
     cee:	8f e0       	ldi	r24, 0x0F	; 15
     cf0:	88 83       	st	Y, r24
     cf2:	62 e2       	ldi	r22, 0x22	; 34
     cf4:	c8 01       	movw	r24, r16
     cf6:	41 dd       	rcall	.-1406   	; 0x77a <skipQuoteProgramData>
     cf8:	c8 01       	movw	r24, r16
     cfa:	32 dc       	rcall	.-1948   	; 0x560 <iseos>
     cfc:	89 2b       	or	r24, r25
     cfe:	a1 f4       	brne	.+40     	; 0xd28 <scpiLex_StringProgramData+0x78>
     d00:	d8 01       	movw	r26, r16
     d02:	12 96       	adiw	r26, 0x02	; 2
     d04:	ed 91       	ld	r30, X+
     d06:	fc 91       	ld	r31, X
     d08:	13 97       	sbiw	r26, 0x03	; 3
     d0a:	80 81       	ld	r24, Z
     d0c:	82 32       	cpi	r24, 0x22	; 34
     d0e:	61 f4       	brne	.+24     	; 0xd28 <scpiLex_StringProgramData+0x78>
     d10:	31 96       	adiw	r30, 0x01	; 1
     d12:	13 96       	adiw	r26, 0x03	; 3
     d14:	fc 93       	st	X, r31
     d16:	ee 93       	st	-X, r30
     d18:	12 97       	sbiw	r26, 0x02	; 2
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	9a 81       	ldd	r25, Y+2	; 0x02
     d1e:	e8 1b       	sub	r30, r24
     d20:	f9 0b       	sbc	r31, r25
     d22:	fc 83       	std	Y+4, r31	; 0x04
     d24:	eb 83       	std	Y+3, r30	; 0x03
     d26:	30 c0       	rjmp	.+96     	; 0xd88 <scpiLex_StringProgramData+0xd8>
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	f8 01       	movw	r30, r16
     d2e:	93 83       	std	Z+3, r25	; 0x03
     d30:	82 83       	std	Z+2, r24	; 0x02
     d32:	2a c0       	rjmp	.+84     	; 0xd88 <scpiLex_StringProgramData+0xd8>
     d34:	87 32       	cpi	r24, 0x27	; 39
     d36:	41 f5       	brne	.+80     	; 0xd88 <scpiLex_StringProgramData+0xd8>
     d38:	31 96       	adiw	r30, 0x01	; 1
     d3a:	d8 01       	movw	r26, r16
     d3c:	13 96       	adiw	r26, 0x03	; 3
     d3e:	fc 93       	st	X, r31
     d40:	ee 93       	st	-X, r30
     d42:	12 97       	sbiw	r26, 0x02	; 2
     d44:	8e e0       	ldi	r24, 0x0E	; 14
     d46:	88 83       	st	Y, r24
     d48:	67 e2       	ldi	r22, 0x27	; 39
     d4a:	c8 01       	movw	r24, r16
     d4c:	16 dd       	rcall	.-1492   	; 0x77a <skipQuoteProgramData>
     d4e:	c8 01       	movw	r24, r16
     d50:	07 dc       	rcall	.-2034   	; 0x560 <iseos>
     d52:	89 2b       	or	r24, r25
     d54:	a1 f4       	brne	.+40     	; 0xd7e <scpiLex_StringProgramData+0xce>
     d56:	d8 01       	movw	r26, r16
     d58:	12 96       	adiw	r26, 0x02	; 2
     d5a:	ed 91       	ld	r30, X+
     d5c:	fc 91       	ld	r31, X
     d5e:	13 97       	sbiw	r26, 0x03	; 3
     d60:	80 81       	ld	r24, Z
     d62:	87 32       	cpi	r24, 0x27	; 39
     d64:	61 f4       	brne	.+24     	; 0xd7e <scpiLex_StringProgramData+0xce>
     d66:	31 96       	adiw	r30, 0x01	; 1
     d68:	13 96       	adiw	r26, 0x03	; 3
     d6a:	fc 93       	st	X, r31
     d6c:	ee 93       	st	-X, r30
     d6e:	12 97       	sbiw	r26, 0x02	; 2
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	e8 1b       	sub	r30, r24
     d76:	f9 0b       	sbc	r31, r25
     d78:	fc 83       	std	Y+4, r31	; 0x04
     d7a:	eb 83       	std	Y+3, r30	; 0x03
     d7c:	05 c0       	rjmp	.+10     	; 0xd88 <scpiLex_StringProgramData+0xd8>
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	9a 81       	ldd	r25, Y+2	; 0x02
     d82:	f8 01       	movw	r30, r16
     d84:	93 83       	std	Z+3, r25	; 0x03
     d86:	82 83       	std	Z+2, r24	; 0x02
     d88:	29 81       	ldd	r18, Y+1	; 0x01
     d8a:	3a 81       	ldd	r19, Y+2	; 0x02
     d8c:	d8 01       	movw	r26, r16
     d8e:	12 96       	adiw	r26, 0x02	; 2
     d90:	8d 91       	ld	r24, X+
     d92:	9c 91       	ld	r25, X
     d94:	13 97       	sbiw	r26, 0x03	; 3
     d96:	82 1b       	sub	r24, r18
     d98:	93 0b       	sbc	r25, r19
     d9a:	9c 83       	std	Y+4, r25	; 0x04
     d9c:	8b 83       	std	Y+3, r24	; 0x03
     d9e:	18 16       	cp	r1, r24
     da0:	19 06       	cpc	r1, r25
     da2:	44 f0       	brlt	.+16     	; 0xdb4 <scpiLex_StringProgramData+0x104>
     da4:	8a e1       	ldi	r24, 0x1A	; 26
     da6:	88 83       	st	Y, r24
     da8:	13 96       	adiw	r26, 0x03	; 3
     daa:	3c 93       	st	X, r19
     dac:	2e 93       	st	-X, r18
     dae:	12 97       	sbiw	r26, 0x02	; 2
     db0:	1c 82       	std	Y+4, r1	; 0x04
     db2:	1b 82       	std	Y+3, r1	; 0x03
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	9c 81       	ldd	r25, Y+4	; 0x04
     db8:	99 23       	and	r25, r25
     dba:	14 f4       	brge	.+4      	; 0xdc0 <scpiLex_StringProgramData+0x110>
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	08 95       	ret

00000dca <scpiLex_ArbitraryBlockProgramData>:
     dca:	af 92       	push	r10
     dcc:	bf 92       	push	r11
     dce:	cf 92       	push	r12
     dd0:	df 92       	push	r13
     dd2:	ef 92       	push	r14
     dd4:	ff 92       	push	r15
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	ec 01       	movw	r28, r24
     de0:	7b 01       	movw	r14, r22
     de2:	ca 80       	ldd	r12, Y+2	; 0x02
     de4:	db 80       	ldd	r13, Y+3	; 0x03
     de6:	fb 01       	movw	r30, r22
     de8:	d2 82       	std	Z+2, r13	; 0x02
     dea:	c1 82       	std	Z+1, r12	; 0x01
     dec:	63 e2       	ldi	r22, 0x23	; 35
     dee:	40 dc       	rcall	.-1920   	; 0x670 <skipChr>
     df0:	89 2b       	or	r24, r25
     df2:	09 f4       	brne	.+2      	; 0xdf6 <scpiLex_ArbitraryBlockProgramData+0x2c>
     df4:	90 c0       	rjmp	.+288    	; 0xf16 <scpiLex_ArbitraryBlockProgramData+0x14c>
     df6:	ce 01       	movw	r24, r28
     df8:	b3 db       	rcall	.-2202   	; 0x560 <iseos>
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	09 f0       	breq	.+2      	; 0xe00 <scpiLex_ArbitraryBlockProgramData+0x36>
     dfe:	6a c0       	rjmp	.+212    	; 0xed4 <scpiLex_ArbitraryBlockProgramData+0x10a>
     e00:	ea 81       	ldd	r30, Y+2	; 0x02
     e02:	fb 81       	ldd	r31, Y+3	; 0x03
     e04:	a0 80       	ld	r10, Z
     e06:	2a 2d       	mov	r18, r10
     e08:	0a 2c       	mov	r0, r10
     e0a:	00 0c       	add	r0, r0
     e0c:	33 0b       	sbc	r19, r19
     e0e:	21 53       	subi	r18, 0x31	; 49
     e10:	31 09       	sbc	r19, r1
     e12:	29 30       	cpi	r18, 0x09	; 9
     e14:	31 05       	cpc	r19, r1
     e16:	08 f0       	brcs	.+2      	; 0xe1a <scpiLex_ArbitraryBlockProgramData+0x50>
     e18:	5d c0       	rjmp	.+186    	; 0xed4 <scpiLex_ArbitraryBlockProgramData+0x10a>
     e1a:	0a 2c       	mov	r0, r10
     e1c:	00 0c       	add	r0, r0
     e1e:	bb 08       	sbc	r11, r11
     e20:	80 e3       	ldi	r24, 0x30	; 48
     e22:	a8 1a       	sub	r10, r24
     e24:	b1 08       	sbc	r11, r1
     e26:	31 96       	adiw	r30, 0x01	; 1
     e28:	fb 83       	std	Y+3, r31	; 0x03
     e2a:	ea 83       	std	Y+2, r30	; 0x02
     e2c:	1a 14       	cp	r1, r10
     e2e:	1b 04       	cpc	r1, r11
     e30:	4c f5       	brge	.+82     	; 0xe84 <scpiLex_ArbitraryBlockProgramData+0xba>
     e32:	00 e0       	ldi	r16, 0x00	; 0
     e34:	10 e0       	ldi	r17, 0x00	; 0
     e36:	ce 01       	movw	r24, r28
     e38:	93 db       	rcall	.-2266   	; 0x560 <iseos>
     e3a:	89 2b       	or	r24, r25
     e3c:	29 f5       	brne	.+74     	; 0xe88 <scpiLex_ArbitraryBlockProgramData+0xbe>
     e3e:	ea 81       	ldd	r30, Y+2	; 0x02
     e40:	fb 81       	ldd	r31, Y+3	; 0x03
     e42:	80 81       	ld	r24, Z
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	20 53       	subi	r18, 0x30	; 48
     e4a:	31 09       	sbc	r19, r1
     e4c:	2a 30       	cpi	r18, 0x0A	; 10
     e4e:	31 05       	cpc	r19, r1
     e50:	d8 f4       	brcc	.+54     	; 0xe88 <scpiLex_ArbitraryBlockProgramData+0xbe>
     e52:	98 01       	movw	r18, r16
     e54:	22 0f       	add	r18, r18
     e56:	33 1f       	adc	r19, r19
     e58:	00 0f       	add	r16, r16
     e5a:	11 1f       	adc	r17, r17
     e5c:	00 0f       	add	r16, r16
     e5e:	11 1f       	adc	r17, r17
     e60:	00 0f       	add	r16, r16
     e62:	11 1f       	adc	r17, r17
     e64:	02 0f       	add	r16, r18
     e66:	13 1f       	adc	r17, r19
     e68:	08 2e       	mov	r0, r24
     e6a:	00 0c       	add	r0, r0
     e6c:	99 0b       	sbc	r25, r25
     e6e:	c0 97       	sbiw	r24, 0x30	; 48
     e70:	08 0f       	add	r16, r24
     e72:	19 1f       	adc	r17, r25
     e74:	31 96       	adiw	r30, 0x01	; 1
     e76:	fb 83       	std	Y+3, r31	; 0x03
     e78:	ea 83       	std	Y+2, r30	; 0x02
     e7a:	e1 e0       	ldi	r30, 0x01	; 1
     e7c:	ae 1a       	sub	r10, r30
     e7e:	b1 08       	sbc	r11, r1
     e80:	d1 f6       	brne	.-76     	; 0xe36 <scpiLex_ArbitraryBlockProgramData+0x6c>
     e82:	04 c0       	rjmp	.+8      	; 0xe8c <scpiLex_ArbitraryBlockProgramData+0xc2>
     e84:	00 e0       	ldi	r16, 0x00	; 0
     e86:	10 e0       	ldi	r17, 0x00	; 0
     e88:	ab 28       	or	r10, r11
     e8a:	b9 f4       	brne	.+46     	; 0xeba <scpiLex_ArbitraryBlockProgramData+0xf0>
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	9b 81       	ldd	r25, Y+3	; 0x03
     e90:	80 0f       	add	r24, r16
     e92:	91 1f       	adc	r25, r17
     e94:	9b 83       	std	Y+3, r25	; 0x03
     e96:	8a 83       	std	Y+2, r24	; 0x02
     e98:	48 81       	ld	r20, Y
     e9a:	59 81       	ldd	r21, Y+1	; 0x01
     e9c:	2c 81       	ldd	r18, Y+4	; 0x04
     e9e:	3d 81       	ldd	r19, Y+5	; 0x05
     ea0:	24 0f       	add	r18, r20
     ea2:	35 1f       	adc	r19, r21
     ea4:	28 17       	cp	r18, r24
     ea6:	39 07       	cpc	r19, r25
     ea8:	40 f1       	brcs	.+80     	; 0xefa <scpiLex_ArbitraryBlockProgramData+0x130>
     eaa:	80 1b       	sub	r24, r16
     eac:	91 0b       	sbc	r25, r17
     eae:	f7 01       	movw	r30, r14
     eb0:	92 83       	std	Z+2, r25	; 0x02
     eb2:	81 83       	std	Z+1, r24	; 0x01
     eb4:	14 83       	std	Z+4, r17	; 0x04
     eb6:	03 83       	std	Z+3, r16	; 0x03
     eb8:	1a c0       	rjmp	.+52     	; 0xeee <scpiLex_ArbitraryBlockProgramData+0x124>
     eba:	ce 01       	movw	r24, r28
     ebc:	51 db       	rcall	.-2398   	; 0x560 <iseos>
     ebe:	21 e0       	ldi	r18, 0x01	; 1
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	89 2b       	or	r24, r25
     ec4:	11 f0       	breq	.+4      	; 0xeca <scpiLex_ArbitraryBlockProgramData+0x100>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	88 27       	eor	r24, r24
     ecc:	99 27       	eor	r25, r25
     ece:	82 1b       	sub	r24, r18
     ed0:	93 0b       	sbc	r25, r19
     ed2:	0a c0       	rjmp	.+20     	; 0xee8 <scpiLex_ArbitraryBlockProgramData+0x11e>
     ed4:	21 e0       	ldi	r18, 0x01	; 1
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	89 2b       	or	r24, r25
     eda:	11 f0       	breq	.+4      	; 0xee0 <scpiLex_ArbitraryBlockProgramData+0x116>
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	88 27       	eor	r24, r24
     ee2:	99 27       	eor	r25, r25
     ee4:	82 1b       	sub	r24, r18
     ee6:	93 0b       	sbc	r25, r19
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	91 05       	cpc	r25, r1
     eec:	21 f4       	brne	.+8      	; 0xef6 <scpiLex_ArbitraryBlockProgramData+0x12c>
     eee:	8d e0       	ldi	r24, 0x0D	; 13
     ef0:	f7 01       	movw	r30, r14
     ef2:	80 83       	st	Z, r24
     ef4:	19 c0       	rjmp	.+50     	; 0xf28 <scpiLex_ArbitraryBlockProgramData+0x15e>
     ef6:	89 2b       	or	r24, r25
     ef8:	71 f4       	brne	.+28     	; 0xf16 <scpiLex_ArbitraryBlockProgramData+0x14c>
     efa:	8a e1       	ldi	r24, 0x1A	; 26
     efc:	f7 01       	movw	r30, r14
     efe:	80 83       	st	Z, r24
     f00:	14 82       	std	Z+4, r1	; 0x04
     f02:	13 82       	std	Z+3, r1	; 0x03
     f04:	28 81       	ld	r18, Y
     f06:	39 81       	ldd	r19, Y+1	; 0x01
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	9d 81       	ldd	r25, Y+5	; 0x05
     f0c:	82 0f       	add	r24, r18
     f0e:	93 1f       	adc	r25, r19
     f10:	9b 83       	std	Y+3, r25	; 0x03
     f12:	8a 83       	std	Y+2, r24	; 0x02
     f14:	09 c0       	rjmp	.+18     	; 0xf28 <scpiLex_ArbitraryBlockProgramData+0x15e>
     f16:	8a e1       	ldi	r24, 0x1A	; 26
     f18:	f7 01       	movw	r30, r14
     f1a:	80 83       	st	Z, r24
     f1c:	81 81       	ldd	r24, Z+1	; 0x01
     f1e:	92 81       	ldd	r25, Z+2	; 0x02
     f20:	9b 83       	std	Y+3, r25	; 0x03
     f22:	8a 83       	std	Y+2, r24	; 0x02
     f24:	14 82       	std	Z+4, r1	; 0x04
     f26:	13 82       	std	Z+3, r1	; 0x03
     f28:	f7 01       	movw	r30, r14
     f2a:	81 81       	ldd	r24, Z+1	; 0x01
     f2c:	92 81       	ldd	r25, Z+2	; 0x02
     f2e:	8c 19       	sub	r24, r12
     f30:	9d 09       	sbc	r25, r13
     f32:	23 81       	ldd	r18, Z+3	; 0x03
     f34:	34 81       	ldd	r19, Z+4	; 0x04
     f36:	82 0f       	add	r24, r18
     f38:	93 1f       	adc	r25, r19
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	08 95       	ret

00000f50 <scpiLex_ProgramExpression>:
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	ec 01       	movw	r28, r24
     f5a:	8b 01       	movw	r16, r22
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	9b 81       	ldd	r25, Y+3	; 0x03
     f60:	db 01       	movw	r26, r22
     f62:	12 96       	adiw	r26, 0x02	; 2
     f64:	9c 93       	st	X, r25
     f66:	8e 93       	st	-X, r24
     f68:	11 97       	sbiw	r26, 0x01	; 1
     f6a:	ce 01       	movw	r24, r28
     f6c:	f9 da       	rcall	.-2574   	; 0x560 <iseos>
     f6e:	89 2b       	or	r24, r25
     f70:	b9 f5       	brne	.+110    	; 0xfe0 <scpiLex_ProgramExpression+0x90>
     f72:	ea 81       	ldd	r30, Y+2	; 0x02
     f74:	fb 81       	ldd	r31, Y+3	; 0x03
     f76:	80 81       	ld	r24, Z
     f78:	88 32       	cpi	r24, 0x28	; 40
     f7a:	91 f5       	brne	.+100    	; 0xfe0 <scpiLex_ProgramExpression+0x90>
     f7c:	31 96       	adiw	r30, 0x01	; 1
     f7e:	fb 83       	std	Y+3, r31	; 0x03
     f80:	ea 83       	std	Y+2, r30	; 0x02
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <scpiLex_ProgramExpression+0x3a>
     f84:	31 96       	adiw	r30, 0x01	; 1
     f86:	fb 83       	std	Y+3, r31	; 0x03
     f88:	ea 83       	std	Y+2, r30	; 0x02
     f8a:	ce 01       	movw	r24, r28
     f8c:	e9 da       	rcall	.-2606   	; 0x560 <iseos>
     f8e:	89 2b       	or	r24, r25
     f90:	81 f5       	brne	.+96     	; 0xff2 <scpiLex_ProgramExpression+0xa2>
     f92:	ea 81       	ldd	r30, Y+2	; 0x02
     f94:	fb 81       	ldd	r31, Y+3	; 0x03
     f96:	20 81       	ld	r18, Z
     f98:	82 2f       	mov	r24, r18
     f9a:	02 2e       	mov	r0, r18
     f9c:	00 0c       	add	r0, r0
     f9e:	99 0b       	sbc	r25, r25
     fa0:	ac 01       	movw	r20, r24
     fa2:	40 52       	subi	r20, 0x20	; 32
     fa4:	51 09       	sbc	r21, r1
     fa6:	4f 35       	cpi	r20, 0x5F	; 95
     fa8:	51 05       	cpc	r21, r1
     faa:	50 f4       	brcc	.+20     	; 0xfc0 <scpiLex_ProgramExpression+0x70>
     fac:	82 97       	sbiw	r24, 0x22	; 34
     fae:	02 97       	sbiw	r24, 0x02	; 2
     fb0:	38 f0       	brcs	.+14     	; 0xfc0 <scpiLex_ProgramExpression+0x70>
     fb2:	89 ed       	ldi	r24, 0xD9	; 217
     fb4:	82 0f       	add	r24, r18
     fb6:	83 30       	cpi	r24, 0x03	; 3
     fb8:	18 f0       	brcs	.+6      	; 0xfc0 <scpiLex_ProgramExpression+0x70>
     fba:	2b 33       	cpi	r18, 0x3B	; 59
     fbc:	19 f7       	brne	.-58     	; 0xf84 <scpiLex_ProgramExpression+0x34>
     fbe:	19 c0       	rjmp	.+50     	; 0xff2 <scpiLex_ProgramExpression+0xa2>
     fc0:	29 32       	cpi	r18, 0x29	; 41
     fc2:	b9 f4       	brne	.+46     	; 0xff2 <scpiLex_ProgramExpression+0xa2>
     fc4:	31 96       	adiw	r30, 0x01	; 1
     fc6:	fb 83       	std	Y+3, r31	; 0x03
     fc8:	ea 83       	std	Y+2, r30	; 0x02
     fca:	d8 01       	movw	r26, r16
     fcc:	11 96       	adiw	r26, 0x01	; 1
     fce:	8d 91       	ld	r24, X+
     fd0:	9c 91       	ld	r25, X
     fd2:	12 97       	sbiw	r26, 0x02	; 2
     fd4:	e8 1b       	sub	r30, r24
     fd6:	f9 0b       	sbc	r31, r25
     fd8:	14 96       	adiw	r26, 0x04	; 4
     fda:	fc 93       	st	X, r31
     fdc:	ee 93       	st	-X, r30
     fde:	13 97       	sbiw	r26, 0x03	; 3
     fe0:	f8 01       	movw	r30, r16
     fe2:	83 81       	ldd	r24, Z+3	; 0x03
     fe4:	94 81       	ldd	r25, Z+4	; 0x04
     fe6:	18 16       	cp	r1, r24
     fe8:	19 06       	cpc	r1, r25
     fea:	1c f4       	brge	.+6      	; 0xff2 <scpiLex_ProgramExpression+0xa2>
     fec:	80 e1       	ldi	r24, 0x10	; 16
     fee:	80 83       	st	Z, r24
     ff0:	0d c0       	rjmp	.+26     	; 0x100c <scpiLex_ProgramExpression+0xbc>
     ff2:	8a e1       	ldi	r24, 0x1A	; 26
     ff4:	d8 01       	movw	r26, r16
     ff6:	8c 93       	st	X, r24
     ff8:	11 96       	adiw	r26, 0x01	; 1
     ffa:	8d 91       	ld	r24, X+
     ffc:	9c 91       	ld	r25, X
     ffe:	12 97       	sbiw	r26, 0x02	; 2
    1000:	9b 83       	std	Y+3, r25	; 0x03
    1002:	8a 83       	std	Y+2, r24	; 0x02
    1004:	14 96       	adiw	r26, 0x04	; 4
    1006:	1c 92       	st	X, r1
    1008:	1e 92       	st	-X, r1
    100a:	13 97       	sbiw	r26, 0x03	; 3
    100c:	f8 01       	movw	r30, r16
    100e:	83 81       	ldd	r24, Z+3	; 0x03
    1010:	94 81       	ldd	r25, Z+4	; 0x04
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	08 95       	ret

0000101c <scpiLex_Comma>:
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	eb 01       	movw	r28, r22
    1022:	fc 01       	movw	r30, r24
    1024:	22 81       	ldd	r18, Z+2	; 0x02
    1026:	33 81       	ldd	r19, Z+3	; 0x03
    1028:	3a 83       	std	Y+2, r19	; 0x02
    102a:	29 83       	std	Y+1, r18	; 0x01
    102c:	6c e2       	ldi	r22, 0x2C	; 44
    102e:	20 db       	rcall	.-2496   	; 0x670 <skipChr>
    1030:	89 2b       	or	r24, r25
    1032:	31 f0       	breq	.+12     	; 0x1040 <scpiLex_Comma+0x24>
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	9c 83       	std	Y+4, r25	; 0x04
    103a:	8b 83       	std	Y+3, r24	; 0x03
    103c:	18 82       	st	Y, r1
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <scpiLex_Comma+0x2c>
    1040:	1c 82       	std	Y+4, r1	; 0x04
    1042:	1b 82       	std	Y+3, r1	; 0x03
    1044:	8a e1       	ldi	r24, 0x1A	; 26
    1046:	88 83       	st	Y, r24
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <scpiLex_Semicolon>:
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	eb 01       	movw	r28, r22
    1058:	fc 01       	movw	r30, r24
    105a:	22 81       	ldd	r18, Z+2	; 0x02
    105c:	33 81       	ldd	r19, Z+3	; 0x03
    105e:	3a 83       	std	Y+2, r19	; 0x02
    1060:	29 83       	std	Y+1, r18	; 0x01
    1062:	6b e3       	ldi	r22, 0x3B	; 59
    1064:	05 db       	rcall	.-2550   	; 0x670 <skipChr>
    1066:	89 2b       	or	r24, r25
    1068:	31 f0       	breq	.+12     	; 0x1076 <scpiLex_Semicolon+0x24>
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9c 83       	std	Y+4, r25	; 0x04
    1070:	8b 83       	std	Y+3, r24	; 0x03
    1072:	88 83       	st	Y, r24
    1074:	04 c0       	rjmp	.+8      	; 0x107e <scpiLex_Semicolon+0x2c>
    1076:	1c 82       	std	Y+4, r1	; 0x04
    1078:	1b 82       	std	Y+3, r1	; 0x03
    107a:	8a e1       	ldi	r24, 0x1A	; 26
    107c:	88 83       	st	Y, r24
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <scpiLex_NewLine>:
 * Detect token New line
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NewLine(lex_state_t * state, scpi_token_t * token) {
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	8c 01       	movw	r16, r24
    1092:	eb 01       	movw	r28, r22
    token->ptr = state->pos;
    1094:	fc 01       	movw	r30, r24
    1096:	82 81       	ldd	r24, Z+2	; 0x02
    1098:	93 81       	ldd	r25, Z+3	; 0x03
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01

    skipChr(state, '\r');
    109e:	6d e0       	ldi	r22, 0x0D	; 13
    10a0:	c8 01       	movw	r24, r16
    10a2:	e6 da       	rcall	.-2612   	; 0x670 <skipChr>
    skipChr(state, '\n');
    10a4:	6a e0       	ldi	r22, 0x0A	; 10
    10a6:	c8 01       	movw	r24, r16
    10a8:	e3 da       	rcall	.-2618   	; 0x670 <skipChr>

    token->len = state->pos - token->ptr;
    10aa:	29 81       	ldd	r18, Y+1	; 0x01
    10ac:	3a 81       	ldd	r19, Y+2	; 0x02
    10ae:	f8 01       	movw	r30, r16
    10b0:	82 81       	ldd	r24, Z+2	; 0x02
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	82 1b       	sub	r24, r18
    10b6:	93 0b       	sbc	r25, r19
    10b8:	9c 83       	std	Y+4, r25	; 0x04
    10ba:	8b 83       	std	Y+3, r24	; 0x03

    if ((token->len > 0)) {
    10bc:	18 16       	cp	r1, r24
    10be:	19 06       	cpc	r1, r25
    10c0:	1c f4       	brge	.+6      	; 0x10c8 <scpiLex_NewLine+0x40>
        token->type = SCPI_TOKEN_NL;
    10c2:	85 e0       	ldi	r24, 0x05	; 5
    10c4:	88 83       	st	Y, r24
    10c6:	07 c0       	rjmp	.+14     	; 0x10d6 <scpiLex_NewLine+0x4e>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
    10c8:	8a e1       	ldi	r24, 0x1A	; 26
    10ca:	88 83       	st	Y, r24
        state->pos = token->ptr;
    10cc:	f8 01       	movw	r30, r16
    10ce:	33 83       	std	Z+3, r19	; 0x03
    10d0:	22 83       	std	Z+2, r18	; 0x02
        token->len = 0;
    10d2:	1c 82       	std	Y+4, r1	; 0x04
    10d4:	1b 82       	std	Y+3, r1	; 0x03
    }

    return token->len;
}
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	08 95       	ret

000010e4 <writeData>:
    if (result) {
        result = SCPI_ParamToChoice(context, &param, options, value);
    }

    return result;
}
    10e4:	41 15       	cp	r20, r1
    10e6:	51 05       	cpc	r21, r1
    10e8:	51 f0       	breq	.+20     	; 0x10fe <writeData+0x1a>
    10ea:	dc 01       	movw	r26, r24
    10ec:	56 96       	adiw	r26, 0x16	; 22
    10ee:	ed 91       	ld	r30, X+
    10f0:	fc 91       	ld	r31, X
    10f2:	57 97       	sbiw	r26, 0x17	; 23
    10f4:	02 80       	ldd	r0, Z+2	; 0x02
    10f6:	f3 81       	ldd	r31, Z+3	; 0x03
    10f8:	e0 2d       	mov	r30, r0
    10fa:	09 95       	icall
    10fc:	08 95       	ret
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	08 95       	ret

00001104 <ParamSignToUInt32>:
    1104:	fb 01       	movw	r30, r22
    1106:	ba 01       	movw	r22, r20
    1108:	45 2b       	or	r20, r21
    110a:	29 f4       	brne	.+10     	; 0x1116 <ParamSignToUInt32+0x12>
    110c:	6a ec       	ldi	r22, 0xCA	; 202
    110e:	7e ef       	ldi	r23, 0xFE	; 254
    1110:	c7 d8       	rcall	.-3698   	; 0x2a0 <SCPI_ErrorPush>
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	3d c0       	rjmp	.+122    	; 0x1190 <ParamSignToUInt32+0x8c>
    1116:	80 81       	ld	r24, Z
    1118:	88 30       	cpi	r24, 0x08	; 8
    111a:	e1 f0       	breq	.+56     	; 0x1154 <ParamSignToUInt32+0x50>
    111c:	28 f4       	brcc	.+10     	; 0x1128 <ParamSignToUInt32+0x24>
    111e:	86 30       	cpi	r24, 0x06	; 6
    1120:	39 f0       	breq	.+14     	; 0x1130 <ParamSignToUInt32+0x2c>
    1122:	87 30       	cpi	r24, 0x07	; 7
    1124:	71 f0       	breq	.+28     	; 0x1142 <ParamSignToUInt32+0x3e>
    1126:	33 c0       	rjmp	.+102    	; 0x118e <ParamSignToUInt32+0x8a>
    1128:	8a 50       	subi	r24, 0x0A	; 10
    112a:	82 30       	cpi	r24, 0x02	; 2
    112c:	e0 f0       	brcs	.+56     	; 0x1166 <ParamSignToUInt32+0x62>
    112e:	2f c0       	rjmp	.+94     	; 0x118e <ParamSignToUInt32+0x8a>
    1130:	40 e1       	ldi	r20, 0x10	; 16
    1132:	81 81       	ldd	r24, Z+1	; 0x01
    1134:	92 81       	ldd	r25, Z+2	; 0x02
    1136:	83 d6       	rcall	.+3334   	; 0x1e3e <strBaseToUInt32>
    1138:	21 e0       	ldi	r18, 0x01	; 1
    113a:	89 2b       	or	r24, r25
    113c:	49 f5       	brne	.+82     	; 0x1190 <ParamSignToUInt32+0x8c>
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	27 c0       	rjmp	.+78     	; 0x1190 <ParamSignToUInt32+0x8c>
    1142:	48 e0       	ldi	r20, 0x08	; 8
    1144:	81 81       	ldd	r24, Z+1	; 0x01
    1146:	92 81       	ldd	r25, Z+2	; 0x02
    1148:	7a d6       	rcall	.+3316   	; 0x1e3e <strBaseToUInt32>
    114a:	21 e0       	ldi	r18, 0x01	; 1
    114c:	89 2b       	or	r24, r25
    114e:	01 f5       	brne	.+64     	; 0x1190 <ParamSignToUInt32+0x8c>
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	1e c0       	rjmp	.+60     	; 0x1190 <ParamSignToUInt32+0x8c>
    1154:	42 e0       	ldi	r20, 0x02	; 2
    1156:	81 81       	ldd	r24, Z+1	; 0x01
    1158:	92 81       	ldd	r25, Z+2	; 0x02
    115a:	71 d6       	rcall	.+3298   	; 0x1e3e <strBaseToUInt32>
    115c:	21 e0       	ldi	r18, 0x01	; 1
    115e:	89 2b       	or	r24, r25
    1160:	b9 f4       	brne	.+46     	; 0x1190 <ParamSignToUInt32+0x8c>
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	15 c0       	rjmp	.+42     	; 0x1190 <ParamSignToUInt32+0x8c>
    1166:	22 23       	and	r18, r18
    1168:	49 f0       	breq	.+18     	; 0x117c <ParamSignToUInt32+0x78>
    116a:	4a e0       	ldi	r20, 0x0A	; 10
    116c:	81 81       	ldd	r24, Z+1	; 0x01
    116e:	92 81       	ldd	r25, Z+2	; 0x02
    1170:	41 d6       	rcall	.+3202   	; 0x1df4 <strBaseToInt32>
    1172:	21 e0       	ldi	r18, 0x01	; 1
    1174:	89 2b       	or	r24, r25
    1176:	61 f4       	brne	.+24     	; 0x1190 <ParamSignToUInt32+0x8c>
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	0a c0       	rjmp	.+20     	; 0x1190 <ParamSignToUInt32+0x8c>
    117c:	4a e0       	ldi	r20, 0x0A	; 10
    117e:	81 81       	ldd	r24, Z+1	; 0x01
    1180:	92 81       	ldd	r25, Z+2	; 0x02
    1182:	5d d6       	rcall	.+3258   	; 0x1e3e <strBaseToUInt32>
    1184:	21 e0       	ldi	r18, 0x01	; 1
    1186:	89 2b       	or	r24, r25
    1188:	19 f4       	brne	.+6      	; 0x1190 <ParamSignToUInt32+0x8c>
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <ParamSignToUInt32+0x8c>
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	82 2f       	mov	r24, r18
    1192:	08 95       	ret

00001194 <SCPI_Init>:
    1194:	8f 92       	push	r8
    1196:	9f 92       	push	r9
    1198:	af 92       	push	r10
    119a:	bf 92       	push	r11
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	fc 01       	movw	r30, r24
    11b2:	86 e5       	ldi	r24, 0x56	; 86
    11b4:	df 01       	movw	r26, r30
    11b6:	1d 92       	st	X+, r1
    11b8:	8a 95       	dec	r24
    11ba:	e9 f7       	brne	.-6      	; 0x11b6 <SCPI_Init+0x22>
    11bc:	71 83       	std	Z+1, r23	; 0x01
    11be:	60 83       	st	Z, r22
    11c0:	57 8b       	std	Z+23, r21	; 0x17
    11c2:	46 8b       	std	Z+22, r20	; 0x16
    11c4:	34 af       	std	Z+60, r19	; 0x3c
    11c6:	23 af       	std	Z+59, r18	; 0x3b
    11c8:	df 01       	movw	r26, r30
    11ca:	a4 5b       	subi	r26, 0xB4	; 180
    11cc:	bf 4f       	sbci	r27, 0xFF	; 255
    11ce:	11 96       	adiw	r26, 0x01	; 1
    11d0:	1c 93       	st	X, r17
    11d2:	0e 93       	st	-X, r16
    11d4:	12 96       	adiw	r26, 0x02	; 2
    11d6:	11 96       	adiw	r26, 0x01	; 1
    11d8:	fc 92       	st	X, r15
    11da:	ee 92       	st	-X, r14
    11dc:	12 96       	adiw	r26, 0x02	; 2
    11de:	11 96       	adiw	r26, 0x01	; 1
    11e0:	dc 92       	st	X, r13
    11e2:	ce 92       	st	-X, r12
    11e4:	12 96       	adiw	r26, 0x02	; 2
    11e6:	ad 92       	st	X+, r10
    11e8:	bc 92       	st	X, r11
    11ea:	97 82       	std	Z+7, r9	; 0x07
    11ec:	86 82       	std	Z+6, r8	; 0x06
    11ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f0:	98 89       	ldd	r25, Y+16	; 0x10
    11f2:	93 83       	std	Z+3, r25	; 0x03
    11f4:	82 83       	std	Z+2, r24	; 0x02
    11f6:	15 82       	std	Z+5, r1	; 0x05
    11f8:	14 82       	std	Z+4, r1	; 0x04
    11fa:	4b 89       	ldd	r20, Y+19	; 0x13
    11fc:	5c 89       	ldd	r21, Y+20	; 0x14
    11fe:	69 89       	ldd	r22, Y+17	; 0x11
    1200:	7a 89       	ldd	r23, Y+18	; 0x12
    1202:	cf 01       	movw	r24, r30
    1204:	0e 94 dd 00 	call	0x1ba	; 0x1ba <SCPI_ErrorInit>
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	df 90       	pop	r13
    1216:	cf 90       	pop	r12
    1218:	bf 90       	pop	r11
    121a:	af 90       	pop	r10
    121c:	9f 90       	pop	r9
    121e:	8f 90       	pop	r8
    1220:	08 95       	ret

00001222 <SCPI_ParamIsNumber>:
    1222:	fc 01       	movw	r30, r24
    1224:	90 81       	ld	r25, Z
    1226:	9a 30       	cpi	r25, 0x0A	; 10
    1228:	59 f0       	breq	.+22     	; 0x1240 <SCPI_ParamIsNumber+0x1e>
    122a:	20 f4       	brcc	.+8      	; 0x1234 <SCPI_ParamIsNumber+0x12>
    122c:	96 50       	subi	r25, 0x06	; 6
    122e:	93 30       	cpi	r25, 0x03	; 3
    1230:	28 f4       	brcc	.+10     	; 0x123c <SCPI_ParamIsNumber+0x1a>
    1232:	06 c0       	rjmp	.+12     	; 0x1240 <SCPI_ParamIsNumber+0x1e>
    1234:	9b 30       	cpi	r25, 0x0B	; 11
    1236:	11 f4       	brne	.+4      	; 0x123c <SCPI_ParamIsNumber+0x1a>
    1238:	86 2f       	mov	r24, r22
    123a:	08 95       	ret
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	08 95       	ret
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	08 95       	ret

00001244 <SCPI_ParamToInt32>:
    1244:	21 e0       	ldi	r18, 0x01	; 1
    1246:	5e cf       	rjmp	.-324    	; 0x1104 <ParamSignToUInt32>
    1248:	08 95       	ret

0000124a <SCPI_ParamToChoice>:
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	5c 01       	movw	r10, r24
    1260:	7b 01       	movw	r14, r22
    1262:	69 01       	movw	r12, r18
    1264:	41 15       	cp	r20, r1
    1266:	51 05       	cpc	r21, r1
    1268:	11 f0       	breq	.+4      	; 0x126e <SCPI_ParamToChoice+0x24>
    126a:	23 2b       	or	r18, r19
    126c:	31 f4       	brne	.+12     	; 0x127a <SCPI_ParamToChoice+0x30>
    126e:	6a ec       	ldi	r22, 0xCA	; 202
    1270:	7e ef       	ldi	r23, 0xFE	; 254
    1272:	c5 01       	movw	r24, r10
    1274:	15 d8       	rcall	.-4054   	; 0x2a0 <SCPI_ErrorPush>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	39 c0       	rjmp	.+114    	; 0x12ec <SCPI_ParamToChoice+0xa2>
    127a:	fb 01       	movw	r30, r22
    127c:	80 81       	ld	r24, Z
    127e:	89 30       	cpi	r24, 0x09	; 9
    1280:	41 f5       	brne	.+80     	; 0x12d2 <SCPI_ParamToChoice+0x88>
    1282:	fa 01       	movw	r30, r20
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	51 f1       	breq	.+84     	; 0x12e0 <SCPI_ParamToChoice+0x96>
    128c:	ea 01       	movw	r28, r20
    128e:	fc 01       	movw	r30, r24
    1290:	01 90       	ld	r0, Z+
    1292:	00 20       	and	r0, r0
    1294:	e9 f7       	brne	.-6      	; 0x1290 <SCPI_ParamToChoice+0x46>
    1296:	31 97       	sbiw	r30, 0x01	; 1
    1298:	bf 01       	movw	r22, r30
    129a:	68 1b       	sub	r22, r24
    129c:	79 0b       	sbc	r23, r25
    129e:	f7 01       	movw	r30, r14
    12a0:	23 81       	ldd	r18, Z+3	; 0x03
    12a2:	34 81       	ldd	r19, Z+4	; 0x04
    12a4:	41 81       	ldd	r20, Z+1	; 0x01
    12a6:	52 81       	ldd	r21, Z+2	; 0x02
    12a8:	00 e0       	ldi	r16, 0x00	; 0
    12aa:	10 e0       	ldi	r17, 0x00	; 0
    12ac:	26 d7       	rcall	.+3660   	; 0x20fa <matchPattern>
    12ae:	88 23       	and	r24, r24
    12b0:	51 f0       	breq	.+20     	; 0x12c6 <SCPI_ParamToChoice+0x7c>
    12b2:	4a 81       	ldd	r20, Y+2	; 0x02
    12b4:	5b 81       	ldd	r21, Y+3	; 0x03
    12b6:	6c 81       	ldd	r22, Y+4	; 0x04
    12b8:	7d 81       	ldd	r23, Y+5	; 0x05
    12ba:	f6 01       	movw	r30, r12
    12bc:	40 83       	st	Z, r20
    12be:	51 83       	std	Z+1, r21	; 0x01
    12c0:	62 83       	std	Z+2, r22	; 0x02
    12c2:	73 83       	std	Z+3, r23	; 0x03
    12c4:	13 c0       	rjmp	.+38     	; 0x12ec <SCPI_ParamToChoice+0xa2>
    12c6:	26 96       	adiw	r28, 0x06	; 6
    12c8:	88 81       	ld	r24, Y
    12ca:	99 81       	ldd	r25, Y+1	; 0x01
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	f9 f6       	brne	.-66     	; 0x128e <SCPI_ParamToChoice+0x44>
    12d0:	07 c0       	rjmp	.+14     	; 0x12e0 <SCPI_ParamToChoice+0x96>
    12d2:	68 e9       	ldi	r22, 0x98	; 152
    12d4:	7f ef       	ldi	r23, 0xFF	; 255
    12d6:	c5 01       	movw	r24, r10
    12d8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCPI_ErrorPush>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	06 c0       	rjmp	.+12     	; 0x12ec <SCPI_ParamToChoice+0xa2>
    12e0:	60 e2       	ldi	r22, 0x20	; 32
    12e2:	7f ef       	ldi	r23, 0xFF	; 255
    12e4:	c5 01       	movw	r24, r10
    12e6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCPI_ErrorPush>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	ff 90       	pop	r15
    12f6:	ef 90       	pop	r14
    12f8:	df 90       	pop	r13
    12fa:	cf 90       	pop	r12
    12fc:	bf 90       	pop	r11
    12fe:	af 90       	pop	r10
    1300:	08 95       	ret

00001302 <scpiParser_parseProgramData>:
    1302:	8f 92       	push	r8
    1304:	9f 92       	push	r9
    1306:	af 92       	push	r10
    1308:	bf 92       	push	r11
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	00 d0       	rcall	.+0      	; 0x131c <scpiParser_parseProgramData+0x1a>
    131c:	00 d0       	rcall	.+0      	; 0x131e <scpiParser_parseProgramData+0x1c>
    131e:	1f 92       	push	r1
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	7c 01       	movw	r14, r24
    1326:	5b 01       	movw	r10, r22
    1328:	be 01       	movw	r22, r28
    132a:	6f 5f       	subi	r22, 0xFF	; 255
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	73 da       	rcall	.-2842   	; 0x816 <scpiLex_WhiteSpace>
    1330:	6c 01       	movw	r12, r24
    1332:	b5 01       	movw	r22, r10
    1334:	c7 01       	movw	r24, r14
    1336:	0e dc       	rcall	.-2020   	; 0xb54 <scpiLex_NondecimalNumericData>
    1338:	8c 01       	movw	r16, r24
    133a:	89 2b       	or	r24, r25
    133c:	91 f5       	brne	.+100    	; 0x13a2 <scpiParser_parseProgramData+0xa0>
    133e:	b5 01       	movw	r22, r10
    1340:	c7 01       	movw	r24, r14
    1342:	16 db       	rcall	.-2516   	; 0x970 <scpiLex_CharacterProgramData>
    1344:	8c 01       	movw	r16, r24
    1346:	89 2b       	or	r24, r25
    1348:	99 f5       	brne	.+102    	; 0x13b0 <scpiParser_parseProgramData+0xae>
    134a:	b5 01       	movw	r22, r10
    134c:	c7 01       	movw	r24, r14
    134e:	61 db       	rcall	.-2366   	; 0xa12 <scpiLex_DecimalNumericProgramData>
    1350:	8c 01       	movw	r16, r24
    1352:	89 2b       	or	r24, r25
    1354:	e1 f0       	breq	.+56     	; 0x138e <scpiParser_parseProgramData+0x8c>
    1356:	be 01       	movw	r22, r28
    1358:	6f 5f       	subi	r22, 0xFF	; 255
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	c7 01       	movw	r24, r14
    135e:	5b da       	rcall	.-2890   	; 0x816 <scpiLex_WhiteSpace>
    1360:	4c 01       	movw	r8, r24
    1362:	be 01       	movw	r22, r28
    1364:	6f 5f       	subi	r22, 0xFF	; 255
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	c7 01       	movw	r24, r14
    136a:	aa db       	rcall	.-2220   	; 0xac0 <scpiLex_SuffixProgramData>
    136c:	18 16       	cp	r1, r24
    136e:	19 06       	cpc	r1, r25
    1370:	fc f4       	brge	.+62     	; 0x13b0 <scpiParser_parseProgramData+0xae>
    1372:	88 0d       	add	r24, r8
    1374:	99 1d       	adc	r25, r9
    1376:	f5 01       	movw	r30, r10
    1378:	03 81       	ldd	r16, Z+3	; 0x03
    137a:	14 81       	ldd	r17, Z+4	; 0x04
    137c:	08 0f       	add	r16, r24
    137e:	19 1f       	adc	r17, r25
    1380:	14 83       	std	Z+4, r17	; 0x04
    1382:	03 83       	std	Z+3, r16	; 0x03
    1384:	8b e0       	ldi	r24, 0x0B	; 11
    1386:	80 83       	st	Z, r24
    1388:	01 15       	cp	r16, r1
    138a:	11 05       	cpc	r17, r1
    138c:	89 f4       	brne	.+34     	; 0x13b0 <scpiParser_parseProgramData+0xae>
    138e:	b5 01       	movw	r22, r10
    1390:	c7 01       	movw	r24, r14
    1392:	8e dc       	rcall	.-1764   	; 0xcb0 <scpiLex_StringProgramData>
    1394:	8c 01       	movw	r16, r24
    1396:	89 2b       	or	r24, r25
    1398:	59 f4       	brne	.+22     	; 0x13b0 <scpiParser_parseProgramData+0xae>
    139a:	b5 01       	movw	r22, r10
    139c:	c7 01       	movw	r24, r14
    139e:	15 dd       	rcall	.-1494   	; 0xdca <scpiLex_ArbitraryBlockProgramData>
    13a0:	8c 01       	movw	r16, r24
    13a2:	01 15       	cp	r16, r1
    13a4:	11 05       	cpc	r17, r1
    13a6:	21 f4       	brne	.+8      	; 0x13b0 <scpiParser_parseProgramData+0xae>
    13a8:	b5 01       	movw	r22, r10
    13aa:	c7 01       	movw	r24, r14
    13ac:	d1 dd       	rcall	.-1118   	; 0xf50 <scpiLex_ProgramExpression>
    13ae:	8c 01       	movw	r16, r24
    13b0:	be 01       	movw	r22, r28
    13b2:	6f 5f       	subi	r22, 0xFF	; 255
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	c7 01       	movw	r24, r14
    13b8:	2e da       	rcall	.-2980   	; 0x816 <scpiLex_WhiteSpace>
    13ba:	8c 0d       	add	r24, r12
    13bc:	9d 1d       	adc	r25, r13
    13be:	80 0f       	add	r24, r16
    13c0:	91 1f       	adc	r25, r17
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	ff 90       	pop	r15
    13d6:	ef 90       	pop	r14
    13d8:	df 90       	pop	r13
    13da:	cf 90       	pop	r12
    13dc:	bf 90       	pop	r11
    13de:	af 90       	pop	r10
    13e0:	9f 90       	pop	r9
    13e2:	8f 90       	pop	r8
    13e4:	08 95       	ret

000013e6 <SCPI_Parameter>:
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	8c 01       	movw	r16, r24
    13f4:	eb 01       	movw	r28, r22
    13f6:	20 97       	sbiw	r28, 0x00	; 0
    13f8:	31 f4       	brne	.+12     	; 0x1406 <SCPI_Parameter+0x20>
    13fa:	6a ec       	ldi	r22, 0xCA	; 202
    13fc:	7e ef       	ldi	r23, 0xFE	; 254
    13fe:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCPI_ErrorPush>
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	59 c0       	rjmp	.+178    	; 0x14b8 <SCPI_Parameter+0xd2>
    1406:	1c 82       	std	Y+4, r1	; 0x04
    1408:	1b 82       	std	Y+3, r1	; 0x03
    140a:	1a 82       	std	Y+2, r1	; 0x02
    140c:	19 82       	std	Y+1, r1	; 0x01
    140e:	8a e1       	ldi	r24, 0x1A	; 26
    1410:	88 83       	st	Y, r24
    1412:	f8 01       	movw	r30, r16
    1414:	22 85       	ldd	r18, Z+10	; 0x0a
    1416:	33 85       	ldd	r19, Z+11	; 0x0b
    1418:	86 85       	ldd	r24, Z+14	; 0x0e
    141a:	97 85       	ldd	r25, Z+15	; 0x0f
    141c:	82 0f       	add	r24, r18
    141e:	93 1f       	adc	r25, r19
    1420:	24 85       	ldd	r18, Z+12	; 0x0c
    1422:	35 85       	ldd	r19, Z+13	; 0x0d
    1424:	28 17       	cp	r18, r24
    1426:	39 07       	cpc	r19, r25
    1428:	68 f0       	brcs	.+26     	; 0x1444 <SCPI_Parameter+0x5e>
    142a:	44 23       	and	r20, r20
    142c:	39 f0       	breq	.+14     	; 0x143c <SCPI_Parameter+0x56>
    142e:	63 e9       	ldi	r22, 0x93	; 147
    1430:	7f ef       	ldi	r23, 0xFF	; 255
    1432:	c8 01       	movw	r24, r16
    1434:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCPI_ErrorPush>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	3e c0       	rjmp	.+124    	; 0x14b8 <SCPI_Parameter+0xd2>
    143c:	89 e0       	ldi	r24, 0x09	; 9
    143e:	88 83       	st	Y, r24
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	3a c0       	rjmp	.+116    	; 0x14b8 <SCPI_Parameter+0xd2>
    1444:	78 01       	movw	r14, r16
    1446:	fa e0       	ldi	r31, 0x0A	; 10
    1448:	ef 0e       	add	r14, r31
    144a:	f1 1c       	adc	r15, r1
    144c:	f8 01       	movw	r30, r16
    144e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1450:	93 8d       	ldd	r25, Z+27	; 0x1b
    1452:	89 2b       	or	r24, r25
    1454:	91 f0       	breq	.+36     	; 0x147a <SCPI_Parameter+0x94>
    1456:	c7 01       	movw	r24, r14
    1458:	e1 dd       	rcall	.-1086   	; 0x101c <scpiLex_Comma>
    145a:	88 81       	ld	r24, Y
    145c:	88 23       	and	r24, r24
    145e:	69 f0       	breq	.+26     	; 0x147a <SCPI_Parameter+0x94>
    1460:	1c 82       	std	Y+4, r1	; 0x04
    1462:	1b 82       	std	Y+3, r1	; 0x03
    1464:	1a 82       	std	Y+2, r1	; 0x02
    1466:	19 82       	std	Y+1, r1	; 0x01
    1468:	8a e1       	ldi	r24, 0x1A	; 26
    146a:	88 83       	st	Y, r24
    146c:	69 e9       	ldi	r22, 0x99	; 153
    146e:	7f ef       	ldi	r23, 0xFF	; 255
    1470:	c8 01       	movw	r24, r16
    1472:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCPI_ErrorPush>
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	1f c0       	rjmp	.+62     	; 0x14b8 <SCPI_Parameter+0xd2>
    147a:	f8 01       	movw	r30, r16
    147c:	82 8d       	ldd	r24, Z+26	; 0x1a
    147e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	93 8f       	std	Z+27, r25	; 0x1b
    1484:	82 8f       	std	Z+26, r24	; 0x1a
    1486:	be 01       	movw	r22, r28
    1488:	c7 01       	movw	r24, r14
    148a:	3b df       	rcall	.-394    	; 0x1302 <scpiParser_parseProgramData>
    148c:	88 81       	ld	r24, Y
    148e:	86 30       	cpi	r24, 0x06	; 6
    1490:	28 f0       	brcs	.+10     	; 0x149c <SCPI_Parameter+0xb6>
    1492:	8c 30       	cpi	r24, 0x0C	; 12
    1494:	80 f0       	brcs	.+32     	; 0x14b6 <SCPI_Parameter+0xd0>
    1496:	8d 50       	subi	r24, 0x0D	; 13
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	68 f0       	brcs	.+26     	; 0x14b6 <SCPI_Parameter+0xd0>
    149c:	1c 82       	std	Y+4, r1	; 0x04
    149e:	1b 82       	std	Y+3, r1	; 0x03
    14a0:	1a 82       	std	Y+2, r1	; 0x02
    14a2:	19 82       	std	Y+1, r1	; 0x01
    14a4:	8a e1       	ldi	r24, 0x1A	; 26
    14a6:	88 83       	st	Y, r24
    14a8:	69 e6       	ldi	r22, 0x69	; 105
    14aa:	7f ef       	ldi	r23, 0xFF	; 255
    14ac:	c8 01       	movw	r24, r16
    14ae:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCPI_ErrorPush>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <SCPI_Parameter+0xd2>
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	08 95       	ret

000014c6 <ParamSignUInt32>:
    14c6:	cf 92       	push	r12
    14c8:	df 92       	push	r13
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <ParamSignUInt32+0x12>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <ParamSignUInt32+0x14>
    14da:	1f 92       	push	r1
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	7c 01       	movw	r14, r24
    14e2:	8b 01       	movw	r16, r22
    14e4:	c2 2e       	mov	r12, r18
    14e6:	67 2b       	or	r22, r23
    14e8:	31 f4       	brne	.+12     	; 0x14f6 <ParamSignUInt32+0x30>
    14ea:	6a ec       	ldi	r22, 0xCA	; 202
    14ec:	7e ef       	ldi	r23, 0xFE	; 254
    14ee:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCPI_ErrorPush>
    14f2:	10 e0       	ldi	r17, 0x00	; 0
    14f4:	2b c0       	rjmp	.+86     	; 0x154c <ParamSignUInt32+0x86>
    14f6:	be 01       	movw	r22, r28
    14f8:	6f 5f       	subi	r22, 0xFF	; 255
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	74 df       	rcall	.-280    	; 0x13e6 <SCPI_Parameter>
    14fe:	88 23       	and	r24, r24
    1500:	21 f1       	breq	.+72     	; 0x154a <ParamSignUInt32+0x84>
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	ce 01       	movw	r24, r28
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	8c de       	rcall	.-744    	; 0x1222 <SCPI_ParamIsNumber>
    150a:	d8 2e       	mov	r13, r24
    150c:	88 23       	and	r24, r24
    150e:	49 f0       	breq	.+18     	; 0x1522 <ParamSignUInt32+0x5c>
    1510:	2c 2d       	mov	r18, r12
    1512:	a8 01       	movw	r20, r16
    1514:	be 01       	movw	r22, r28
    1516:	6f 5f       	subi	r22, 0xFF	; 255
    1518:	7f 4f       	sbci	r23, 0xFF	; 255
    151a:	c7 01       	movw	r24, r14
    151c:	f3 dd       	rcall	.-1050   	; 0x1104 <ParamSignToUInt32>
    151e:	18 2f       	mov	r17, r24
    1520:	15 c0       	rjmp	.+42     	; 0x154c <ParamSignUInt32+0x86>
    1522:	61 e0       	ldi	r22, 0x01	; 1
    1524:	ce 01       	movw	r24, r28
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	7c de       	rcall	.-776    	; 0x1222 <SCPI_ParamIsNumber>
    152a:	18 2f       	mov	r17, r24
    152c:	88 23       	and	r24, r24
    152e:	39 f0       	breq	.+14     	; 0x153e <ParamSignUInt32+0x78>
    1530:	66 e7       	ldi	r22, 0x76	; 118
    1532:	7f ef       	ldi	r23, 0xFF	; 255
    1534:	c7 01       	movw	r24, r14
    1536:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCPI_ErrorPush>
    153a:	1d 2d       	mov	r17, r13
    153c:	07 c0       	rjmp	.+14     	; 0x154c <ParamSignUInt32+0x86>
    153e:	68 e9       	ldi	r22, 0x98	; 152
    1540:	7f ef       	ldi	r23, 0xFF	; 255
    1542:	c7 01       	movw	r24, r14
    1544:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCPI_ErrorPush>
    1548:	01 c0       	rjmp	.+2      	; 0x154c <ParamSignUInt32+0x86>
    154a:	10 e0       	ldi	r17, 0x00	; 0
    154c:	81 2f       	mov	r24, r17
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	08 95       	ret

0000156a <SCPI_ParamInt32>:
    156a:	21 e0       	ldi	r18, 0x01	; 1
    156c:	ac cf       	rjmp	.-168    	; 0x14c6 <ParamSignUInt32>
    156e:	08 95       	ret

00001570 <SCPI_ParamBool>:
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	29 97       	sbiw	r28, 0x09	; 9
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	8c 01       	movw	r16, r24
    158e:	7b 01       	movw	r14, r22
    1590:	67 2b       	or	r22, r23
    1592:	31 f4       	brne	.+12     	; 0x15a0 <SCPI_ParamBool+0x30>
    1594:	6a ec       	ldi	r22, 0xCA	; 202
    1596:	7e ef       	ldi	r23, 0xFE	; 254
    1598:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCPI_ErrorPush>
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	3c c0       	rjmp	.+120    	; 0x1618 <SCPI_ParamBool+0xa8>
    15a0:	be 01       	movw	r22, r28
    15a2:	6f 5f       	subi	r22, 0xFF	; 255
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
    15a6:	1f df       	rcall	.-450    	; 0x13e6 <SCPI_Parameter>
    15a8:	88 23       	and	r24, r24
    15aa:	99 f1       	breq	.+102    	; 0x1612 <SCPI_ParamBool+0xa2>
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	8a 30       	cpi	r24, 0x0A	; 10
    15b0:	b1 f4       	brne	.+44     	; 0x15de <SCPI_ParamBool+0x6e>
    15b2:	ae 01       	movw	r20, r28
    15b4:	4a 5f       	subi	r20, 0xFA	; 250
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	be 01       	movw	r22, r28
    15ba:	6f 5f       	subi	r22, 0xFF	; 255
    15bc:	7f 4f       	sbci	r23, 0xFF	; 255
    15be:	c8 01       	movw	r24, r16
    15c0:	41 de       	rcall	.-894    	; 0x1244 <SCPI_ParamToInt32>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	4e 81       	ldd	r20, Y+6	; 0x06
    15c6:	5f 81       	ldd	r21, Y+7	; 0x07
    15c8:	68 85       	ldd	r22, Y+8	; 0x08
    15ca:	79 85       	ldd	r23, Y+9	; 0x09
    15cc:	45 2b       	or	r20, r21
    15ce:	46 2b       	or	r20, r22
    15d0:	47 2b       	or	r20, r23
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <SCPI_ParamBool+0x66>
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	f7 01       	movw	r30, r14
    15d8:	80 83       	st	Z, r24
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	1d c0       	rjmp	.+58     	; 0x1618 <SCPI_ParamBool+0xa8>
    15de:	9e 01       	movw	r18, r28
    15e0:	2a 5f       	subi	r18, 0xFA	; 250
    15e2:	3f 4f       	sbci	r19, 0xFF	; 255
    15e4:	46 e6       	ldi	r20, 0x66	; 102
    15e6:	51 e0       	ldi	r21, 0x01	; 1
    15e8:	be 01       	movw	r22, r28
    15ea:	6f 5f       	subi	r22, 0xFF	; 255
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	c8 01       	movw	r24, r16
    15f0:	2c de       	rcall	.-936    	; 0x124a <SCPI_ParamToChoice>
    15f2:	88 23       	and	r24, r24
    15f4:	81 f0       	breq	.+32     	; 0x1616 <SCPI_ParamBool+0xa6>
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	4e 81       	ldd	r20, Y+6	; 0x06
    15fa:	5f 81       	ldd	r21, Y+7	; 0x07
    15fc:	68 85       	ldd	r22, Y+8	; 0x08
    15fe:	79 85       	ldd	r23, Y+9	; 0x09
    1600:	45 2b       	or	r20, r21
    1602:	46 2b       	or	r20, r22
    1604:	47 2b       	or	r20, r23
    1606:	09 f4       	brne	.+2      	; 0x160a <SCPI_ParamBool+0x9a>
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	f7 01       	movw	r30, r14
    160c:	80 83       	st	Z, r24
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <SCPI_ParamBool+0xa8>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <SCPI_ParamBool+0xa8>
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	29 96       	adiw	r28, 0x09	; 9
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	ff 90       	pop	r15
    162e:	ef 90       	pop	r14
    1630:	08 95       	ret

00001632 <scpiParser_parseAllProgramData>:
 * @param state
 * @param token
 * @param numberOfParameters
 * @return
 */
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
    1632:	af 92       	push	r10
    1634:	bf 92       	push	r11
    1636:	cf 92       	push	r12
    1638:	df 92       	push	r13
    163a:	ef 92       	push	r14
    163c:	ff 92       	push	r15
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	00 d0       	rcall	.+0      	; 0x1648 <scpiParser_parseAllProgramData+0x16>
    1648:	00 d0       	rcall	.+0      	; 0x164a <scpiParser_parseAllProgramData+0x18>
    164a:	1f 92       	push	r1
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	6c 01       	movw	r12, r24
    1652:	8b 01       	movw	r16, r22
    1654:	5a 01       	movw	r10, r20

    int result;
    scpi_token_t tmp;
    int paramCount = 0;

    token->len = -1;
    1656:	8f ef       	ldi	r24, 0xFF	; 255
    1658:	9f ef       	ldi	r25, 0xFF	; 255
    165a:	fb 01       	movw	r30, r22
    165c:	94 83       	std	Z+4, r25	; 0x04
    165e:	83 83       	std	Z+3, r24	; 0x03
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
    1660:	88 e1       	ldi	r24, 0x18	; 24
    1662:	80 83       	st	Z, r24
    token->ptr = state->pos;
    1664:	f6 01       	movw	r30, r12
    1666:	82 81       	ldd	r24, Z+2	; 0x02
    1668:	93 81       	ldd	r25, Z+3	; 0x03
    166a:	fb 01       	movw	r30, r22
    166c:	92 83       	std	Z+2, r25	; 0x02
    166e:	81 83       	std	Z+1, r24	; 0x01


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
        token->len += result;
    1670:	14 82       	std	Z+4, r1	; 0x04
    1672:	13 82       	std	Z+3, r1	; 0x03
 */
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {

    int result;
    scpi_token_t tmp;
    int paramCount = 0;
    1674:	e1 2c       	mov	r14, r1
    1676:	f1 2c       	mov	r15, r1
    1678:	07 c0       	rjmp	.+14     	; 0x1688 <scpiParser_parseAllProgramData+0x56>
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
    token->ptr = state->pos;


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
        token->len += result;
    167a:	f8 01       	movw	r30, r16
    167c:	23 81       	ldd	r18, Z+3	; 0x03
    167e:	34 81       	ldd	r19, Z+4	; 0x04
    1680:	82 0f       	add	r24, r18
    1682:	93 1f       	adc	r25, r19
    1684:	94 83       	std	Z+4, r25	; 0x04
    1686:	83 83       	std	Z+3, r24	; 0x03
            token->len = 0;
            paramCount = -1;
            break;
        }

        result = scpiParser_parseProgramData(state, &tmp);
    1688:	be 01       	movw	r22, r28
    168a:	6f 5f       	subi	r22, 0xFF	; 255
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	c6 01       	movw	r24, r12
    1690:	38 de       	rcall	.-912    	; 0x1302 <scpiParser_parseProgramData>
        if (tmp.type != SCPI_TOKEN_UNKNOWN) {
    1692:	29 81       	ldd	r18, Y+1	; 0x01
    1694:	2a 31       	cpi	r18, 0x1A	; 26
    1696:	91 f0       	breq	.+36     	; 0x16bc <scpiParser_parseAllProgramData+0x8a>
            token->len += result;
    1698:	f8 01       	movw	r30, r16
    169a:	23 81       	ldd	r18, Z+3	; 0x03
    169c:	34 81       	ldd	r19, Z+4	; 0x04
    169e:	82 0f       	add	r24, r18
    16a0:	93 1f       	adc	r25, r19
    16a2:	94 83       	std	Z+4, r25	; 0x04
    16a4:	83 83       	std	Z+3, r24	; 0x03
            token->type = SCPI_TOKEN_UNKNOWN;
            token->len = 0;
            paramCount = -1;
            break;
        }
        paramCount++;
    16a6:	ff ef       	ldi	r31, 0xFF	; 255
    16a8:	ef 1a       	sub	r14, r31
    16aa:	ff 0a       	sbc	r15, r31
    token->len = -1;
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
    token->ptr = state->pos;


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
    16ac:	be 01       	movw	r22, r28
    16ae:	6f 5f       	subi	r22, 0xFF	; 255
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
    16b2:	c6 01       	movw	r24, r12
    16b4:	b3 dc       	rcall	.-1690   	; 0x101c <scpiLex_Comma>
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	01 f7       	brne	.-64     	; 0x167a <scpiParser_parseAllProgramData+0x48>
    16ba:	09 c0       	rjmp	.+18     	; 0x16ce <scpiParser_parseAllProgramData+0x9c>

        result = scpiParser_parseProgramData(state, &tmp);
        if (tmp.type != SCPI_TOKEN_UNKNOWN) {
            token->len += result;
        } else {
            token->type = SCPI_TOKEN_UNKNOWN;
    16bc:	8a e1       	ldi	r24, 0x1A	; 26
    16be:	f8 01       	movw	r30, r16
    16c0:	80 83       	st	Z, r24
            token->len = 0;
    16c2:	14 82       	std	Z+4, r1	; 0x04
    16c4:	13 82       	std	Z+3, r1	; 0x03
            paramCount = -1;
    16c6:	ee 24       	eor	r14, r14
    16c8:	ea 94       	dec	r14
    16ca:	fe 2c       	mov	r15, r14
    16cc:	08 c0       	rjmp	.+16     	; 0x16de <scpiParser_parseAllProgramData+0xac>
            break;
        }
        paramCount++;
    }

    if (token->len == -1) {
    16ce:	f8 01       	movw	r30, r16
    16d0:	83 81       	ldd	r24, Z+3	; 0x03
    16d2:	94 81       	ldd	r25, Z+4	; 0x04
    16d4:	01 96       	adiw	r24, 0x01	; 1
    16d6:	19 f4       	brne	.+6      	; 0x16de <scpiParser_parseAllProgramData+0xac>
        token->len = 0;
    16d8:	f8 01       	movw	r30, r16
    16da:	14 82       	std	Z+4, r1	; 0x04
    16dc:	13 82       	std	Z+3, r1	; 0x03
    }

    if (numberOfParameters != NULL) {
    16de:	a1 14       	cp	r10, r1
    16e0:	b1 04       	cpc	r11, r1
    16e2:	19 f0       	breq	.+6      	; 0x16ea <scpiParser_parseAllProgramData+0xb8>
        *numberOfParameters = paramCount;
    16e4:	f5 01       	movw	r30, r10
    16e6:	f1 82       	std	Z+1, r15	; 0x01
    16e8:	e0 82       	st	Z, r14
    }
    return token->len;
}
    16ea:	f8 01       	movw	r30, r16
    16ec:	83 81       	ldd	r24, Z+3	; 0x03
    16ee:	94 81       	ldd	r25, Z+4	; 0x04
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	ff 90       	pop	r15
    1704:	ef 90       	pop	r14
    1706:	df 90       	pop	r13
    1708:	cf 90       	pop	r12
    170a:	bf 90       	pop	r11
    170c:	af 90       	pop	r10
    170e:	08 95       	ret

00001710 <scpiParser_detectProgramMessageUnit>:
 * @param state
 * @param buffer
 * @param len
 * @return
 */
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	2b 97       	sbiw	r28, 0x0b	; 11
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	8c 01       	movw	r16, r24
    lex_state_t lex_state;
    scpi_token_t tmp;
    int result = 0;

    lex_state.buffer = lex_state.pos = buffer;
    172e:	7c 83       	std	Y+4, r23	; 0x04
    1730:	6b 83       	std	Y+3, r22	; 0x03
    1732:	7a 83       	std	Y+2, r23	; 0x02
    1734:	69 83       	std	Y+1, r22	; 0x01
    lex_state.len = len;
    1736:	5e 83       	std	Y+6, r21	; 0x06
    1738:	4d 83       	std	Y+5, r20	; 0x05
    state->numberOfParameters = 0;
    173a:	fc 01       	movw	r30, r24
    173c:	13 86       	std	Z+11, r1	; 0x0b
    173e:	12 86       	std	Z+10, r1	; 0x0a

    /* ignore whitespace at the begginig */
    scpiLex_WhiteSpace(&lex_state, &tmp);
    1740:	be 01       	movw	r22, r28
    1742:	69 5f       	subi	r22, 0xF9	; 249
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	ce 01       	movw	r24, r28
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	65 d8       	rcall	.-3894   	; 0x816 <scpiLex_WhiteSpace>

    if (scpiLex_ProgramHeader(&lex_state, &state->programHeader) >= 0) {
    174c:	b8 01       	movw	r22, r16
    174e:	ce 01       	movw	r24, r28
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	84 d8       	rcall	.-3832   	; 0x85c <scpiLex_ProgramHeader>
    1754:	99 23       	and	r25, r25
    1756:	ec f0       	brlt	.+58     	; 0x1792 <scpiParser_detectProgramMessageUnit+0x82>
        if (scpiLex_WhiteSpace(&lex_state, &tmp) > 0) {
    1758:	be 01       	movw	r22, r28
    175a:	69 5f       	subi	r22, 0xF9	; 249
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	ce 01       	movw	r24, r28
    1760:	01 96       	adiw	r24, 0x01	; 1
    1762:	59 d8       	rcall	.-3918   	; 0x816 <scpiLex_WhiteSpace>
    1764:	18 16       	cp	r1, r24
    1766:	19 06       	cpc	r1, r25
    1768:	54 f4       	brge	.+20     	; 0x177e <scpiParser_detectProgramMessageUnit+0x6e>
            scpiParser_parseAllProgramData(&lex_state, &state->programData, &state->numberOfParameters);
    176a:	a8 01       	movw	r20, r16
    176c:	46 5f       	subi	r20, 0xF6	; 246
    176e:	5f 4f       	sbci	r21, 0xFF	; 255
    1770:	b8 01       	movw	r22, r16
    1772:	6b 5f       	subi	r22, 0xFB	; 251
    1774:	7f 4f       	sbci	r23, 0xFF	; 255
    1776:	ce 01       	movw	r24, r28
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	5b df       	rcall	.-330    	; 0x1632 <scpiParser_parseAllProgramData>
    177c:	18 c0       	rjmp	.+48     	; 0x17ae <scpiParser_detectProgramMessageUnit+0x9e>
        } else {
            invalidateToken(&state->programData, lex_state.pos);
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	9c 81       	ldd	r25, Y+4	; 0x04
 * Invalidate token
 * @param token
 * @param ptr
 */
static void invalidateToken(scpi_token_t * token, char * ptr) {
    token->len = 0;
    1782:	f8 01       	movw	r30, r16
    1784:	11 86       	std	Z+9, r1	; 0x09
    1786:	10 86       	std	Z+8, r1	; 0x08
    token->ptr = ptr;
    1788:	97 83       	std	Z+7, r25	; 0x07
    178a:	86 83       	std	Z+6, r24	; 0x06
    token->type = SCPI_TOKEN_UNKNOWN;
    178c:	8a e1       	ldi	r24, 0x1A	; 26
    178e:	85 83       	std	Z+5, r24	; 0x05
    1790:	0e c0       	rjmp	.+28     	; 0x17ae <scpiParser_detectProgramMessageUnit+0x9e>
            scpiParser_parseAllProgramData(&lex_state, &state->programData, &state->numberOfParameters);
        } else {
            invalidateToken(&state->programData, lex_state.pos);
        }
    } else {
        invalidateToken(&state->programHeader, lex_state.buffer);
    1792:	29 81       	ldd	r18, Y+1	; 0x01
    1794:	3a 81       	ldd	r19, Y+2	; 0x02
 * Invalidate token
 * @param token
 * @param ptr
 */
static void invalidateToken(scpi_token_t * token, char * ptr) {
    token->len = 0;
    1796:	f8 01       	movw	r30, r16
    1798:	14 82       	std	Z+4, r1	; 0x04
    179a:	13 82       	std	Z+3, r1	; 0x03
    token->ptr = ptr;
    179c:	32 83       	std	Z+2, r19	; 0x02
    179e:	21 83       	std	Z+1, r18	; 0x01
    token->type = SCPI_TOKEN_UNKNOWN;
    17a0:	8a e1       	ldi	r24, 0x1A	; 26
    17a2:	80 83       	st	Z, r24
 * Invalidate token
 * @param token
 * @param ptr
 */
static void invalidateToken(scpi_token_t * token, char * ptr) {
    token->len = 0;
    17a4:	11 86       	std	Z+9, r1	; 0x09
    17a6:	10 86       	std	Z+8, r1	; 0x08
    token->ptr = ptr;
    17a8:	37 83       	std	Z+7, r19	; 0x07
    17aa:	26 83       	std	Z+6, r18	; 0x06
    token->type = SCPI_TOKEN_UNKNOWN;
    17ac:	85 83       	std	Z+5, r24	; 0x05
    } else {
        invalidateToken(&state->programHeader, lex_state.buffer);
        invalidateToken(&state->programData, lex_state.buffer);
    }

    if (result == 0) result = scpiLex_NewLine(&lex_state, &tmp);
    17ae:	be 01       	movw	r22, r28
    17b0:	69 5f       	subi	r22, 0xF9	; 249
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	ce 01       	movw	r24, r28
    17b6:	01 96       	adiw	r24, 0x01	; 1
    17b8:	67 dc       	rcall	.-1842   	; 0x1088 <scpiLex_NewLine>
    if (result == 0) result = scpiLex_Semicolon(&lex_state, &tmp);
    17ba:	89 2b       	or	r24, r25
    17bc:	c1 f5       	brne	.+112    	; 0x182e <scpiParser_detectProgramMessageUnit+0x11e>
    17be:	be 01       	movw	r22, r28
    17c0:	69 5f       	subi	r22, 0xF9	; 249
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	ce 01       	movw	r24, r28
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	44 dc       	rcall	.-1912   	; 0x1052 <scpiLex_Semicolon>

    if (!scpiLex_IsEos(&lex_state) && (result == 0)) {
    17ca:	7c 01       	movw	r14, r24
    17cc:	ce 01       	movw	r24, r28
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	20 d8       	rcall	.-4032   	; 0x812 <scpiLex_IsEos>
    17d2:	89 2b       	or	r24, r25
    17d4:	b1 f4       	brne	.+44     	; 0x1802 <scpiParser_detectProgramMessageUnit+0xf2>
    17d6:	ef 28       	or	r14, r15
    17d8:	a1 f4       	brne	.+40     	; 0x1802 <scpiParser_detectProgramMessageUnit+0xf2>
        lex_state.pos++;
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	9c 83       	std	Y+4, r25	; 0x04
    17e2:	8b 83       	std	Y+3, r24	; 0x03

        state->programHeader.len = 1;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	f8 01       	movw	r30, r16
    17ea:	94 83       	std	Z+4, r25	; 0x04
    17ec:	83 83       	std	Z+3, r24	; 0x03
        state->programHeader.type = SCPI_TOKEN_INVALID;
    17ee:	89 e1       	ldi	r24, 0x19	; 25
    17f0:	80 83       	st	Z, r24

        invalidateToken(&state->programData, lex_state.buffer);
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	9a 81       	ldd	r25, Y+2	; 0x02
 * Invalidate token
 * @param token
 * @param ptr
 */
static void invalidateToken(scpi_token_t * token, char * ptr) {
    token->len = 0;
    17f6:	11 86       	std	Z+9, r1	; 0x09
    17f8:	10 86       	std	Z+8, r1	; 0x08
    token->ptr = ptr;
    17fa:	97 83       	std	Z+7, r25	; 0x07
    17fc:	86 83       	std	Z+6, r24	; 0x06
    token->type = SCPI_TOKEN_UNKNOWN;
    17fe:	8a e1       	ldi	r24, 0x1A	; 26
    1800:	85 83       	std	Z+5, r24	; 0x05
        state->programHeader.type = SCPI_TOKEN_INVALID;

        invalidateToken(&state->programData, lex_state.buffer);
    }

    if (SCPI_TOKEN_SEMICOLON == tmp.type) {
    1802:	8f 81       	ldd	r24, Y+7	; 0x07
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	21 f4       	brne	.+8      	; 0x1810 <scpiParser_detectProgramMessageUnit+0x100>
        state->termination = SCPI_MESSAGE_TERMINATION_SEMICOLON;
    1808:	82 e0       	ldi	r24, 0x02	; 2
    180a:	f8 01       	movw	r30, r16
    180c:	84 87       	std	Z+12, r24	; 0x0c
    180e:	08 c0       	rjmp	.+16     	; 0x1820 <scpiParser_detectProgramMessageUnit+0x110>
    } else if (SCPI_TOKEN_NL == tmp.type) {
    1810:	85 30       	cpi	r24, 0x05	; 5
    1812:	21 f4       	brne	.+8      	; 0x181c <scpiParser_detectProgramMessageUnit+0x10c>
        state->termination = SCPI_MESSAGE_TERMINATION_NL;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	f8 01       	movw	r30, r16
    1818:	84 87       	std	Z+12, r24	; 0x0c
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <scpiParser_detectProgramMessageUnit+0x110>
    } else {
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
    181c:	f8 01       	movw	r30, r16
    181e:	14 86       	std	Z+12, r1	; 0x0c
    }

    return lex_state.pos - lex_state.buffer;
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	29 81       	ldd	r18, Y+1	; 0x01
    1826:	3a 81       	ldd	r19, Y+2	; 0x02
    1828:	82 1b       	sub	r24, r18
    182a:	93 0b       	sbc	r25, r19
    182c:	05 c0       	rjmp	.+10     	; 0x1838 <scpiParser_detectProgramMessageUnit+0x128>
    }

    if (result == 0) result = scpiLex_NewLine(&lex_state, &tmp);
    if (result == 0) result = scpiLex_Semicolon(&lex_state, &tmp);

    if (!scpiLex_IsEos(&lex_state) && (result == 0)) {
    182e:	ce 01       	movw	r24, r28
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	0e 94 09 04 	call	0x812	; 0x812 <scpiLex_IsEos>
    1836:	e5 cf       	rjmp	.-54     	; 0x1802 <scpiParser_detectProgramMessageUnit+0xf2>
    } else {
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
    }

    return lex_state.pos - lex_state.buffer;
}
    1838:	2b 96       	adiw	r28, 0x0b	; 11
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	08 95       	ret

00001852 <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return FALSE if there was some error during evaluation of commands
 */
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
    1852:	2f 92       	push	r2
    1854:	3f 92       	push	r3
    1856:	4f 92       	push	r4
    1858:	5f 92       	push	r5
    185a:	6f 92       	push	r6
    185c:	7f 92       	push	r7
    185e:	8f 92       	push	r8
    1860:	9f 92       	push	r9
    1862:	af 92       	push	r10
    1864:	bf 92       	push	r11
    1866:	cf 92       	push	r12
    1868:	df 92       	push	r13
    186a:	ef 92       	push	r14
    186c:	ff 92       	push	r15
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	62 97       	sbiw	r28, 0x12	; 18
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	2c 01       	movw	r4, r24
    1888:	7b 87       	std	Y+11, r23	; 0x0b
    188a:	6a 87       	std	Y+10, r22	; 0x0a
    188c:	1a 01       	movw	r2, r20
    scpi_bool_t result = TRUE;
    scpi_parser_state_t * state;
    int r;
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
    188e:	8a e1       	ldi	r24, 0x1A	; 26
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	1b 82       	std	Y+3, r1	; 0x03
    1894:	1a 82       	std	Y+2, r1	; 0x02
    1896:	1d 82       	std	Y+5, r1	; 0x05
    1898:	1c 82       	std	Y+4, r1	; 0x04

    if (context == NULL) {
    189a:	41 14       	cp	r4, r1
    189c:	51 04       	cpc	r5, r1
    189e:	09 f4       	brne	.+2      	; 0x18a2 <SCPI_Parse+0x50>
    18a0:	2f c1       	rjmp	.+606    	; 0x1b00 <SCPI_Parse+0x2ae>
        return FALSE;
    }

    state = &context->parser_state;
    18a2:	c2 01       	movw	r24, r4
    18a4:	cf 96       	adiw	r24, 0x3f	; 63
    18a6:	9f 87       	std	Y+15, r25	; 0x0f
    18a8:	8e 87       	std	Y+14, r24	; 0x0e
    context->output_count = 0;
    18aa:	d2 01       	movw	r26, r4
    18ac:	59 96       	adiw	r26, 0x19	; 25
    18ae:	1c 92       	st	X, r1
    18b0:	1e 92       	st	-X, r1
    18b2:	58 97       	sbiw	r26, 0x18	; 24
 * @param data - complete command line
 * @param len - command line length
 * @return FALSE if there was some error during evaluation of commands
 */
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
    scpi_bool_t result = TRUE;
    18b4:	b1 e0       	ldi	r27, 0x01	; 1
    18b6:	b8 8b       	std	Y+16, r27	; 0x10
        r = scpiParser_detectProgramMessageUnit(state, data, len);

        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_CHARACTER);
            result = FALSE;
        } else if (state->programHeader.len > 0) {
    18b8:	9d 87       	std	Y+13, r25	; 0x0d
    18ba:	8c 87       	std	Y+12, r24	; 0x0c
    writeSemicolon(context);

    context->cmd_error = FALSE;
    context->output_count = 0;
    context->input_count = 0;
    context->arbitrary_reminding = 0;
    18bc:	45 96       	adiw	r24, 0x15	; 21
    18be:	9a 8b       	std	Y+18, r25	; 0x12
    18c0:	89 8b       	std	Y+17, r24	; 0x11

    state = &context->parser_state;
    context->output_count = 0;

    while (1) {
        r = scpiParser_detectProgramMessageUnit(state, data, len);
    18c2:	a1 01       	movw	r20, r2
    18c4:	6a 85       	ldd	r22, Y+10	; 0x0a
    18c6:	7b 85       	ldd	r23, Y+11	; 0x0b
    18c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    18ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    18cc:	21 df       	rcall	.-446    	; 0x1710 <scpiParser_detectProgramMessageUnit>
    18ce:	3c 01       	movw	r6, r24

        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
    18d0:	d2 01       	movw	r26, r4
    18d2:	df 96       	adiw	r26, 0x3f	; 63
    18d4:	8c 91       	ld	r24, X
    18d6:	89 31       	cpi	r24, 0x19	; 25
    18d8:	39 f4       	brne	.+14     	; 0x18e8 <SCPI_Parse+0x96>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_CHARACTER);
    18da:	6b e9       	ldi	r22, 0x9B	; 155
    18dc:	7f ef       	ldi	r23, 0xFF	; 255
    18de:	c2 01       	movw	r24, r4
    18e0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCPI_ErrorPush>
            result = FALSE;
    18e4:	18 8a       	std	Y+16, r1	; 0x10
    18e6:	e2 c0       	rjmp	.+452    	; 0x1aac <SCPI_Parse+0x25a>
        } else if (state->programHeader.len > 0) {
    18e8:	ec 85       	ldd	r30, Y+12	; 0x0c
    18ea:	fd 85       	ldd	r31, Y+13	; 0x0d
    18ec:	83 81       	ldd	r24, Z+3	; 0x03
    18ee:	94 81       	ldd	r25, Z+4	; 0x04
    18f0:	18 16       	cp	r1, r24
    18f2:	19 06       	cpc	r1, r25
    18f4:	0c f0       	brlt	.+2      	; 0x18f8 <SCPI_Parse+0xa6>
    18f6:	da c0       	rjmp	.+436    	; 0x1aac <SCPI_Parse+0x25a>

            composeCompoundCommand(&cmd_prev, &state->programHeader);
    18f8:	6e 85       	ldd	r22, Y+14	; 0x0e
    18fa:	7f 85       	ldd	r23, Y+15	; 0x0f
    18fc:	ce 01       	movw	r24, r28
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	c3 d2       	rcall	.+1414   	; 0x1e88 <composeCompoundCommand>

            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
    1902:	ac 85       	ldd	r26, Y+12	; 0x0c
    1904:	bd 85       	ldd	r27, Y+13	; 0x0d
    1906:	13 96       	adiw	r26, 0x03	; 3
    1908:	0d 90       	ld	r0, X+
    190a:	bc 91       	ld	r27, X
    190c:	a0 2d       	mov	r26, r0
    190e:	bf 83       	std	Y+7, r27	; 0x07
    1910:	ae 83       	std	Y+6, r26	; 0x06
    1912:	ec 85       	ldd	r30, Y+12	; 0x0c
    1914:	fd 85       	ldd	r31, Y+13	; 0x0d
    1916:	01 80       	ldd	r0, Z+1	; 0x01
    1918:	f2 81       	ldd	r31, Z+2	; 0x02
    191a:	e0 2d       	mov	r30, r0
    191c:	f9 87       	std	Y+9, r31	; 0x09
    191e:	e8 87       	std	Y+8, r30	; 0x08
 */
static scpi_bool_t findCommandHeader(scpi_t * context, const char * header, int len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
    1920:	d2 01       	movw	r26, r4
    1922:	ad 90       	ld	r10, X+
    1924:	bc 90       	ld	r11, X
    1926:	f5 01       	movw	r30, r10
    1928:	80 81       	ld	r24, Z
    192a:	91 81       	ldd	r25, Z+1	; 0x01
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	09 f4       	brne	.+2      	; 0x1932 <SCPI_Parse+0xe0>
    1930:	ef c0       	rjmp	.+478    	; 0x1b10 <SCPI_Parse+0x2be>
    1932:	68 94       	set
    1934:	88 24       	eor	r8, r8
    1936:	83 f8       	bld	r8, 3
    1938:	91 2c       	mov	r9, r1
        cmd = &context->cmdlist[i];
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
    193a:	c1 2c       	mov	r12, r1
    193c:	d1 2c       	mov	r13, r1
    193e:	76 01       	movw	r14, r12
    1940:	00 e0       	ldi	r16, 0x00	; 0
    1942:	10 e0       	ldi	r17, 0x00	; 0
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	4e 81       	ldd	r20, Y+6	; 0x06
    194a:	5f 81       	ldd	r21, Y+7	; 0x07
    194c:	68 85       	ldd	r22, Y+8	; 0x08
    194e:	79 85       	ldd	r23, Y+9	; 0x09
    1950:	2a d4       	rcall	.+2132   	; 0x21a6 <matchCommand>
    1952:	88 23       	and	r24, r24
    1954:	79 f1       	breq	.+94     	; 0x19b4 <SCPI_Parse+0x162>
            context->param_list.cmd = cmd;
    1956:	d2 01       	movw	r26, r4
    1958:	19 96       	adiw	r26, 0x09	; 9
    195a:	bc 92       	st	X, r11
    195c:	ae 92       	st	-X, r10
    195e:	18 97       	sbiw	r26, 0x08	; 8

            composeCompoundCommand(&cmd_prev, &state->programHeader);

            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {

                context->param_list.lex_state.buffer = state->programData.ptr;
    1960:	ec 85       	ldd	r30, Y+12	; 0x0c
    1962:	fd 85       	ldd	r31, Y+13	; 0x0d
    1964:	86 81       	ldd	r24, Z+6	; 0x06
    1966:	97 81       	ldd	r25, Z+7	; 0x07
    1968:	1b 96       	adiw	r26, 0x0b	; 11
    196a:	9c 93       	st	X, r25
    196c:	8e 93       	st	-X, r24
    196e:	1a 97       	sbiw	r26, 0x0a	; 10
                context->param_list.lex_state.pos = context->param_list.lex_state.buffer;
    1970:	1d 96       	adiw	r26, 0x0d	; 13
    1972:	9c 93       	st	X, r25
    1974:	8e 93       	st	-X, r24
    1976:	1c 97       	sbiw	r26, 0x0c	; 12
                context->param_list.lex_state.len = state->programData.len;
    1978:	80 85       	ldd	r24, Z+8	; 0x08
    197a:	91 85       	ldd	r25, Z+9	; 0x09
    197c:	1f 96       	adiw	r26, 0x0f	; 15
    197e:	9c 93       	st	X, r25
    1980:	8e 93       	st	-X, r24
    1982:	1e 97       	sbiw	r26, 0x0e	; 14
                context->param_list.cmd_raw.data = state->programHeader.ptr;
    1984:	81 81       	ldd	r24, Z+1	; 0x01
    1986:	92 81       	ldd	r25, Z+2	; 0x02
    1988:	55 96       	adiw	r26, 0x15	; 21
    198a:	9c 93       	st	X, r25
    198c:	8e 93       	st	-X, r24
    198e:	54 97       	sbiw	r26, 0x14	; 20
                context->param_list.cmd_raw.position = 0;
    1990:	53 96       	adiw	r26, 0x13	; 19
    1992:	1c 92       	st	X, r1
    1994:	1e 92       	st	-X, r1
    1996:	52 97       	sbiw	r26, 0x12	; 18
                context->param_list.cmd_raw.length = state->programHeader.len;
    1998:	83 81       	ldd	r24, Z+3	; 0x03
    199a:	94 81       	ldd	r25, Z+4	; 0x04
    199c:	51 96       	adiw	r26, 0x11	; 17
    199e:	9c 93       	st	X, r25
    19a0:	8e 93       	st	-X, r24
    19a2:	50 97       	sbiw	r26, 0x10	; 16
 * Conditionaly write ";"
 * @param context
 * @return number of characters written
 */
static size_t writeSemicolon(scpi_t * context) {
    if (context->output_count > 0) {
    19a4:	58 96       	adiw	r26, 0x18	; 24
    19a6:	8d 91       	ld	r24, X+
    19a8:	9c 91       	ld	r25, X
    19aa:	59 97       	sbiw	r26, 0x19	; 25
    19ac:	18 16       	cp	r1, r24
    19ae:	19 06       	cpc	r1, r25
    19b0:	84 f0       	brlt	.+32     	; 0x19d2 <SCPI_Parse+0x180>
    19b2:	15 c0       	rjmp	.+42     	; 0x19de <SCPI_Parse+0x18c>
 */
static scpi_bool_t findCommandHeader(scpi_t * context, const char * header, int len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
    19b4:	d2 01       	movw	r26, r4
    19b6:	ad 90       	ld	r10, X+
    19b8:	bc 90       	ld	r11, X
    19ba:	a8 0c       	add	r10, r8
    19bc:	b9 1c       	adc	r11, r9
    19be:	f5 01       	movw	r30, r10
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	f8 e0       	ldi	r31, 0x08	; 8
    19c6:	8f 0e       	add	r8, r31
    19c8:	91 1c       	adc	r9, r1
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <SCPI_Parse+0x17e>
    19ce:	b5 cf       	rjmp	.-150    	; 0x193a <SCPI_Parse+0xe8>
    19d0:	9f c0       	rjmp	.+318    	; 0x1b10 <SCPI_Parse+0x2be>
 * @param context
 * @return number of characters written
 */
static size_t writeSemicolon(scpi_t * context) {
    if (context->output_count > 0) {
        return writeData(context, ";", 1);
    19d2:	41 e0       	ldi	r20, 0x01	; 1
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	61 e6       	ldi	r22, 0x61	; 97
    19d8:	71 e0       	ldi	r23, 0x01	; 1
    19da:	c2 01       	movw	r24, r4
    19dc:	83 db       	rcall	.-2298   	; 0x10e4 <writeData>
    scpi_bool_t result = TRUE;

    /* conditionaly write ; */
    writeSemicolon(context);

    context->cmd_error = FALSE;
    19de:	d2 01       	movw	r26, r4
    19e0:	5c 96       	adiw	r26, 0x1c	; 28
    19e2:	1c 92       	st	X, r1
    19e4:	5c 97       	sbiw	r26, 0x1c	; 28
    context->output_count = 0;
    19e6:	59 96       	adiw	r26, 0x19	; 25
    19e8:	1c 92       	st	X, r1
    19ea:	1e 92       	st	-X, r1
    19ec:	58 97       	sbiw	r26, 0x18	; 24
    context->input_count = 0;
    19ee:	5b 96       	adiw	r26, 0x1b	; 27
    19f0:	1c 92       	st	X, r1
    19f2:	1e 92       	st	-X, r1
    19f4:	5a 97       	sbiw	r26, 0x1a	; 26
    context->arbitrary_reminding = 0;
    19f6:	e9 89       	ldd	r30, Y+17	; 0x11
    19f8:	fa 89       	ldd	r31, Y+18	; 0x12
    19fa:	11 82       	std	Z+1, r1	; 0x01
    19fc:	10 82       	st	Z, r1

    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
    19fe:	d5 01       	movw	r26, r10
    1a00:	12 96       	adiw	r26, 0x02	; 2
    1a02:	ed 91       	ld	r30, X+
    1a04:	fc 91       	ld	r31, X
    1a06:	13 97       	sbiw	r26, 0x03	; 3
    1a08:	30 97       	sbiw	r30, 0x00	; 0
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <SCPI_Parse+0x1bc>
    1a0c:	8b c0       	rjmp	.+278    	; 0x1b24 <SCPI_Parse+0x2d2>
        if ((cmd->callback(context) != SCPI_RES_OK)) {
    1a0e:	c2 01       	movw	r24, r4
    1a10:	09 95       	icall
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	59 f0       	breq	.+22     	; 0x1a2c <SCPI_Parse+0x1da>
            if (!context->cmd_error) {
    1a16:	f2 01       	movw	r30, r4
    1a18:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a1a:	81 11       	cpse	r24, r1
    1a1c:	22 c0       	rjmp	.+68     	; 0x1a62 <SCPI_Parse+0x210>
                SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
    1a1e:	68 e3       	ldi	r22, 0x38	; 56
    1a20:	7f ef       	ldi	r23, 0xFF	; 255
    1a22:	c2 01       	movw	r24, r4
    1a24:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCPI_ErrorPush>
            }
            result = FALSE;
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	05 c0       	rjmp	.+10     	; 0x1a36 <SCPI_Parse+0x1e4>
        } else {
            if (context->cmd_error) {
    1a2c:	d2 01       	movw	r26, r4
    1a2e:	5c 96       	adiw	r26, 0x1c	; 28
    1a30:	8c 91       	ld	r24, X
    1a32:	b1 e0       	ldi	r27, 0x01	; 1
    1a34:	8b 27       	eor	r24, r27
            }
        }
    }

    /* set error if command callback did not read all parameters */
    if (state->pos < (state->buffer + state->len) && !context->cmd_error) {
    1a36:	f2 01       	movw	r30, r4
    1a38:	42 85       	ldd	r20, Z+10	; 0x0a
    1a3a:	53 85       	ldd	r21, Z+11	; 0x0b
    1a3c:	26 85       	ldd	r18, Z+14	; 0x0e
    1a3e:	37 85       	ldd	r19, Z+15	; 0x0f
    1a40:	24 0f       	add	r18, r20
    1a42:	35 1f       	adc	r19, r21
    1a44:	44 85       	ldd	r20, Z+12	; 0x0c
    1a46:	55 85       	ldd	r21, Z+13	; 0x0d
    1a48:	42 17       	cp	r20, r18
    1a4a:	53 07       	cpc	r21, r19
    1a4c:	58 f4       	brcc	.+22     	; 0x1a64 <SCPI_Parse+0x212>
    1a4e:	94 8d       	ldd	r25, Z+28	; 0x1c
    1a50:	91 11       	cpse	r25, r1
    1a52:	08 c0       	rjmp	.+16     	; 0x1a64 <SCPI_Parse+0x212>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
    1a54:	64 e9       	ldi	r22, 0x94	; 148
    1a56:	7f ef       	ldi	r23, 0xFF	; 255
    1a58:	c2 01       	movw	r24, r4
    1a5a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCPI_ErrorPush>
        result = FALSE;
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	01 c0       	rjmp	.+2      	; 0x1a64 <SCPI_Parse+0x212>
    if (cmd->callback != NULL) {
        if ((cmd->callback(context) != SCPI_RES_OK)) {
            if (!context->cmd_error) {
                SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
            }
            result = FALSE;
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	f8 89       	ldd	r31, Y+16	; 0x10
    1a66:	f8 23       	and	r31, r24
    1a68:	f8 8b       	std	Y+16, r31	; 0x10
                context->param_list.cmd_raw.data = state->programHeader.ptr;
                context->param_list.cmd_raw.position = 0;
                context->param_list.cmd_raw.length = state->programHeader.len;

                result &= processCommand(context);
                cmd_prev = state->programHeader;
    1a6a:	85 e0       	ldi	r24, 0x05	; 5
    1a6c:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a6e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a70:	de 01       	movw	r26, r28
    1a72:	11 96       	adiw	r26, 0x01	; 1
    1a74:	01 90       	ld	r0, Z+
    1a76:	0d 92       	st	X+, r0
    1a78:	8a 95       	dec	r24
    1a7a:	e1 f7       	brne	.-8      	; 0x1a74 <SCPI_Parse+0x222>
    1a7c:	17 c0       	rjmp	.+46     	; 0x1aac <SCPI_Parse+0x25a>
            } else {
                /* place undefined header with error */
                /* calculate length of errornouse header and trim \r\n */
                size_t r2 = r;
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
    1a7e:	a9 01       	movw	r20, r18
    1a80:	21 15       	cp	r18, r1
    1a82:	31 05       	cpc	r19, r1
    1a84:	59 f0       	breq	.+22     	; 0x1a9c <SCPI_Parse+0x24a>
    1a86:	9a 01       	movw	r18, r20
    1a88:	21 50       	subi	r18, 0x01	; 1
    1a8a:	31 09       	sbc	r19, r1
    1a8c:	82 91       	ld	r24, -Z
    1a8e:	8d 30       	cpi	r24, 0x0D	; 13
    1a90:	b1 f3       	breq	.-20     	; 0x1a7e <SCPI_Parse+0x22c>
    1a92:	8a 30       	cpi	r24, 0x0A	; 10
    1a94:	a1 f3       	breq	.-24     	; 0x1a7e <SCPI_Parse+0x22c>
    1a96:	9a 01       	movw	r18, r20
    1a98:	01 c0       	rjmp	.+2      	; 0x1a9c <SCPI_Parse+0x24a>
                result &= processCommand(context);
                cmd_prev = state->programHeader;
            } else {
                /* place undefined header with error */
                /* calculate length of errornouse header and trim \r\n */
                size_t r2 = r;
    1a9a:	93 01       	movw	r18, r6
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
                SCPI_ErrorPushEx(context, SCPI_ERROR_UNDEFINED_HEADER, data, r2);
    1a9c:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a9e:	5b 85       	ldd	r21, Y+11	; 0x0b
    1aa0:	6f e8       	ldi	r22, 0x8F	; 143
    1aa2:	7f ef       	ldi	r23, 0xFF	; 255
    1aa4:	c2 01       	movw	r24, r4
    1aa6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SCPI_ErrorPushEx>
                result = FALSE;
    1aaa:	18 8a       	std	Y+16, r1	; 0x10
            }
        }

        if (r < len) {
    1aac:	62 14       	cp	r6, r2
    1aae:	73 04       	cpc	r7, r3
    1ab0:	4c f4       	brge	.+18     	; 0x1ac4 <SCPI_Parse+0x272>
            data += r;
    1ab2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ab4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ab6:	86 0d       	add	r24, r6
    1ab8:	97 1d       	adc	r25, r7
    1aba:	9b 87       	std	Y+11, r25	; 0x0b
    1abc:	8a 87       	std	Y+10, r24	; 0x0a
            len -= r;
    1abe:	26 18       	sub	r2, r6
    1ac0:	37 08       	sbc	r3, r7
        } else {
            break;
        }

    }
    1ac2:	ff ce       	rjmp	.-514    	; 0x18c2 <SCPI_Parse+0x70>
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
    if (context->output_count > 0) {
    1ac4:	d2 01       	movw	r26, r4
    1ac6:	58 96       	adiw	r26, 0x18	; 24
    1ac8:	8d 91       	ld	r24, X+
    1aca:	9c 91       	ld	r25, X
    1acc:	59 97       	sbiw	r26, 0x19	; 25
    1ace:	18 16       	cp	r1, r24
    1ad0:	19 06       	cpc	r1, r25
    1ad2:	c4 f4       	brge	.+48     	; 0x1b04 <SCPI_Parse+0x2b2>
        size_t len;
#ifndef SCPI_LINE_ENDING
#error no termination character defined
#endif
        len = writeData(context, SCPI_LINE_ENDING, strlen(SCPI_LINE_ENDING));
    1ad4:	42 e0       	ldi	r20, 0x02	; 2
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	63 e6       	ldi	r22, 0x63	; 99
    1ada:	71 e0       	ldi	r23, 0x01	; 1
    1adc:	c2 01       	movw	r24, r4
    1ade:	02 db       	rcall	.-2556   	; 0x10e4 <writeData>
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
    if (context && context->interface && context->interface->flush) {
    1ae0:	d2 01       	movw	r26, r4
    1ae2:	56 96       	adiw	r26, 0x16	; 22
    1ae4:	ed 91       	ld	r30, X+
    1ae6:	fc 91       	ld	r31, X
    1ae8:	57 97       	sbiw	r26, 0x17	; 23
    1aea:	30 97       	sbiw	r30, 0x00	; 0
    1aec:	69 f0       	breq	.+26     	; 0x1b08 <SCPI_Parse+0x2b6>
    1aee:	06 80       	ldd	r0, Z+6	; 0x06
    1af0:	f7 81       	ldd	r31, Z+7	; 0x07
    1af2:	e0 2d       	mov	r30, r0
    1af4:	30 97       	sbiw	r30, 0x00	; 0
    1af6:	51 f0       	breq	.+20     	; 0x1b0c <SCPI_Parse+0x2ba>
        return context->interface->flush(context);
    1af8:	c2 01       	movw	r24, r4
    1afa:	09 95       	icall
    1afc:	88 89       	ldd	r24, Y+16	; 0x10
    1afe:	21 c0       	rjmp	.+66     	; 0x1b42 <SCPI_Parse+0x2f0>
    scpi_parser_state_t * state;
    int r;
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};

    if (context == NULL) {
        return FALSE;
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	1f c0       	rjmp	.+62     	; 0x1b42 <SCPI_Parse+0x2f0>
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
    if (context->output_count > 0) {
    1b04:	88 89       	ldd	r24, Y+16	; 0x10
    1b06:	1d c0       	rjmp	.+58     	; 0x1b42 <SCPI_Parse+0x2f0>
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
    if (context && context->interface && context->interface->flush) {
    1b08:	88 89       	ldd	r24, Y+16	; 0x10
    1b0a:	1b c0       	rjmp	.+54     	; 0x1b42 <SCPI_Parse+0x2f0>
    1b0c:	88 89       	ldd	r24, Y+16	; 0x10
    1b0e:	19 c0       	rjmp	.+50     	; 0x1b42 <SCPI_Parse+0x2f0>
                result &= processCommand(context);
                cmd_prev = state->programHeader;
            } else {
                /* place undefined header with error */
                /* calculate length of errornouse header and trim \r\n */
                size_t r2 = r;
    1b10:	a3 01       	movw	r20, r6
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
    1b12:	61 14       	cp	r6, r1
    1b14:	71 04       	cpc	r7, r1
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <SCPI_Parse+0x2c8>
    1b18:	c0 cf       	rjmp	.-128    	; 0x1a9a <SCPI_Parse+0x248>
    1b1a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b1c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b1e:	e6 0d       	add	r30, r6
    1b20:	f7 1d       	adc	r31, r7
    1b22:	b1 cf       	rjmp	.-158    	; 0x1a86 <SCPI_Parse+0x234>
            }
        }
    }

    /* set error if command callback did not read all parameters */
    if (state->pos < (state->buffer + state->len) && !context->cmd_error) {
    1b24:	f2 01       	movw	r30, r4
    1b26:	22 85       	ldd	r18, Z+10	; 0x0a
    1b28:	33 85       	ldd	r19, Z+11	; 0x0b
    1b2a:	86 85       	ldd	r24, Z+14	; 0x0e
    1b2c:	97 85       	ldd	r25, Z+15	; 0x0f
    1b2e:	82 0f       	add	r24, r18
    1b30:	93 1f       	adc	r25, r19
    1b32:	24 85       	ldd	r18, Z+12	; 0x0c
    1b34:	35 85       	ldd	r19, Z+13	; 0x0d
    1b36:	28 17       	cp	r18, r24
    1b38:	39 07       	cpc	r19, r25
    1b3a:	08 f4       	brcc	.+2      	; 0x1b3e <SCPI_Parse+0x2ec>
    1b3c:	8b cf       	rjmp	.-234    	; 0x1a54 <SCPI_Parse+0x202>
 * @param context
 */
static scpi_bool_t processCommand(scpi_t * context) {
    const scpi_command_t * cmd = context->param_list.cmd;
    lex_state_t * state = &context->param_list.lex_state;
    scpi_bool_t result = TRUE;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	91 cf       	rjmp	.-222    	; 0x1a64 <SCPI_Parse+0x212>

    /* conditionaly write new line */
    writeNewLine(context);

    return result;
}
    1b42:	62 96       	adiw	r28, 0x12	; 18
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	ff 90       	pop	r15
    1b58:	ef 90       	pop	r14
    1b5a:	df 90       	pop	r13
    1b5c:	cf 90       	pop	r12
    1b5e:	bf 90       	pop	r11
    1b60:	af 90       	pop	r10
    1b62:	9f 90       	pop	r9
    1b64:	8f 90       	pop	r8
    1b66:	7f 90       	pop	r7
    1b68:	6f 90       	pop	r6
    1b6a:	5f 90       	pop	r5
    1b6c:	4f 90       	pop	r4
    1b6e:	3f 90       	pop	r3
    1b70:	2f 90       	pop	r2
    1b72:	08 95       	ret

00001b74 <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return
 */
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
    1b74:	bf 92       	push	r11
    1b76:	cf 92       	push	r12
    1b78:	df 92       	push	r13
    1b7a:	ef 92       	push	r14
    1b7c:	ff 92       	push	r15
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	8c 01       	movw	r16, r24
    1b88:	ea 01       	movw	r28, r20
    scpi_bool_t result = TRUE;
    size_t totcmdlen = 0;
    int cmdlen = 0;

    if (len == 0) {
    1b8a:	20 97       	sbiw	r28, 0x00	; 0
    1b8c:	d1 f4       	brne	.+52     	; 0x1bc2 <SCPI_Input+0x4e>
        context->buffer.data[context->buffer.position] = 0;
    1b8e:	dc 01       	movw	r26, r24
    1b90:	16 96       	adiw	r26, 0x06	; 6
    1b92:	ed 91       	ld	r30, X+
    1b94:	fc 91       	ld	r31, X
    1b96:	17 97       	sbiw	r26, 0x07	; 7
    1b98:	14 96       	adiw	r26, 0x04	; 4
    1b9a:	8d 91       	ld	r24, X+
    1b9c:	9c 91       	ld	r25, X
    1b9e:	15 97       	sbiw	r26, 0x05	; 5
    1ba0:	e8 0f       	add	r30, r24
    1ba2:	f9 1f       	adc	r31, r25
    1ba4:	10 82       	st	Z, r1
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
    1ba6:	14 96       	adiw	r26, 0x04	; 4
    1ba8:	4d 91       	ld	r20, X+
    1baa:	5c 91       	ld	r21, X
    1bac:	15 97       	sbiw	r26, 0x05	; 5
    1bae:	16 96       	adiw	r26, 0x06	; 6
    1bb0:	6d 91       	ld	r22, X+
    1bb2:	7c 91       	ld	r23, X
    1bb4:	17 97       	sbiw	r26, 0x07	; 7
    1bb6:	c8 01       	movw	r24, r16
    1bb8:	4c de       	rcall	.-872    	; 0x1852 <SCPI_Parse>
        context->buffer.position = 0;
    1bba:	f8 01       	movw	r30, r16
    1bbc:	15 82       	std	Z+5, r1	; 0x05
    1bbe:	14 82       	std	Z+4, r1	; 0x04
    1bc0:	8f c0       	rjmp	.+286    	; 0x1ce0 <SCPI_Input+0x16c>
    } else {
        int buffer_free;

        buffer_free = context->buffer.length - context->buffer.position;
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	14 96       	adiw	r26, 0x04	; 4
    1bc6:	8d 91       	ld	r24, X+
    1bc8:	9c 91       	ld	r25, X
    1bca:	15 97       	sbiw	r26, 0x05	; 5
        if (len > (buffer_free - 1)) {
    1bcc:	12 96       	adiw	r26, 0x02	; 2
    1bce:	2d 91       	ld	r18, X+
    1bd0:	3c 91       	ld	r19, X
    1bd2:	13 97       	sbiw	r26, 0x03	; 3
    1bd4:	28 1b       	sub	r18, r24
    1bd6:	39 0b       	sbc	r19, r25
    1bd8:	21 50       	subi	r18, 0x01	; 1
    1bda:	31 09       	sbc	r19, r1
    1bdc:	24 17       	cp	r18, r20
    1bde:	35 07       	cpc	r19, r21
    1be0:	84 f4       	brge	.+32     	; 0x1c02 <SCPI_Input+0x8e>
            /* Input buffer overrun - invalidate buffer */
            context->buffer.position = 0;
    1be2:	15 96       	adiw	r26, 0x05	; 5
    1be4:	1c 92       	st	X, r1
    1be6:	1e 92       	st	-X, r1
    1be8:	14 97       	sbiw	r26, 0x04	; 4
            context->buffer.data[context->buffer.position] = 0;
    1bea:	16 96       	adiw	r26, 0x06	; 6
    1bec:	ed 91       	ld	r30, X+
    1bee:	fc 91       	ld	r31, X
    1bf0:	17 97       	sbiw	r26, 0x07	; 7
    1bf2:	10 82       	st	Z, r1
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
    1bf4:	65 e9       	ldi	r22, 0x95	; 149
    1bf6:	7e ef       	ldi	r23, 0xFE	; 254
    1bf8:	c8 01       	movw	r24, r16
    1bfa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SCPI_ErrorPush>
            return FALSE;
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	6f c0       	rjmp	.+222    	; 0x1ce0 <SCPI_Input+0x16c>
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
    1c02:	f8 01       	movw	r30, r16
    1c04:	26 81       	ldd	r18, Z+6	; 0x06
    1c06:	37 81       	ldd	r19, Z+7	; 0x07
    1c08:	82 0f       	add	r24, r18
    1c0a:	93 1f       	adc	r25, r19
    1c0c:	0e 94 82 21 	call	0x4304	; 0x4304 <memcpy>
        context->buffer.position += len;
    1c10:	d8 01       	movw	r26, r16
    1c12:	14 96       	adiw	r26, 0x04	; 4
    1c14:	8d 91       	ld	r24, X+
    1c16:	9c 91       	ld	r25, X
    1c18:	15 97       	sbiw	r26, 0x05	; 5
    1c1a:	c8 0f       	add	r28, r24
    1c1c:	d9 1f       	adc	r29, r25
    1c1e:	15 96       	adiw	r26, 0x05	; 5
    1c20:	dc 93       	st	X, r29
    1c22:	ce 93       	st	-X, r28
    1c24:	14 97       	sbiw	r26, 0x04	; 4
        context->buffer.data[context->buffer.position] = 0;
    1c26:	16 96       	adiw	r26, 0x06	; 6
    1c28:	8d 91       	ld	r24, X+
    1c2a:	9c 91       	ld	r25, X
    1c2c:	17 97       	sbiw	r26, 0x07	; 7
    1c2e:	c8 0f       	add	r28, r24
    1c30:	d9 1f       	adc	r29, r25
    1c32:	18 82       	st	Y, r1
 * @param len - length of data
 * @return
 */
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
    scpi_bool_t result = TRUE;
    size_t totcmdlen = 0;
    1c34:	c0 e0       	ldi	r28, 0x00	; 0
    1c36:	d0 e0       	ldi	r29, 0x00	; 0
 * @param data - data to process
 * @param len - length of data
 * @return
 */
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
    scpi_bool_t result = TRUE;
    1c38:	bb 24       	eor	r11, r11
    1c3a:	b3 94       	inc	r11
        context->buffer.position += len;
        context->buffer.data[context->buffer.position] = 0;


        while (1) {
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
    1c3c:	68 01       	movw	r12, r16
    1c3e:	bf e3       	ldi	r27, 0x3F	; 63
    1c40:	cb 0e       	add	r12, r27
    1c42:	d1 1c       	adc	r13, r1
            totcmdlen += cmdlen;

            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
    1c44:	78 01       	movw	r14, r16
    1c46:	eb e4       	ldi	r30, 0x4B	; 75
    1c48:	ee 0e       	add	r14, r30
    1c4a:	f1 1c       	adc	r15, r1
        context->buffer.position += len;
        context->buffer.data[context->buffer.position] = 0;


        while (1) {
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
    1c4c:	d8 01       	movw	r26, r16
    1c4e:	14 96       	adiw	r26, 0x04	; 4
    1c50:	4d 91       	ld	r20, X+
    1c52:	5c 91       	ld	r21, X
    1c54:	15 97       	sbiw	r26, 0x05	; 5
    1c56:	4c 1b       	sub	r20, r28
    1c58:	5d 0b       	sbc	r21, r29
    1c5a:	16 96       	adiw	r26, 0x06	; 6
    1c5c:	6d 91       	ld	r22, X+
    1c5e:	7c 91       	ld	r23, X
    1c60:	17 97       	sbiw	r26, 0x07	; 7
    1c62:	6c 0f       	add	r22, r28
    1c64:	7d 1f       	adc	r23, r29
    1c66:	c6 01       	movw	r24, r12
    1c68:	53 dd       	rcall	.-1370   	; 0x1710 <scpiParser_detectProgramMessageUnit>
            totcmdlen += cmdlen;
    1c6a:	c8 0f       	add	r28, r24
    1c6c:	d9 1f       	adc	r29, r25

            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
    1c6e:	f7 01       	movw	r30, r14
    1c70:	90 81       	ld	r25, Z
    1c72:	91 30       	cpi	r25, 0x01	; 1
    1c74:	19 f5       	brne	.+70     	; 0x1cbc <SCPI_Input+0x148>
                result = SCPI_Parse(context, context->buffer.data, totcmdlen);
    1c76:	d8 01       	movw	r26, r16
    1c78:	16 96       	adiw	r26, 0x06	; 6
    1c7a:	6d 91       	ld	r22, X+
    1c7c:	7c 91       	ld	r23, X
    1c7e:	17 97       	sbiw	r26, 0x07	; 7
    1c80:	ae 01       	movw	r20, r28
    1c82:	c8 01       	movw	r24, r16
    1c84:	e6 dd       	rcall	.-1076   	; 0x1852 <SCPI_Parse>
    1c86:	b8 2e       	mov	r11, r24
                memmove(context->buffer.data, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
    1c88:	f8 01       	movw	r30, r16
    1c8a:	86 81       	ldd	r24, Z+6	; 0x06
    1c8c:	97 81       	ldd	r25, Z+7	; 0x07
    1c8e:	44 81       	ldd	r20, Z+4	; 0x04
    1c90:	55 81       	ldd	r21, Z+5	; 0x05
    1c92:	4c 1b       	sub	r20, r28
    1c94:	5d 0b       	sbc	r21, r29
    1c96:	bc 01       	movw	r22, r24
    1c98:	6c 0f       	add	r22, r28
    1c9a:	7d 1f       	adc	r23, r29
    1c9c:	0e 94 8b 21 	call	0x4316	; 0x4316 <memmove>
                context->buffer.position -= totcmdlen;
    1ca0:	d8 01       	movw	r26, r16
    1ca2:	14 96       	adiw	r26, 0x04	; 4
    1ca4:	8d 91       	ld	r24, X+
    1ca6:	9c 91       	ld	r25, X
    1ca8:	15 97       	sbiw	r26, 0x05	; 5
    1caa:	8c 1b       	sub	r24, r28
    1cac:	9d 0b       	sbc	r25, r29
    1cae:	15 96       	adiw	r26, 0x05	; 5
    1cb0:	9c 93       	st	X, r25
    1cb2:	8e 93       	st	-X, r24
    1cb4:	14 97       	sbiw	r26, 0x04	; 4
                totcmdlen = 0;
    1cb6:	c0 e0       	ldi	r28, 0x00	; 0
    1cb8:	d0 e0       	ldi	r29, 0x00	; 0
    1cba:	c8 cf       	rjmp	.-112    	; 0x1c4c <SCPI_Input+0xd8>
            } else {
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	87 ad       	ldd	r24, Z+63	; 0x3f
    1cc0:	8a 31       	cpi	r24, 0x1A	; 26
    1cc2:	11 f4       	brne	.+4      	; 0x1cc8 <SCPI_Input+0x154>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
    1cc4:	99 23       	and	r25, r25
    1cc6:	59 f0       	breq	.+22     	; 0x1cde <SCPI_Input+0x16a>
                if (totcmdlen >= context->buffer.position) break;
    1cc8:	d8 01       	movw	r26, r16
    1cca:	14 96       	adiw	r26, 0x04	; 4
    1ccc:	8d 91       	ld	r24, X+
    1cce:	9c 91       	ld	r25, X
    1cd0:	15 97       	sbiw	r26, 0x05	; 5
    1cd2:	c8 17       	cp	r28, r24
    1cd4:	d9 07       	cpc	r29, r25
    1cd6:	08 f4       	brcc	.+2      	; 0x1cda <SCPI_Input+0x166>
    1cd8:	b9 cf       	rjmp	.-142    	; 0x1c4c <SCPI_Input+0xd8>
    1cda:	8b 2d       	mov	r24, r11
    1cdc:	01 c0       	rjmp	.+2      	; 0x1ce0 <SCPI_Input+0x16c>
    1cde:	8b 2d       	mov	r24, r11
            }
        }
    }

    return result;
}
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	ff 90       	pop	r15
    1cea:	ef 90       	pop	r14
    1cec:	df 90       	pop	r13
    1cee:	cf 90       	pop	r12
    1cf0:	bf 90       	pop	r11
    1cf2:	08 95       	ret

00001cf4 <patternSeparatorShortPos>:
        if (!isspace((unsigned char) cmd[i])) {
            return i;
        }
    }
    return len;
}
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	fc 01       	movw	r30, r24
    1d02:	7b 01       	movw	r14, r22
    1d04:	67 2b       	or	r22, r23
    1d06:	e1 f0       	breq	.+56     	; 0x1d40 <patternSeparatorShortPos+0x4c>
    1d08:	80 81       	ld	r24, Z
    1d0a:	88 23       	and	r24, r24
    1d0c:	a9 f0       	breq	.+42     	; 0x1d38 <patternSeparatorShortPos+0x44>
    1d0e:	8f 01       	movw	r16, r30
    1d10:	0f 5f       	subi	r16, 0xFF	; 255
    1d12:	1f 4f       	sbci	r17, 0xFF	; 255
    1d14:	c0 e0       	ldi	r28, 0x00	; 0
    1d16:	d0 e0       	ldi	r29, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 61 21 	call	0x42c2	; 0x42c2 <islower>
    1d1e:	89 2b       	or	r24, r25
    1d20:	71 f4       	brne	.+28     	; 0x1d3e <patternSeparatorShortPos+0x4a>
    1d22:	21 96       	adiw	r28, 0x01	; 1
    1d24:	ec 16       	cp	r14, r28
    1d26:	fd 06       	cpc	r15, r29
    1d28:	59 f0       	breq	.+22     	; 0x1d40 <patternSeparatorShortPos+0x4c>
    1d2a:	f8 01       	movw	r30, r16
    1d2c:	81 91       	ld	r24, Z+
    1d2e:	8f 01       	movw	r16, r30
    1d30:	81 11       	cpse	r24, r1
    1d32:	f2 cf       	rjmp	.-28     	; 0x1d18 <patternSeparatorShortPos+0x24>
    1d34:	7e 01       	movw	r14, r28
    1d36:	04 c0       	rjmp	.+8      	; 0x1d40 <patternSeparatorShortPos+0x4c>
    1d38:	e1 2c       	mov	r14, r1
    1d3a:	f1 2c       	mov	r15, r1
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <patternSeparatorShortPos+0x4c>
    1d3e:	7e 01       	movw	r14, r28
    1d40:	c7 01       	movw	r24, r14
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	ff 90       	pop	r15
    1d4c:	ef 90       	pop	r14
    1d4e:	08 95       	ret

00001d50 <strnpbrk>:
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	68 0f       	add	r22, r24
    1d5e:	79 1f       	adc	r23, r25
    1d60:	86 17       	cp	r24, r22
    1d62:	97 07       	cpc	r25, r23
    1d64:	c1 f1       	breq	.+112    	; 0x1dd6 <strnpbrk+0x86>
    1d66:	ec 01       	movw	r28, r24
    1d68:	21 96       	adiw	r28, 0x01	; 1
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	00 81       	ld	r16, Z
    1d6e:	00 2e       	mov	r0, r16
    1d70:	00 0c       	add	r0, r0
    1d72:	11 0b       	sbc	r17, r17
    1d74:	22 0b       	sbc	r18, r18
    1d76:	33 0b       	sbc	r19, r19
    1d78:	01 15       	cp	r16, r1
    1d7a:	11 05       	cpc	r17, r1
    1d7c:	21 05       	cpc	r18, r1
    1d7e:	31 05       	cpc	r19, r1
    1d80:	49 f4       	brne	.+18     	; 0x1d94 <strnpbrk+0x44>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	2f c0       	rjmp	.+94     	; 0x1de6 <strnpbrk+0x96>
    1d88:	80 17       	cp	r24, r16
    1d8a:	91 07       	cpc	r25, r17
    1d8c:	a2 07       	cpc	r26, r18
    1d8e:	b3 07       	cpc	r27, r19
    1d90:	39 f4       	brne	.+14     	; 0x1da0 <strnpbrk+0x50>
    1d92:	24 c0       	rjmp	.+72     	; 0x1ddc <strnpbrk+0x8c>
    1d94:	7e 01       	movw	r14, r28
    1d96:	f1 e0       	ldi	r31, 0x01	; 1
    1d98:	ef 1a       	sub	r14, r31
    1d9a:	f1 08       	sbc	r15, r1
    1d9c:	e4 2f       	mov	r30, r20
    1d9e:	f5 2f       	mov	r31, r21
    1da0:	81 91       	ld	r24, Z+
    1da2:	08 2e       	mov	r0, r24
    1da4:	00 0c       	add	r0, r0
    1da6:	99 0b       	sbc	r25, r25
    1da8:	aa 0b       	sbc	r26, r26
    1daa:	bb 0b       	sbc	r27, r27
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	a1 05       	cpc	r26, r1
    1db0:	b1 05       	cpc	r27, r1
    1db2:	51 f7       	brne	.-44     	; 0x1d88 <strnpbrk+0x38>
    1db4:	c6 17       	cp	r28, r22
    1db6:	d7 07       	cpc	r29, r23
    1db8:	a1 f0       	breq	.+40     	; 0x1de2 <strnpbrk+0x92>
    1dba:	09 91       	ld	r16, Y+
    1dbc:	00 2e       	mov	r0, r16
    1dbe:	00 0c       	add	r0, r0
    1dc0:	11 0b       	sbc	r17, r17
    1dc2:	22 0b       	sbc	r18, r18
    1dc4:	33 0b       	sbc	r19, r19
    1dc6:	01 15       	cp	r16, r1
    1dc8:	11 05       	cpc	r17, r1
    1dca:	21 05       	cpc	r18, r1
    1dcc:	31 05       	cpc	r19, r1
    1dce:	11 f7       	brne	.-60     	; 0x1d94 <strnpbrk+0x44>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	08 c0       	rjmp	.+16     	; 0x1de6 <strnpbrk+0x96>
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	05 c0       	rjmp	.+10     	; 0x1de6 <strnpbrk+0x96>
    1ddc:	8e 2d       	mov	r24, r14
    1dde:	9f 2d       	mov	r25, r15
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <strnpbrk+0x96>
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	08 95       	ret

00001df4 <strBaseToInt32>:
    1df4:	ef 92       	push	r14
    1df6:	ff 92       	push	r15
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <strBaseToInt32+0xe>
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	8c 01       	movw	r16, r24
    1e08:	7b 01       	movw	r14, r22
    1e0a:	04 2e       	mov	r0, r20
    1e0c:	00 0c       	add	r0, r0
    1e0e:	55 0b       	sbc	r21, r21
    1e10:	be 01       	movw	r22, r28
    1e12:	6f 5f       	subi	r22, 0xFF	; 255
    1e14:	7f 4f       	sbci	r23, 0xFF	; 255
    1e16:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <strtol>
    1e1a:	f7 01       	movw	r30, r14
    1e1c:	60 83       	st	Z, r22
    1e1e:	71 83       	std	Z+1, r23	; 0x01
    1e20:	82 83       	std	Z+2, r24	; 0x02
    1e22:	93 83       	std	Z+3, r25	; 0x03
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	9a 81       	ldd	r25, Y+2	; 0x02
    1e28:	80 1b       	sub	r24, r16
    1e2a:	91 0b       	sbc	r25, r17
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	ff 90       	pop	r15
    1e3a:	ef 90       	pop	r14
    1e3c:	08 95       	ret

00001e3e <strBaseToUInt32>:
    1e3e:	ef 92       	push	r14
    1e40:	ff 92       	push	r15
    1e42:	0f 93       	push	r16
    1e44:	1f 93       	push	r17
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <strBaseToUInt32+0xe>
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	8c 01       	movw	r16, r24
    1e52:	7b 01       	movw	r14, r22
    1e54:	04 2e       	mov	r0, r20
    1e56:	00 0c       	add	r0, r0
    1e58:	55 0b       	sbc	r21, r21
    1e5a:	be 01       	movw	r22, r28
    1e5c:	6f 5f       	subi	r22, 0xFF	; 255
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	0e 94 49 20 	call	0x4092	; 0x4092 <strtoul>
    1e64:	f7 01       	movw	r30, r14
    1e66:	60 83       	st	Z, r22
    1e68:	71 83       	std	Z+1, r23	; 0x01
    1e6a:	82 83       	std	Z+2, r24	; 0x02
    1e6c:	93 83       	std	Z+3, r25	; 0x03
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	9a 81       	ldd	r25, Y+2	; 0x02
    1e72:	80 1b       	sub	r24, r16
    1e74:	91 0b       	sbc	r25, r17
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	ff 90       	pop	r15
    1e84:	ef 90       	pop	r14
    1e86:	08 95       	ret

00001e88 <composeCompoundCommand>:
 * @param prev pointer to previous command
 * @param current pointer of current command
 *
 * prev and current should be in the same memory buffer
 */
scpi_bool_t composeCompoundCommand(const scpi_token_t * prev, scpi_token_t * current) {
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	ec 01       	movw	r28, r24
    size_t i;

    /* Invalid input */
    if (current == NULL || current->ptr == NULL || current->len == 0)
    1e92:	61 15       	cp	r22, r1
    1e94:	71 05       	cpc	r23, r1
    1e96:	81 f1       	breq	.+96     	; 0x1ef8 <composeCompoundCommand+0x70>
    1e98:	fb 01       	movw	r30, r22
    1e9a:	a1 81       	ldd	r26, Z+1	; 0x01
    1e9c:	b2 81       	ldd	r27, Z+2	; 0x02
    1e9e:	10 97       	sbiw	r26, 0x00	; 0
    1ea0:	69 f1       	breq	.+90     	; 0x1efc <composeCompoundCommand+0x74>
    1ea2:	23 81       	ldd	r18, Z+3	; 0x03
    1ea4:	34 81       	ldd	r19, Z+4	; 0x04
    1ea6:	21 15       	cp	r18, r1
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	51 f1       	breq	.+84     	; 0x1f00 <composeCompoundCommand+0x78>
        return FALSE;

    /* no previous command - nothing to do*/
    if (prev->ptr == NULL || prev->len == 0)
    1eac:	e9 81       	ldd	r30, Y+1	; 0x01
    1eae:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb0:	30 97       	sbiw	r30, 0x00	; 0
    1eb2:	41 f1       	breq	.+80     	; 0x1f04 <composeCompoundCommand+0x7c>
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	31 f1       	breq	.+76     	; 0x1f08 <composeCompoundCommand+0x80>
        return TRUE;

    /* Common command or command root - nothing to do */
    if (current->ptr[0] == '*' || current->ptr[0] == ':')
    1ebc:	4c 91       	ld	r20, X
    1ebe:	4f 7e       	andi	r20, 0xEF	; 239
    1ec0:	4a 32       	cpi	r20, 0x2A	; 42
    1ec2:	21 f1       	breq	.+72     	; 0x1f0c <composeCompoundCommand+0x84>
        return TRUE;

    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
    1ec4:	40 81       	ld	r20, Z
    1ec6:	4a 32       	cpi	r20, 0x2A	; 42
    1ec8:	19 f1       	breq	.+70     	; 0x1f10 <composeCompoundCommand+0x88>
        return TRUE;

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	19 f1       	breq	.+70     	; 0x1f14 <composeCompoundCommand+0x8c>
        if (prev->ptr[i - 1] == ':') {
    1ece:	ac 01       	movw	r20, r24
    1ed0:	41 50       	subi	r20, 0x01	; 1
    1ed2:	51 09       	sbc	r21, r1
    1ed4:	e4 0f       	add	r30, r20
    1ed6:	f5 1f       	adc	r31, r21
    1ed8:	10 81       	ld	r17, Z
    1eda:	1a 33       	cpi	r17, 0x3A	; 58
    1edc:	e9 f0       	breq	.+58     	; 0x1f18 <composeCompoundCommand+0x90>
    1ede:	07 c0       	rjmp	.+14     	; 0x1eee <composeCompoundCommand+0x66>
    1ee0:	8a 01       	movw	r16, r20
    1ee2:	01 50       	subi	r16, 0x01	; 1
    1ee4:	11 09       	sbc	r17, r1
    1ee6:	92 91       	ld	r25, -Z
    1ee8:	9a 33       	cpi	r25, 0x3A	; 58
    1eea:	b9 f0       	breq	.+46     	; 0x1f1a <composeCompoundCommand+0x92>
    1eec:	a8 01       	movw	r20, r16
    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
        return TRUE;

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
    1eee:	41 15       	cp	r20, r1
    1ef0:	51 05       	cpc	r21, r1
    1ef2:	b1 f7       	brne	.-20     	; 0x1ee0 <composeCompoundCommand+0x58>
        }
    }

    /* Previous command was simple command - nothing to do*/
    if (i == 0)
        return TRUE;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	20 c0       	rjmp	.+64     	; 0x1f38 <composeCompoundCommand+0xb0>
scpi_bool_t composeCompoundCommand(const scpi_token_t * prev, scpi_token_t * current) {
    size_t i;

    /* Invalid input */
    if (current == NULL || current->ptr == NULL || current->len == 0)
        return FALSE;
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	1e c0       	rjmp	.+60     	; 0x1f38 <composeCompoundCommand+0xb0>
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	1c c0       	rjmp	.+56     	; 0x1f38 <composeCompoundCommand+0xb0>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	1a c0       	rjmp	.+52     	; 0x1f38 <composeCompoundCommand+0xb0>

    /* no previous command - nothing to do*/
    if (prev->ptr == NULL || prev->len == 0)
        return TRUE;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	18 c0       	rjmp	.+48     	; 0x1f38 <composeCompoundCommand+0xb0>
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	16 c0       	rjmp	.+44     	; 0x1f38 <composeCompoundCommand+0xb0>

    /* Common command or command root - nothing to do */
    if (current->ptr[0] == '*' || current->ptr[0] == ':')
        return TRUE;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	14 c0       	rjmp	.+40     	; 0x1f38 <composeCompoundCommand+0xb0>

    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
        return TRUE;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	12 c0       	rjmp	.+36     	; 0x1f38 <composeCompoundCommand+0xb0>
        }
    }

    /* Previous command was simple command - nothing to do*/
    if (i == 0)
        return TRUE;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	10 c0       	rjmp	.+32     	; 0x1f38 <composeCompoundCommand+0xb0>
    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
        return TRUE;

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
    1f18:	ac 01       	movw	r20, r24
    1f1a:	fb 01       	movw	r30, r22

    /* Previous command was simple command - nothing to do*/
    if (i == 0)
        return TRUE;

    current->ptr -= i;
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	84 1b       	sub	r24, r20
    1f20:	95 0b       	sbc	r25, r21
    1f22:	92 83       	std	Z+2, r25	; 0x02
    1f24:	81 83       	std	Z+1, r24	; 0x01
    current->len += i;
    1f26:	24 0f       	add	r18, r20
    1f28:	35 1f       	adc	r19, r21
    1f2a:	34 83       	std	Z+4, r19	; 0x04
    1f2c:	23 83       	std	Z+3, r18	; 0x03
    memmove(current->ptr, prev->ptr, i);
    1f2e:	69 81       	ldd	r22, Y+1	; 0x01
    1f30:	7a 81       	ldd	r23, Y+2	; 0x02
    1f32:	0e 94 8b 21 	call	0x4316	; 0x4316 <memmove>
    return TRUE;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
}
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	08 95       	ret

00001f42 <BSD_strnlen>:
/*-
 * Copyright (c) 2009 David Schultz <das@FreeBSD.org>
 * All rights reserved.
 */
size_t
BSD_strnlen(const char *s, size_t maxlen) {
    1f42:	fc 01       	movw	r30, r24
    size_t len;

    for (len = 0; len < maxlen; len++, s++) {
    1f44:	61 15       	cp	r22, r1
    1f46:	71 05       	cpc	r23, r1
    1f48:	a1 f0       	breq	.+40     	; 0x1f72 <BSD_strnlen+0x30>
        if (!*s)
    1f4a:	80 81       	ld	r24, Z
    1f4c:	88 23       	and	r24, r24
    1f4e:	69 f0       	breq	.+26     	; 0x1f6a <BSD_strnlen+0x28>
    1f50:	31 96       	adiw	r30, 0x01	; 1
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	03 c0       	rjmp	.+6      	; 0x1f5e <BSD_strnlen+0x1c>
    1f58:	91 91       	ld	r25, Z+
    1f5a:	99 23       	and	r25, r25
    1f5c:	49 f0       	breq	.+18     	; 0x1f70 <BSD_strnlen+0x2e>
 */
size_t
BSD_strnlen(const char *s, size_t maxlen) {
    size_t len;

    for (len = 0; len < maxlen; len++, s++) {
    1f5e:	2f 5f       	subi	r18, 0xFF	; 255
    1f60:	3f 4f       	sbci	r19, 0xFF	; 255
    1f62:	62 17       	cp	r22, r18
    1f64:	73 07       	cpc	r23, r19
    1f66:	c1 f7       	brne	.-16     	; 0x1f58 <BSD_strnlen+0x16>
    1f68:	04 c0       	rjmp	.+8      	; 0x1f72 <BSD_strnlen+0x30>
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	70 e0       	ldi	r23, 0x00	; 0
    1f6e:	01 c0       	rjmp	.+2      	; 0x1f72 <BSD_strnlen+0x30>
    1f70:	b9 01       	movw	r22, r18
        if (!*s)
            break;
    }
    return (len);
}
    1f72:	cb 01       	movw	r24, r22
    1f74:	08 95       	ret

00001f76 <OUR_strncasecmp>:
#endif

#if !HAVE_STRNCASECMP && !HAVE_STRNICMP

int OUR_strncasecmp(const char *s1, const char *s2, size_t n) {
    1f76:	af 92       	push	r10
    1f78:	bf 92       	push	r11
    1f7a:	cf 92       	push	r12
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	1f 93       	push	r17
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
    1f88:	ea 01       	movw	r28, r20
    unsigned char c1, c2;

    for (; n != 0; n--) {
    1f8a:	20 97       	sbiw	r28, 0x00	; 0
    1f8c:	01 f1       	breq	.+64     	; 0x1fce <OUR_strncasecmp+0x58>
    1f8e:	a8 2e       	mov	r10, r24
    1f90:	b9 2e       	mov	r11, r25
    1f92:	c6 2e       	mov	r12, r22
    1f94:	d7 2e       	mov	r13, r23
        c1 = tolower((unsigned char) *s1++);
    1f96:	f5 01       	movw	r30, r10
    1f98:	81 91       	ld	r24, Z+
    1f9a:	5f 01       	movw	r10, r30
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <tolower>
    1fa2:	7c 01       	movw	r14, r24
        c2 = tolower((unsigned char) *s2++);
    1fa4:	f6 01       	movw	r30, r12
    1fa6:	81 91       	ld	r24, Z+
    1fa8:	6f 01       	movw	r12, r30
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <tolower>
        if (c1 != c2) {
    1fb0:	e8 16       	cp	r14, r24
    1fb2:	31 f0       	breq	.+12     	; 0x1fc0 <OUR_strncasecmp+0x4a>
            return c1 - c2;
    1fb4:	ff 24       	eor	r15, r15
    1fb6:	97 01       	movw	r18, r14
    1fb8:	28 1b       	sub	r18, r24
    1fba:	31 09       	sbc	r19, r1
    1fbc:	c9 01       	movw	r24, r18
    1fbe:	0c c0       	rjmp	.+24     	; 0x1fd8 <OUR_strncasecmp+0x62>
        }
        if (c1 == '\0') {
    1fc0:	ee 20       	and	r14, r14
    1fc2:	41 f0       	breq	.+16     	; 0x1fd4 <OUR_strncasecmp+0x5e>
#if !HAVE_STRNCASECMP && !HAVE_STRNICMP

int OUR_strncasecmp(const char *s1, const char *s2, size_t n) {
    unsigned char c1, c2;

    for (; n != 0; n--) {
    1fc4:	21 97       	sbiw	r28, 0x01	; 1
    1fc6:	39 f7       	brne	.-50     	; 0x1f96 <OUR_strncasecmp+0x20>
        }
        if (c1 == '\0') {
            return 0;
        }
    }
    return 0;
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	05 c0       	rjmp	.+10     	; 0x1fd8 <OUR_strncasecmp+0x62>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <OUR_strncasecmp+0x62>
        c2 = tolower((unsigned char) *s2++);
        if (c1 != c2) {
            return c1 - c2;
        }
        if (c1 == '\0') {
            return 0;
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
        }
    }
    return 0;
}
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	1f 91       	pop	r17
    1fde:	ff 90       	pop	r15
    1fe0:	ef 90       	pop	r14
    1fe2:	df 90       	pop	r13
    1fe4:	cf 90       	pop	r12
    1fe6:	bf 90       	pop	r11
    1fe8:	af 90       	pop	r10
    1fea:	08 95       	ret

00001fec <compareStr>:
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
    if (len1 != len2) {
    1fec:	62 17       	cp	r22, r18
    1fee:	73 07       	cpc	r23, r19
    1ff0:	49 f4       	brne	.+18     	; 0x2004 <compareStr+0x18>
    1ff2:	9a 01       	movw	r18, r20
    1ff4:	ab 01       	movw	r20, r22
        return FALSE;
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len2) == 0) {
    1ff6:	b9 01       	movw	r22, r18
    1ff8:	be df       	rcall	.-132    	; 0x1f76 <OUR_strncasecmp>
    1ffa:	21 e0       	ldi	r18, 0x01	; 1
    1ffc:	89 2b       	or	r24, r25
    1ffe:	19 f0       	breq	.+6      	; 0x2006 <compareStr+0x1a>
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	01 c0       	rjmp	.+2      	; 0x2006 <compareStr+0x1a>
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
    if (len1 != len2) {
        return FALSE;
    2004:	20 e0       	ldi	r18, 0x00	; 0
    if (SCPIDEFINE_strncasecmp(str1, str2, len2) == 0) {
        return TRUE;
    }

    return FALSE;
}
    2006:	82 2f       	mov	r24, r18
    2008:	08 95       	ret

0000200a <compareStrAndNum>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if strings match
 */
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
    200a:	af 92       	push	r10
    200c:	bf 92       	push	r11
    200e:	cf 92       	push	r12
    2010:	df 92       	push	r13
    2012:	ef 92       	push	r14
    2014:	ff 92       	push	r15
    2016:	0f 93       	push	r16
    2018:	1f 93       	push	r17
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	00 d0       	rcall	.+0      	; 0x2020 <compareStrAndNum+0x16>
    2020:	00 d0       	rcall	.+0      	; 0x2022 <compareStrAndNum+0x18>
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    scpi_bool_t result = FALSE;
    size_t i;

    if (len2 < len1) {
    2026:	26 17       	cp	r18, r22
    2028:	37 07       	cpc	r19, r23
    202a:	08 f4       	brcc	.+2      	; 0x202e <compareStrAndNum+0x24>
    202c:	4c c0       	rjmp	.+152    	; 0x20c6 <compareStrAndNum+0xbc>
    202e:	69 01       	movw	r12, r18
    2030:	5a 01       	movw	r10, r20
    2032:	7b 01       	movw	r14, r22
        return FALSE;
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
    2034:	ab 01       	movw	r20, r22
    2036:	b5 01       	movw	r22, r10
    2038:	9e df       	rcall	.-196    	; 0x1f76 <OUR_strncasecmp>
    203a:	89 2b       	or	r24, r25
    203c:	09 f0       	breq	.+2      	; 0x2040 <compareStrAndNum+0x36>
    203e:	45 c0       	rjmp	.+138    	; 0x20ca <compareStrAndNum+0xc0>
        result = TRUE;

        if (num) {
    2040:	01 15       	cp	r16, r1
    2042:	11 05       	cpc	r17, r1
    2044:	b9 f4       	brne	.+46     	; 0x2074 <compareStrAndNum+0x6a>
                } else {
                    *num = tmpNum;
                }
            }
        } else {
            for (i = len1; i < len2; i++) {
    2046:	ec 14       	cp	r14, r12
    2048:	fd 04       	cpc	r15, r13
    204a:	08 f0       	brcs	.+2      	; 0x204e <compareStrAndNum+0x44>
    204c:	40 c0       	rjmp	.+128    	; 0x20ce <compareStrAndNum+0xc4>
                if (!isdigit((int) str2[i])) {
    204e:	f5 01       	movw	r30, r10
    2050:	ee 0d       	add	r30, r14
    2052:	ff 1d       	adc	r31, r15
    2054:	80 81       	ld	r24, Z
    2056:	08 2e       	mov	r0, r24
    2058:	00 0c       	add	r0, r0
    205a:	99 0b       	sbc	r25, r25
    205c:	c0 97       	sbiw	r24, 0x30	; 48
    205e:	0a 97       	sbiw	r24, 0x0a	; 10
    2060:	c0 f5       	brcc	.+112    	; 0x20d2 <compareStrAndNum+0xc8>
    2062:	8f ef       	ldi	r24, 0xFF	; 255
    2064:	e8 1a       	sub	r14, r24
    2066:	f8 0a       	sbc	r15, r24
    2068:	d5 01       	movw	r26, r10
    206a:	ae 0d       	add	r26, r14
    206c:	bf 1d       	adc	r27, r15
    206e:	ca 0c       	add	r12, r10
    2070:	db 1c       	adc	r13, r11
    2072:	24 c0       	rjmp	.+72     	; 0x20bc <compareStrAndNum+0xb2>

    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
        result = TRUE;

        if (num) {
            if (len1 == len2) {
    2074:	ce 14       	cp	r12, r14
    2076:	df 04       	cpc	r13, r15
    2078:	71 f1       	breq	.+92     	; 0x20d6 <compareStrAndNum+0xcc>
                /* *num = 1; */
            } else {
                int32_t tmpNum;
                i = len1 + strBaseToInt32(str2 + len1, &tmpNum, 10);
    207a:	4a e0       	ldi	r20, 0x0A	; 10
    207c:	be 01       	movw	r22, r28
    207e:	6f 5f       	subi	r22, 0xFF	; 255
    2080:	7f 4f       	sbci	r23, 0xFF	; 255
    2082:	c5 01       	movw	r24, r10
    2084:	8e 0d       	add	r24, r14
    2086:	9f 1d       	adc	r25, r15
    2088:	b5 de       	rcall	.-662    	; 0x1df4 <strBaseToInt32>
                if (i != len2) {
    208a:	8e 0d       	add	r24, r14
    208c:	9f 1d       	adc	r25, r15
    208e:	c8 16       	cp	r12, r24
    2090:	d9 06       	cpc	r13, r25
    2092:	59 f4       	brne	.+22     	; 0x20aa <compareStrAndNum+0xa0>
                    result = FALSE;
                } else {
                    *num = tmpNum;
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	9a 81       	ldd	r25, Y+2	; 0x02
    2098:	ab 81       	ldd	r26, Y+3	; 0x03
    209a:	bc 81       	ldd	r27, Y+4	; 0x04
    209c:	f8 01       	movw	r30, r16
    209e:	80 83       	st	Z, r24
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	a2 83       	std	Z+2, r26	; 0x02
    20a4:	b3 83       	std	Z+3, r27	; 0x03
    if (len2 < len1) {
        return FALSE;
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
        result = TRUE;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	19 c0       	rjmp	.+50     	; 0x20dc <compareStrAndNum+0xd2>
                /* *num = 1; */
            } else {
                int32_t tmpNum;
                i = len1 + strBaseToInt32(str2 + len1, &tmpNum, 10);
                if (i != len2) {
                    result = FALSE;
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	17 c0       	rjmp	.+46     	; 0x20dc <compareStrAndNum+0xd2>
                    *num = tmpNum;
                }
            }
        } else {
            for (i = len1; i < len2; i++) {
                if (!isdigit((int) str2[i])) {
    20ae:	ed 91       	ld	r30, X+
    20b0:	0e 2e       	mov	r0, r30
    20b2:	00 0c       	add	r0, r0
    20b4:	ff 0b       	sbc	r31, r31
    20b6:	f0 97       	sbiw	r30, 0x30	; 48
    20b8:	3a 97       	sbiw	r30, 0x0a	; 10
    20ba:	78 f4       	brcc	.+30     	; 0x20da <compareStrAndNum+0xd0>
                } else {
                    *num = tmpNum;
                }
            }
        } else {
            for (i = len1; i < len2; i++) {
    20bc:	ac 15       	cp	r26, r12
    20be:	bd 05       	cpc	r27, r13
    20c0:	b1 f7       	brne	.-20     	; 0x20ae <compareStrAndNum+0xa4>
    if (len2 < len1) {
        return FALSE;
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
        result = TRUE;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	0b c0       	rjmp	.+22     	; 0x20dc <compareStrAndNum+0xd2>
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
    scpi_bool_t result = FALSE;
    size_t i;

    if (len2 < len1) {
        return FALSE;
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	09 c0       	rjmp	.+18     	; 0x20dc <compareStrAndNum+0xd2>
 * @param str2
 * @param len2
 * @return TRUE if strings match
 */
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
    scpi_bool_t result = FALSE;
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	07 c0       	rjmp	.+14     	; 0x20dc <compareStrAndNum+0xd2>
    if (len2 < len1) {
        return FALSE;
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
        result = TRUE;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	05 c0       	rjmp	.+10     	; 0x20dc <compareStrAndNum+0xd2>
                }
            }
        } else {
            for (i = len1; i < len2; i++) {
                if (!isdigit((int) str2[i])) {
                    result = FALSE;
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	03 c0       	rjmp	.+6      	; 0x20dc <compareStrAndNum+0xd2>
    if (len2 < len1) {
        return FALSE;
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
        result = TRUE;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	01 c0       	rjmp	.+2      	; 0x20dc <compareStrAndNum+0xd2>
                }
            }
        } else {
            for (i = len1; i < len2; i++) {
                if (!isdigit((int) str2[i])) {
                    result = FALSE;
    20da:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
    }

    return result;
}
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	1f 91       	pop	r17
    20ea:	0f 91       	pop	r16
    20ec:	ff 90       	pop	r15
    20ee:	ef 90       	pop	r14
    20f0:	df 90       	pop	r13
    20f2:	cf 90       	pop	r12
    20f4:	bf 90       	pop	r11
    20f6:	af 90       	pop	r10
    20f8:	08 95       	ret

000020fa <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return
 */
scpi_bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len, int32_t * num) {
    20fa:	6f 92       	push	r6
    20fc:	7f 92       	push	r7
    20fe:	8f 92       	push	r8
    2100:	9f 92       	push	r9
    2102:	af 92       	push	r10
    2104:	bf 92       	push	r11
    2106:	cf 92       	push	r12
    2108:	df 92       	push	r13
    210a:	ef 92       	push	r14
    210c:	ff 92       	push	r15
    210e:	0f 93       	push	r16
    2110:	1f 93       	push	r17
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	7c 01       	movw	r14, r24
    2118:	eb 01       	movw	r28, r22
    211a:	6a 01       	movw	r12, r20
    211c:	59 01       	movw	r10, r18
    int pattern_sep_pos_short;

    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
    211e:	20 97       	sbiw	r28, 0x00	; 0
    2120:	f9 f0       	breq	.+62     	; 0x2160 <__stack+0x61>
    2122:	3b 01       	movw	r6, r22
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	68 1a       	sub	r6, r24
    2128:	71 08       	sbc	r7, r1
    212a:	f7 01       	movw	r30, r14
    212c:	e6 0d       	add	r30, r6
    212e:	f7 1d       	adc	r31, r7
    2130:	80 81       	ld	r24, Z
    2132:	83 32       	cpi	r24, 0x23	; 35
    2134:	a9 f4       	brne	.+42     	; 0x2160 <__stack+0x61>
        size_t new_pattern_len = pattern_len - 1;

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
    2136:	b3 01       	movw	r22, r6
    2138:	c7 01       	movw	r24, r14
    213a:	dc dd       	rcall	.-1096   	; 0x1cf4 <patternSeparatorShortPos>
    213c:	ec 01       	movw	r28, r24

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
    213e:	95 01       	movw	r18, r10
    2140:	a6 01       	movw	r20, r12
    2142:	b3 01       	movw	r22, r6
    2144:	c7 01       	movw	r24, r14
    2146:	61 df       	rcall	.-318    	; 0x200a <compareStrAndNum>
    2148:	81 11       	cpse	r24, r1
    214a:	06 c0       	rjmp	.+12     	; 0x2158 <__stack+0x59>
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
    214c:	95 01       	movw	r18, r10
    214e:	a6 01       	movw	r20, r12
    2150:	be 01       	movw	r22, r28
    2152:	c7 01       	movw	r24, r14
    2154:	5a df       	rcall	.-332    	; 0x200a <compareStrAndNum>
    2156:	02 c0       	rjmp	.+4      	; 0x215c <__stack+0x5d>
    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
        size_t new_pattern_len = pattern_len - 1;

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	81 70       	andi	r24, 0x01	; 1
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    215e:	14 c0       	rjmp	.+40     	; 0x2188 <__stack+0x89>
    2160:	be 01       	movw	r22, r28
    2162:	c7 01       	movw	r24, r14
    2164:	c7 dd       	rcall	.-1138   	; 0x1cf4 <patternSeparatorShortPos>
    2166:	4c 01       	movw	r8, r24

        return compareStr(pattern, pattern_len, str, str_len) ||
    2168:	95 01       	movw	r18, r10
    216a:	a6 01       	movw	r20, r12
    216c:	be 01       	movw	r22, r28
    216e:	c7 01       	movw	r24, r14
    2170:	3d df       	rcall	.-390    	; 0x1fec <compareStr>
    2172:	81 11       	cpse	r24, r1
    2174:	06 c0       	rjmp	.+12     	; 0x2182 <__stack+0x83>
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
    2176:	95 01       	movw	r18, r10
    2178:	a6 01       	movw	r20, r12
    217a:	b4 01       	movw	r22, r8
    217c:	c7 01       	movw	r24, r14
    217e:	36 df       	rcall	.-404    	; 0x1fec <compareStr>
    2180:	02 c0       	rjmp	.+4      	; 0x2186 <__stack+0x87>
    2182:	81 e0       	ldi	r24, 0x01	; 1
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);

        return compareStr(pattern, pattern_len, str, str_len) ||
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	81 70       	andi	r24, 0x01	; 1
    2188:	df 91       	pop	r29
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
    }
}
    218a:	cf 91       	pop	r28
    218c:	1f 91       	pop	r17
    218e:	0f 91       	pop	r16
    2190:	ff 90       	pop	r15
    2192:	ef 90       	pop	r14
    2194:	df 90       	pop	r13
    2196:	cf 90       	pop	r12
    2198:	bf 90       	pop	r11
    219a:	af 90       	pop	r10
    219c:	9f 90       	pop	r9
    219e:	8f 90       	pop	r8
    21a0:	7f 90       	pop	r7
    21a2:	6f 90       	pop	r6
    21a4:	08 95       	ret

000021a6 <matchCommand>:
    21a6:	2f 92       	push	r2
 * @param pattern eg. [:MEASure]:VOLTage:DC?
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len, int32_t *numbers, size_t numbers_len, int32_t default_value) {
    21a8:	3f 92       	push	r3
    21aa:	4f 92       	push	r4
    21ac:	5f 92       	push	r5
    21ae:	6f 92       	push	r6
    21b0:	7f 92       	push	r7
    21b2:	8f 92       	push	r8
    21b4:	9f 92       	push	r9
    21b6:	af 92       	push	r10
    21b8:	bf 92       	push	r11
    21ba:	cf 92       	push	r12
    21bc:	df 92       	push	r13
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	2c 97       	sbiw	r28, 0x0c	; 12
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	9c 87       	std	Y+12, r25	; 0x0c
    21dc:	8b 87       	std	Y+11, r24	; 0x0b
    21de:	5b 01       	movw	r10, r22
    21e0:	3a 83       	std	Y+2, r19	; 0x02
    21e2:	29 83       	std	Y+1, r18	; 0x01
    21e4:	1c 83       	std	Y+4, r17	; 0x04
    21e6:	0b 83       	std	Y+3, r16	; 0x03
    21e8:	cf 82       	std	Y+7, r12	; 0x07
    21ea:	d8 86       	std	Y+8, r13	; 0x08
    21ec:	e9 86       	std	Y+9, r14	; 0x09
    21ee:	fa 86       	std	Y+10, r15	; 0x0a

    size_t numbers_idx = 0;
    int32_t *number_ptr = NULL;

    const char * pattern_ptr = pattern;
    int pattern_len = strlen(pattern);
    21f0:	fc 01       	movw	r30, r24
    21f2:	01 90       	ld	r0, Z+
    21f4:	00 20       	and	r0, r0
    21f6:	e9 f7       	brne	.-6      	; 0x21f2 <matchCommand+0x4c>
    21f8:	31 97       	sbiw	r30, 0x01	; 1
    21fa:	7f 01       	movw	r14, r30
    21fc:	e8 1a       	sub	r14, r24
    21fe:	f9 0a       	sbc	r15, r25
    2200:	37 01       	movw	r6, r14

    const char * cmd_ptr = cmd;
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
    2202:	ba 01       	movw	r22, r20
    2204:	c5 01       	movw	r24, r10
    2206:	9d de       	rcall	.-710    	; 0x1f42 <BSD_strnlen>
    2208:	2c 01       	movw	r4, r24

    /* both commands are query commands? */
    if (pattern_ptr[pattern_len - 1] == '?') {
    220a:	eb 85       	ldd	r30, Y+11	; 0x0b
    220c:	fc 85       	ldd	r31, Y+12	; 0x0c
    220e:	ee 0d       	add	r30, r14
    2210:	ff 1d       	adc	r31, r15
    2212:	31 97       	sbiw	r30, 0x01	; 1
    2214:	80 81       	ld	r24, Z
    2216:	8f 33       	cpi	r24, 0x3F	; 63
    2218:	69 f4       	brne	.+26     	; 0x2234 <matchCommand+0x8e>
        if (cmd_ptr[cmd_len - 1] == '?') {
    221a:	21 e0       	ldi	r18, 0x01	; 1
    221c:	42 1a       	sub	r4, r18
    221e:	51 08       	sbc	r5, r1
    2220:	f5 01       	movw	r30, r10
    2222:	e4 0d       	add	r30, r4
    2224:	f5 1d       	adc	r31, r5
    2226:	80 81       	ld	r24, Z
    2228:	8f 33       	cpi	r24, 0x3F	; 63
    222a:	09 f0       	breq	.+2      	; 0x222e <matchCommand+0x88>
    222c:	9b c1       	rjmp	.+822    	; 0x2564 <matchCommand+0x3be>
            cmd_len -= 1;
            pattern_len -= 1;
    222e:	31 e0       	ldi	r19, 0x01	; 1
    2230:	63 1a       	sub	r6, r19
    2232:	71 08       	sbc	r7, r1
            return FALSE;
        }
    }

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
    2234:	ab 85       	ldd	r26, Y+11	; 0x0b
    2236:	bc 85       	ldd	r27, Y+12	; 0x0c
    2238:	8c 91       	ld	r24, X
    223a:	8b 35       	cpi	r24, 0x5B	; 91
    223c:	59 f4       	brne	.+22     	; 0x2254 <matchCommand+0xae>
        SKIP_PATTERN(1);
    223e:	11 96       	adiw	r26, 0x01	; 1
    2240:	bc 87       	std	Y+12, r27	; 0x0c
    2242:	ab 87       	std	Y+11, r26	; 0x0b
    2244:	b1 e0       	ldi	r27, 0x01	; 1
    2246:	6b 1a       	sub	r6, r27
    2248:	71 08       	sbc	r7, r1
        brackets++;
    224a:	e1 e0       	ldi	r30, 0x01	; 1
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	fe 83       	std	Y+6, r31	; 0x06
    2250:	ed 83       	std	Y+5, r30	; 0x05
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <matchCommand+0xb2>
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len, int32_t *numbers, size_t numbers_len, int32_t default_value) {
#define SKIP_PATTERN(n) do {pattern_ptr += (n);  pattern_len -= (n);} while(0)
#define SKIP_CMD(n) do {cmd_ptr += (n);  cmd_len -= (n);} while(0)

    scpi_bool_t result = FALSE;
    int brackets = 0;
    2254:	1e 82       	std	Y+6, r1	; 0x06
    2256:	1d 82       	std	Y+5, r1	; 0x05
    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
        SKIP_PATTERN(1);
        brackets++;
    }
    if (pattern_ptr[0] == ':') { /* skip first ':' */
    2258:	ab 85       	ldd	r26, Y+11	; 0x0b
    225a:	bc 85       	ldd	r27, Y+12	; 0x0c
    225c:	8c 91       	ld	r24, X
    225e:	8a 33       	cpi	r24, 0x3A	; 58
    2260:	31 f4       	brne	.+12     	; 0x226e <matchCommand+0xc8>
        SKIP_PATTERN(1);
    2262:	11 96       	adiw	r26, 0x01	; 1
    2264:	bc 87       	std	Y+12, r27	; 0x0c
    2266:	ab 87       	std	Y+11, r26	; 0x0b
    2268:	b1 e0       	ldi	r27, 0x01	; 1
    226a:	6b 1a       	sub	r6, r27
    226c:	71 08       	sbc	r7, r1
    }

    if (cmd_ptr[0] == ':') {
    226e:	f5 01       	movw	r30, r10
    2270:	80 81       	ld	r24, Z
    2272:	8a 33       	cpi	r24, 0x3A	; 58
    2274:	81 f4       	brne	.+32     	; 0x2296 <matchCommand+0xf0>
        /* handle errornouse ":*IDN?" */
        if (cmd_len >= 2) {
    2276:	f2 e0       	ldi	r31, 0x02	; 2
    2278:	4f 16       	cp	r4, r31
    227a:	51 04       	cpc	r5, r1
    227c:	60 f0       	brcs	.+24     	; 0x2296 <matchCommand+0xf0>
            if (cmd_ptr[1] != '*') {
    227e:	d5 01       	movw	r26, r10
    2280:	11 96       	adiw	r26, 0x01	; 1
    2282:	8c 91       	ld	r24, X
    2284:	8a 32       	cpi	r24, 0x2A	; 42
    2286:	09 f4       	brne	.+2      	; 0x228a <matchCommand+0xe4>
    2288:	6f c1       	rjmp	.+734    	; 0x2568 <matchCommand+0x3c2>
                SKIP_CMD(1);
    228a:	bf ef       	ldi	r27, 0xFF	; 255
    228c:	ab 1a       	sub	r10, r27
    228e:	bb 0a       	sbc	r11, r27
    2290:	e1 e0       	ldi	r30, 0x01	; 1
    2292:	4e 1a       	sub	r4, r30
    2294:	51 08       	sbc	r5, r1
    }

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
        SKIP_PATTERN(1);
        brackets++;
    2296:	21 2c       	mov	r2, r1
    2298:	31 2c       	mov	r3, r1
            }
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
    229a:	73 01       	movw	r14, r6
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorPos(const char * pattern, size_t len) {

    char * separator = strnpbrk(pattern, len, "?:[]");
    229c:	4f eb       	ldi	r20, 0xBF	; 191
    229e:	52 e0       	ldi	r21, 0x02	; 2
    22a0:	b3 01       	movw	r22, r6
    22a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    22a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    22a6:	54 dd       	rcall	.-1368   	; 0x1d50 <strnpbrk>
    if (separator == NULL) {
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	29 f0       	breq	.+10     	; 0x22b6 <matchCommand+0x110>
        return len;
    } else {
        return separator - pattern;
    22ac:	7c 01       	movw	r14, r24
    22ae:	ab 85       	ldd	r26, Y+11	; 0x0b
    22b0:	bc 85       	ldd	r27, Y+12	; 0x0c
    22b2:	ea 1a       	sub	r14, r26
    22b4:	fb 0a       	sbc	r15, r27
            }
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
    22b6:	47 01       	movw	r8, r14
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
static size_t cmdSeparatorPos(const char * cmd, size_t len) {
    char * separator = strnpbrk(cmd, len, ":?");
    22b8:	44 ec       	ldi	r20, 0xC4	; 196
    22ba:	52 e0       	ldi	r21, 0x02	; 2
    22bc:	b2 01       	movw	r22, r4
    22be:	c5 01       	movw	r24, r10
    22c0:	47 dd       	rcall	.-1394   	; 0x1d50 <strnpbrk>
    size_t result;
    if (separator == NULL) {
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	21 f0       	breq	.+8      	; 0x22ce <matchCommand+0x128>
        result = len;
    } else {
        result = separator - cmd;
    22c6:	6c 01       	movw	r12, r24
    22c8:	ca 18       	sub	r12, r10
    22ca:	db 08       	sbc	r13, r11
    22cc:	01 c0       	rjmp	.+2      	; 0x22d0 <matchCommand+0x12a>
 */
static size_t cmdSeparatorPos(const char * cmd, size_t len) {
    char * separator = strnpbrk(cmd, len, ":?");
    size_t result;
    if (separator == NULL) {
        result = len;
    22ce:	62 01       	movw	r12, r4
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);

        cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_len);

        if ((pattern_sep_pos > 0) && pattern_ptr[pattern_sep_pos - 1] == '#') {
    22d0:	18 14       	cp	r1, r8
    22d2:	19 04       	cpc	r1, r9
    22d4:	5c f5       	brge	.+86     	; 0x232c <matchCommand+0x186>
    22d6:	eb 85       	ldd	r30, Y+11	; 0x0b
    22d8:	fc 85       	ldd	r31, Y+12	; 0x0c
    22da:	ee 0d       	add	r30, r14
    22dc:	ff 1d       	adc	r31, r15
    22de:	31 97       	sbiw	r30, 0x01	; 1
    22e0:	80 81       	ld	r24, Z
    22e2:	83 32       	cpi	r24, 0x23	; 35
    22e4:	31 f5       	brne	.+76     	; 0x2332 <matchCommand+0x18c>
            if (numbers && (numbers_idx < numbers_len)) {
    22e6:	e9 81       	ldd	r30, Y+1	; 0x01
    22e8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ea:	30 97       	sbiw	r30, 0x00	; 0
    22ec:	b1 f0       	breq	.+44     	; 0x231a <matchCommand+0x174>
    22ee:	2b 81       	ldd	r18, Y+3	; 0x03
    22f0:	3c 81       	ldd	r19, Y+4	; 0x04
    22f2:	22 16       	cp	r2, r18
    22f4:	33 06       	cpc	r3, r19
    22f6:	a0 f4       	brcc	.+40     	; 0x2320 <matchCommand+0x17a>
                number_ptr = numbers + numbers_idx;
    22f8:	81 01       	movw	r16, r2
    22fa:	00 0f       	add	r16, r16
    22fc:	11 1f       	adc	r17, r17
    22fe:	00 0f       	add	r16, r16
    2300:	11 1f       	adc	r17, r17
    2302:	0e 0f       	add	r16, r30
    2304:	1f 1f       	adc	r17, r31
                *number_ptr = default_value; /* default value */
    2306:	8f 81       	ldd	r24, Y+7	; 0x07
    2308:	98 85       	ldd	r25, Y+8	; 0x08
    230a:	a9 85       	ldd	r26, Y+9	; 0x09
    230c:	ba 85       	ldd	r27, Y+10	; 0x0a
    230e:	f8 01       	movw	r30, r16
    2310:	80 83       	st	Z, r24
    2312:	91 83       	std	Z+1, r25	; 0x01
    2314:	a2 83       	std	Z+2, r26	; 0x02
    2316:	b3 83       	std	Z+3, r27	; 0x03
    2318:	05 c0       	rjmp	.+10     	; 0x2324 <matchCommand+0x17e>
            } else {
                number_ptr = NULL;
    231a:	00 e0       	ldi	r16, 0x00	; 0
    231c:	10 e0       	ldi	r17, 0x00	; 0
    231e:	02 c0       	rjmp	.+4      	; 0x2324 <matchCommand+0x17e>
    2320:	00 e0       	ldi	r16, 0x00	; 0
    2322:	10 e0       	ldi	r17, 0x00	; 0
            }
            numbers_idx++;
    2324:	ff ef       	ldi	r31, 0xFF	; 255
    2326:	2f 1a       	sub	r2, r31
    2328:	3f 0a       	sbc	r3, r31
    232a:	05 c0       	rjmp	.+10     	; 0x2336 <matchCommand+0x190>
        } else {
            number_ptr = NULL;
    232c:	00 e0       	ldi	r16, 0x00	; 0
    232e:	10 e0       	ldi	r17, 0x00	; 0
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <matchCommand+0x190>
    2332:	00 e0       	ldi	r16, 0x00	; 0
    2334:	10 e0       	ldi	r17, 0x00	; 0
        }

        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos, number_ptr)) {
    2336:	96 01       	movw	r18, r12
    2338:	a5 01       	movw	r20, r10
    233a:	b7 01       	movw	r22, r14
    233c:	8b 85       	ldd	r24, Y+11	; 0x0b
    233e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2340:	dc de       	rcall	.-584    	; 0x20fa <matchPattern>
    2342:	88 23       	and	r24, r24
    2344:	09 f4       	brne	.+2      	; 0x2348 <matchCommand+0x1a2>
    2346:	e2 c0       	rjmp	.+452    	; 0x250c <matchCommand+0x366>
            SKIP_PATTERN(pattern_sep_pos);
    2348:	2b 85       	ldd	r18, Y+11	; 0x0b
    234a:	3c 85       	ldd	r19, Y+12	; 0x0c
    234c:	2e 0d       	add	r18, r14
    234e:	3f 1d       	adc	r19, r15
    2350:	3c 87       	std	Y+12, r19	; 0x0c
    2352:	2b 87       	std	Y+11, r18	; 0x0b
    2354:	68 18       	sub	r6, r8
    2356:	79 08       	sbc	r7, r9
            SKIP_CMD(cmd_sep_pos);
    2358:	f5 01       	movw	r30, r10
    235a:	ec 0d       	add	r30, r12
    235c:	fd 1d       	adc	r31, r13
    235e:	92 01       	movw	r18, r4
    2360:	2c 19       	sub	r18, r12
    2362:	3d 09       	sbc	r19, r13
            result = TRUE;

            /* command is complete */
            if ((pattern_len == 0) && (cmd_len == 0)) {
    2364:	61 14       	cp	r6, r1
    2366:	71 04       	cpc	r7, r1
    2368:	31 f4       	brne	.+12     	; 0x2376 <matchCommand+0x1d0>
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	23 2b       	or	r18, r19
    236e:	09 f4       	brne	.+2      	; 0x2372 <matchCommand+0x1cc>
    2370:	13 c1       	rjmp	.+550    	; 0x2598 <matchCommand+0x3f2>
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	11 c1       	rjmp	.+546    	; 0x2598 <matchCommand+0x3f2>
                result = FALSE;
                break;
            }

            /* command complete, but pattern not */
            if (cmd_len == 0) {
    2376:	21 15       	cp	r18, r1
    2378:	31 05       	cpc	r19, r1
    237a:	09 f0       	breq	.+2      	; 0x237e <matchCommand+0x1d8>
    237c:	45 c0       	rjmp	.+138    	; 0x2408 <matchCommand+0x262>
    237e:	ed 80       	ldd	r14, Y+5	; 0x05
    2380:	fe 80       	ldd	r15, Y+6	; 0x06
    2382:	8b 85       	ldd	r24, Y+11	; 0x0b
    2384:	9c 85       	ldd	r25, Y+12	; 0x0c
    2386:	9a 83       	std	Y+2, r25	; 0x02
    2388:	89 83       	std	Y+1, r24	; 0x01
                /* verify all subsequent pattern parts are also optional */
                while (pattern_len) {
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
    238a:	83 01       	movw	r16, r6
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorPos(const char * pattern, size_t len) {

    char * separator = strnpbrk(pattern, len, "?:[]");
    238c:	4f eb       	ldi	r20, 0xBF	; 191
    238e:	52 e0       	ldi	r21, 0x02	; 2
    2390:	b3 01       	movw	r22, r6
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	dc dc       	rcall	.-1608   	; 0x1d50 <strnpbrk>
    if (separator == NULL) {
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	29 f0       	breq	.+10     	; 0x23a6 <matchCommand+0x200>
        return len;
    } else {
        return separator - pattern;
    239c:	8c 01       	movw	r16, r24
    239e:	a9 81       	ldd	r26, Y+1	; 0x01
    23a0:	ba 81       	ldd	r27, Y+2	; 0x02
    23a2:	0a 1b       	sub	r16, r26
    23a4:	1b 0b       	sbc	r17, r27

            /* command complete, but pattern not */
            if (cmd_len == 0) {
                /* verify all subsequent pattern parts are also optional */
                while (pattern_len) {
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
    23a6:	c8 01       	movw	r24, r16
                    switch (pattern_ptr[pattern_sep_pos]) {
    23a8:	e9 81       	ldd	r30, Y+1	; 0x01
    23aa:	fa 81       	ldd	r31, Y+2	; 0x02
    23ac:	e0 0f       	add	r30, r16
    23ae:	f1 1f       	adc	r31, r17
    23b0:	20 81       	ld	r18, Z
    23b2:	2b 35       	cpi	r18, 0x5B	; 91
    23b4:	19 f0       	breq	.+6      	; 0x23bc <matchCommand+0x216>
    23b6:	2d 35       	cpi	r18, 0x5D	; 93
    23b8:	29 f0       	breq	.+10     	; 0x23c4 <matchCommand+0x21e>
    23ba:	07 c0       	rjmp	.+14     	; 0x23ca <matchCommand+0x224>
                        case '[':
                            brackets++;
    23bc:	bf ef       	ldi	r27, 0xFF	; 255
    23be:	eb 1a       	sub	r14, r27
    23c0:	fb 0a       	sbc	r15, r27
                            break;
    23c2:	03 c0       	rjmp	.+6      	; 0x23ca <matchCommand+0x224>
                        case ']':
                            brackets--;
    23c4:	e1 e0       	ldi	r30, 0x01	; 1
    23c6:	ee 1a       	sub	r14, r30
    23c8:	f1 08       	sbc	r15, r1
                            break;
                        default:
                            break;
                    }
                    SKIP_PATTERN(pattern_sep_pos + 1);
    23ca:	0f 5f       	subi	r16, 0xFF	; 255
    23cc:	1f 4f       	sbci	r17, 0xFF	; 255
    23ce:	29 81       	ldd	r18, Y+1	; 0x01
    23d0:	3a 81       	ldd	r19, Y+2	; 0x02
    23d2:	20 0f       	add	r18, r16
    23d4:	31 1f       	adc	r19, r17
    23d6:	3a 83       	std	Y+2, r19	; 0x02
    23d8:	29 83       	std	Y+1, r18	; 0x01
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	68 1a       	sub	r6, r24
    23de:	79 0a       	sbc	r7, r25
                    if (brackets == 0) {
    23e0:	e1 14       	cp	r14, r1
    23e2:	f1 04       	cpc	r15, r1
    23e4:	41 f4       	brne	.+16     	; 0x23f6 <matchCommand+0x250>
                        if ((pattern_len > 0) && (pattern_ptr[0] == '[')) {
    23e6:	16 14       	cp	r1, r6
    23e8:	17 04       	cpc	r1, r7
    23ea:	44 f4       	brge	.+16     	; 0x23fc <matchCommand+0x256>
    23ec:	d9 01       	movw	r26, r18
    23ee:	8c 91       	ld	r24, X
    23f0:	8b 35       	cpi	r24, 0x5B	; 91
    23f2:	21 f4       	brne	.+8      	; 0x23fc <matchCommand+0x256>
    23f4:	ca cf       	rjmp	.-108    	; 0x238a <matchCommand+0x1e4>
            }

            /* command complete, but pattern not */
            if (cmd_len == 0) {
                /* verify all subsequent pattern parts are also optional */
                while (pattern_len) {
    23f6:	61 14       	cp	r6, r1
    23f8:	71 04       	cpc	r7, r1
    23fa:	39 f6       	brne	.-114    	; 0x238a <matchCommand+0x1e4>
                        } else {
                            break;
                        }
                    }
                }
                if (pattern_len != 0) {
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	67 28       	or	r6, r7
    2400:	09 f4       	brne	.+2      	; 0x2404 <matchCommand+0x25e>
    2402:	ca c0       	rjmp	.+404    	; 0x2598 <matchCommand+0x3f2>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	c8 c0       	rjmp	.+400    	; 0x2598 <matchCommand+0x3f2>
                }
                break; /* exist optional keyword, command is complete */
            }

            /* both command and patter contains command separator at this position */
            if ((pattern_len > 0)
    2408:	16 14       	cp	r1, r6
    240a:	17 04       	cpc	r1, r7
    240c:	bc f4       	brge	.+46     	; 0x243c <matchCommand+0x296>
                    && ((pattern_ptr[0] == cmd_ptr[0])
    240e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2410:	bc 85       	ldd	r27, Y+12	; 0x0c
    2412:	8c 91       	ld	r24, X
    2414:	90 81       	ld	r25, Z
    2416:	89 13       	cpse	r24, r25
    2418:	11 c0       	rjmp	.+34     	; 0x243c <matchCommand+0x296>
                    && (pattern_ptr[0] == ':'))) {
    241a:	8a 33       	cpi	r24, 0x3A	; 58
    241c:	79 f4       	brne	.+30     	; 0x243c <matchCommand+0x296>
                SKIP_PATTERN(1);
    241e:	11 96       	adiw	r26, 0x01	; 1
    2420:	bc 87       	std	Y+12, r27	; 0x0c
    2422:	ab 87       	std	Y+11, r26	; 0x0b
    2424:	b1 e0       	ldi	r27, 0x01	; 1
    2426:	6b 1a       	sub	r6, r27
    2428:	71 08       	sbc	r7, r1
                SKIP_CMD(1);
    242a:	5f 01       	movw	r10, r30
    242c:	8f ef       	ldi	r24, 0xFF	; 255
    242e:	a8 1a       	sub	r10, r24
    2430:	b8 0a       	sbc	r11, r24
    2432:	29 01       	movw	r4, r18
    2434:	91 e0       	ldi	r25, 0x01	; 1
    2436:	49 1a       	sub	r4, r25
    2438:	51 08       	sbc	r5, r1
    243a:	2f cf       	rjmp	.-418    	; 0x229a <matchCommand+0xf4>
            } else if ((pattern_len > 1)
    243c:	a2 e0       	ldi	r26, 0x02	; 2
    243e:	6a 16       	cp	r6, r26
    2440:	71 04       	cpc	r7, r1
    2442:	dc f1       	brlt	.+118    	; 0x24ba <matchCommand+0x314>
                    && (pattern_ptr[1] == cmd_ptr[0])
    2444:	ab 85       	ldd	r26, Y+11	; 0x0b
    2446:	bc 85       	ldd	r27, Y+12	; 0x0c
    2448:	11 96       	adiw	r26, 0x01	; 1
    244a:	8c 91       	ld	r24, X
    244c:	11 97       	sbiw	r26, 0x01	; 1
    244e:	90 81       	ld	r25, Z
    2450:	89 13       	cpse	r24, r25
    2452:	33 c0       	rjmp	.+102    	; 0x24ba <matchCommand+0x314>
                    && (pattern_ptr[0] == '[')
    2454:	9c 91       	ld	r25, X
    2456:	9b 35       	cpi	r25, 0x5B	; 91
    2458:	09 f0       	breq	.+2      	; 0x245c <matchCommand+0x2b6>
    245a:	97 c0       	rjmp	.+302    	; 0x258a <matchCommand+0x3e4>
                    && (pattern_ptr[1] == ':')) {
    245c:	8a 33       	cpi	r24, 0x3A	; 58
    245e:	09 f0       	breq	.+2      	; 0x2462 <matchCommand+0x2bc>
    2460:	94 c0       	rjmp	.+296    	; 0x258a <matchCommand+0x3e4>
                SKIP_PATTERN(2); /* for skip '[' in "[:" */
    2462:	12 96       	adiw	r26, 0x02	; 2
    2464:	bc 87       	std	Y+12, r27	; 0x0c
    2466:	ab 87       	std	Y+11, r26	; 0x0b
    2468:	b2 e0       	ldi	r27, 0x02	; 2
    246a:	6b 1a       	sub	r6, r27
    246c:	71 08       	sbc	r7, r1
                SKIP_CMD(1);
    246e:	5f 01       	movw	r10, r30
    2470:	8f ef       	ldi	r24, 0xFF	; 255
    2472:	a8 1a       	sub	r10, r24
    2474:	b8 0a       	sbc	r11, r24
    2476:	29 01       	movw	r4, r18
    2478:	91 e0       	ldi	r25, 0x01	; 1
    247a:	49 1a       	sub	r4, r25
    247c:	51 08       	sbc	r5, r1
                brackets++;
    247e:	ad 81       	ldd	r26, Y+5	; 0x05
    2480:	be 81       	ldd	r27, Y+6	; 0x06
    2482:	11 96       	adiw	r26, 0x01	; 1
    2484:	be 83       	std	Y+6, r27	; 0x06
    2486:	ad 83       	std	Y+5, r26	; 0x05
    2488:	08 cf       	rjmp	.-496    	; 0x229a <matchCommand+0xf4>
            } else if ((pattern_len > 1)
                    && (pattern_ptr[1] == cmd_ptr[0])
                    && (pattern_ptr[0] == ']')
                    && (pattern_ptr[1] == ':')) {
    248a:	8a 33       	cpi	r24, 0x3A	; 58
    248c:	b1 f4       	brne	.+44     	; 0x24ba <matchCommand+0x314>
                SKIP_PATTERN(2); /* for skip ']' in "]:" */
    248e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2490:	9c 85       	ldd	r25, Y+12	; 0x0c
    2492:	02 96       	adiw	r24, 0x02	; 2
    2494:	9c 87       	std	Y+12, r25	; 0x0c
    2496:	8b 87       	std	Y+11, r24	; 0x0b
    2498:	92 e0       	ldi	r25, 0x02	; 2
    249a:	69 1a       	sub	r6, r25
    249c:	71 08       	sbc	r7, r1
                SKIP_CMD(1);
    249e:	5f 01       	movw	r10, r30
    24a0:	af ef       	ldi	r26, 0xFF	; 255
    24a2:	aa 1a       	sub	r10, r26
    24a4:	ba 0a       	sbc	r11, r26
    24a6:	29 01       	movw	r4, r18
    24a8:	b1 e0       	ldi	r27, 0x01	; 1
    24aa:	4b 1a       	sub	r4, r27
    24ac:	51 08       	sbc	r5, r1
                brackets--;
    24ae:	ed 81       	ldd	r30, Y+5	; 0x05
    24b0:	fe 81       	ldd	r31, Y+6	; 0x06
    24b2:	31 97       	sbiw	r30, 0x01	; 1
    24b4:	fe 83       	std	Y+6, r31	; 0x06
    24b6:	ed 83       	std	Y+5, r30	; 0x05
    24b8:	f0 ce       	rjmp	.-544    	; 0x229a <matchCommand+0xf4>
            } else if ((pattern_len > 2)
    24ba:	83 e0       	ldi	r24, 0x03	; 3
    24bc:	68 16       	cp	r6, r24
    24be:	71 04       	cpc	r7, r1
    24c0:	0c f4       	brge	.+2      	; 0x24c4 <matchCommand+0x31e>
    24c2:	54 c0       	rjmp	.+168    	; 0x256c <matchCommand+0x3c6>
                    && (pattern_ptr[2] == cmd_ptr[0])
    24c4:	ab 85       	ldd	r26, Y+11	; 0x0b
    24c6:	bc 85       	ldd	r27, Y+12	; 0x0c
    24c8:	12 96       	adiw	r26, 0x02	; 2
    24ca:	8c 91       	ld	r24, X
    24cc:	12 97       	sbiw	r26, 0x02	; 2
    24ce:	90 81       	ld	r25, Z
    24d0:	89 13       	cpse	r24, r25
    24d2:	4e c0       	rjmp	.+156    	; 0x2570 <matchCommand+0x3ca>
                    && (pattern_ptr[0] == ']')
    24d4:	9c 91       	ld	r25, X
    24d6:	9d 35       	cpi	r25, 0x5D	; 93
    24d8:	09 f0       	breq	.+2      	; 0x24dc <matchCommand+0x336>
    24da:	4c c0       	rjmp	.+152    	; 0x2574 <matchCommand+0x3ce>
                    && (pattern_ptr[1] == '[')
    24dc:	11 96       	adiw	r26, 0x01	; 1
    24de:	9c 91       	ld	r25, X
    24e0:	11 97       	sbiw	r26, 0x01	; 1
    24e2:	9b 35       	cpi	r25, 0x5B	; 91
    24e4:	09 f0       	breq	.+2      	; 0x24e8 <matchCommand+0x342>
    24e6:	48 c0       	rjmp	.+144    	; 0x2578 <matchCommand+0x3d2>
                    && (pattern_ptr[2] == ':')) {
    24e8:	8a 33       	cpi	r24, 0x3A	; 58
    24ea:	09 f0       	breq	.+2      	; 0x24ee <matchCommand+0x348>
    24ec:	47 c0       	rjmp	.+142    	; 0x257c <matchCommand+0x3d6>
                SKIP_PATTERN(3); /* for skip '][' in "][:" */
    24ee:	13 96       	adiw	r26, 0x03	; 3
    24f0:	bc 87       	std	Y+12, r27	; 0x0c
    24f2:	ab 87       	std	Y+11, r26	; 0x0b
    24f4:	b3 e0       	ldi	r27, 0x03	; 3
    24f6:	6b 1a       	sub	r6, r27
    24f8:	71 08       	sbc	r7, r1
                SKIP_CMD(1);
    24fa:	5f 01       	movw	r10, r30
    24fc:	8f ef       	ldi	r24, 0xFF	; 255
    24fe:	a8 1a       	sub	r10, r24
    2500:	b8 0a       	sbc	r11, r24
    2502:	29 01       	movw	r4, r18
    2504:	91 e0       	ldi	r25, 0x01	; 1
    2506:	49 1a       	sub	r4, r25
    2508:	51 08       	sbc	r5, r1
    250a:	c7 ce       	rjmp	.-626    	; 0x229a <matchCommand+0xf4>
            } else {
                result = FALSE;
                break;
            }
        } else {
            SKIP_PATTERN(pattern_sep_pos);
    250c:	ab 85       	ldd	r26, Y+11	; 0x0b
    250e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2510:	ae 0d       	add	r26, r14
    2512:	bf 1d       	adc	r27, r15
    2514:	bc 87       	std	Y+12, r27	; 0x0c
    2516:	ab 87       	std	Y+11, r26	; 0x0b
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
    2518:	9c 91       	ld	r25, X
    251a:	9d 35       	cpi	r25, 0x5D	; 93
    251c:	e9 f5       	brne	.+122    	; 0x2598 <matchCommand+0x3f2>
            } else {
                result = FALSE;
                break;
            }
        } else {
            SKIP_PATTERN(pattern_sep_pos);
    251e:	68 18       	sub	r6, r8
    2520:	79 08       	sbc	r7, r9
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
    2522:	11 96       	adiw	r26, 0x01	; 1
    2524:	9c 91       	ld	r25, X
    2526:	11 97       	sbiw	r26, 0x01	; 1
    2528:	9a 33       	cpi	r25, 0x3A	; 58
    252a:	51 f5       	brne	.+84     	; 0x2580 <matchCommand+0x3da>
                SKIP_PATTERN(2); /* for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged */
    252c:	12 96       	adiw	r26, 0x02	; 2
    252e:	bc 87       	std	Y+12, r27	; 0x0c
    2530:	ab 87       	std	Y+11, r26	; 0x0b
    2532:	b2 e0       	ldi	r27, 0x02	; 2
    2534:	6b 1a       	sub	r6, r27
    2536:	71 08       	sbc	r7, r1
                brackets--;
    2538:	ed 81       	ldd	r30, Y+5	; 0x05
    253a:	fe 81       	ldd	r31, Y+6	; 0x06
    253c:	31 97       	sbiw	r30, 0x01	; 1
    253e:	fe 83       	std	Y+6, r31	; 0x06
    2540:	ed 83       	std	Y+5, r30	; 0x05
    2542:	ab ce       	rjmp	.-682    	; 0x229a <matchCommand+0xf4>
            } else if ((pattern_len > 2) && (pattern_ptr[0] == ']')
                    && (pattern_ptr[1] == '[')
    2544:	9b 35       	cpi	r25, 0x5B	; 91
    2546:	41 f5       	brne	.+80     	; 0x2598 <matchCommand+0x3f2>
                    && (pattern_ptr[2] == ':')) {
    2548:	ab 85       	ldd	r26, Y+11	; 0x0b
    254a:	bc 85       	ldd	r27, Y+12	; 0x0c
    254c:	12 96       	adiw	r26, 0x02	; 2
    254e:	9c 91       	ld	r25, X
    2550:	12 97       	sbiw	r26, 0x02	; 2
    2552:	9a 33       	cpi	r25, 0x3A	; 58
    2554:	09 f5       	brne	.+66     	; 0x2598 <matchCommand+0x3f2>
                SKIP_PATTERN(3); /* for skip ']' in "][:" , pattern_ptr continue, while cmd_ptr remain unchanged */
    2556:	13 96       	adiw	r26, 0x03	; 3
    2558:	bc 87       	std	Y+12, r27	; 0x0c
    255a:	ab 87       	std	Y+11, r26	; 0x0b
    255c:	b3 e0       	ldi	r27, 0x03	; 3
    255e:	6b 1a       	sub	r6, r27
    2560:	71 08       	sbc	r7, r1
    2562:	9b ce       	rjmp	.-714    	; 0x229a <matchCommand+0xf4>
    if (pattern_ptr[pattern_len - 1] == '?') {
        if (cmd_ptr[cmd_len - 1] == '?') {
            cmd_len -= 1;
            pattern_len -= 1;
        } else {
            return FALSE;
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	18 c0       	rjmp	.+48     	; 0x2598 <matchCommand+0x3f2>
        /* handle errornouse ":*IDN?" */
        if (cmd_len >= 2) {
            if (cmd_ptr[1] != '*') {
                SKIP_CMD(1);
            } else {
                return FALSE;
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	16 c0       	rjmp	.+44     	; 0x2598 <matchCommand+0x3f2>
                SKIP_PATTERN(3); /* for skip '][' in "][:" */
                SKIP_CMD(1);
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	14 c0       	rjmp	.+40     	; 0x2598 <matchCommand+0x3f2>
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	12 c0       	rjmp	.+36     	; 0x2598 <matchCommand+0x3f2>
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	10 c0       	rjmp	.+32     	; 0x2598 <matchCommand+0x3f2>
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	0e c0       	rjmp	.+28     	; 0x2598 <matchCommand+0x3f2>
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	0c c0       	rjmp	.+24     	; 0x2598 <matchCommand+0x3f2>
        } else {
            SKIP_PATTERN(pattern_sep_pos);
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
                SKIP_PATTERN(2); /* for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged */
                brackets--;
            } else if ((pattern_len > 2) && (pattern_ptr[0] == ']')
    2580:	e3 e0       	ldi	r30, 0x03	; 3
    2582:	6e 16       	cp	r6, r30
    2584:	71 04       	cpc	r7, r1
    2586:	f4 f6       	brge	.-68     	; 0x2544 <matchCommand+0x39e>
    2588:	07 c0       	rjmp	.+14     	; 0x2598 <matchCommand+0x3f2>
                SKIP_PATTERN(2); /* for skip '[' in "[:" */
                SKIP_CMD(1);
                brackets++;
            } else if ((pattern_len > 1)
                    && (pattern_ptr[1] == cmd_ptr[0])
                    && (pattern_ptr[0] == ']')
    258a:	ab 85       	ldd	r26, Y+11	; 0x0b
    258c:	bc 85       	ldd	r27, Y+12	; 0x0c
    258e:	9c 91       	ld	r25, X
    2590:	9d 35       	cpi	r25, 0x5D	; 93
    2592:	09 f0       	breq	.+2      	; 0x2596 <matchCommand+0x3f0>
    2594:	92 cf       	rjmp	.-220    	; 0x24ba <matchCommand+0x314>
    2596:	79 cf       	rjmp	.-270    	; 0x248a <matchCommand+0x2e4>
    }

    return result;
#undef SKIP_PATTERN
#undef SKIP_CMD
}
    2598:	2c 96       	adiw	r28, 0x0c	; 12
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	df 91       	pop	r29
    25a6:	cf 91       	pop	r28
    25a8:	1f 91       	pop	r17
    25aa:	0f 91       	pop	r16
    25ac:	ff 90       	pop	r15
    25ae:	ef 90       	pop	r14
    25b0:	df 90       	pop	r13
    25b2:	cf 90       	pop	r12
    25b4:	bf 90       	pop	r11
    25b6:	af 90       	pop	r10
    25b8:	9f 90       	pop	r9
    25ba:	8f 90       	pop	r8
    25bc:	7f 90       	pop	r7
    25be:	6f 90       	pop	r6
    25c0:	5f 90       	pop	r5
    25c2:	4f 90       	pop	r4
    25c4:	3f 90       	pop	r3
    25c6:	2f 90       	pop	r2
    25c8:	08 95       	ret

000025ca <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    25ca:	29 2f       	mov	r18, r25
    25cc:	33 27       	eor	r19, r19
    25ce:	22 30       	cpi	r18, 0x02	; 2
    25d0:	31 05       	cpc	r19, r1
    25d2:	59 f0       	breq	.+22     	; 0x25ea <CALLBACK_USB_GetDescriptor+0x20>
    25d4:	23 30       	cpi	r18, 0x03	; 3
    25d6:	31 05       	cpc	r19, r1
    25d8:	69 f0       	breq	.+26     	; 0x25f4 <CALLBACK_USB_GetDescriptor+0x2a>
    25da:	21 30       	cpi	r18, 0x01	; 1
    25dc:	31 05       	cpc	r19, r1
    25de:	21 f5       	brne	.+72     	; 0x2628 <CALLBACK_USB_GetDescriptor+0x5e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    25e0:	82 e1       	ldi	r24, 0x12	; 18
    25e2:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    25e4:	21 e3       	ldi	r18, 0x31	; 49
    25e6:	31 e0       	ldi	r19, 0x01	; 1
    25e8:	28 c0       	rjmp	.+80     	; 0x263a <CALLBACK_USB_GetDescriptor+0x70>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    25ea:	87 e2       	ldi	r24, 0x27	; 39
    25ec:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    25ee:	2a e0       	ldi	r18, 0x0A	; 10
    25f0:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    25f2:	23 c0       	rjmp	.+70     	; 0x263a <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
    25f4:	99 27       	eor	r25, r25
    25f6:	81 30       	cpi	r24, 0x01	; 1
    25f8:	91 05       	cpc	r25, r1
    25fa:	51 f0       	breq	.+20     	; 0x2610 <CALLBACK_USB_GetDescriptor+0x46>
    25fc:	18 f0       	brcs	.+6      	; 0x2604 <CALLBACK_USB_GetDescriptor+0x3a>
    25fe:	02 97       	sbiw	r24, 0x02	; 2
    2600:	69 f0       	breq	.+26     	; 0x261c <CALLBACK_USB_GetDescriptor+0x52>
    2602:	17 c0       	rjmp	.+46     	; 0x2632 <CALLBACK_USB_GetDescriptor+0x68>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    2604:	e6 e0       	ldi	r30, 0x06	; 6
    2606:	f1 e0       	ldi	r31, 0x01	; 1
    2608:	84 91       	lpm	r24, Z
    260a:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
    260c:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
    260e:	15 c0       	rjmp	.+42     	; 0x263a <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    2610:	ec ee       	ldi	r30, 0xEC	; 236
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	84 91       	lpm	r24, Z
    2616:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
    2618:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
    261a:	0f c0       	rjmp	.+30     	; 0x263a <CALLBACK_USB_GetDescriptor+0x70>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    261c:	ee ec       	ldi	r30, 0xCE	; 206
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	84 91       	lpm	r24, Z
    2622:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    2624:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    2626:	09 c0       	rjmp	.+18     	; 0x263a <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	04 c0       	rjmp	.+8      	; 0x263a <CALLBACK_USB_GetDescriptor+0x70>
	uint16_t    Size    = NO_DESCRIPTOR;
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    263a:	fa 01       	movw	r30, r20
    263c:	31 83       	std	Z+1, r19	; 0x01
    263e:	20 83       	st	Z, r18
	return Size;
}
    2640:	08 95       	ret

00002642 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2642:	8f 92       	push	r8
    2644:	9f 92       	push	r9
    2646:	af 92       	push	r10
    2648:	bf 92       	push	r11
    264a:	cf 92       	push	r12
    264c:	df 92       	push	r13
    264e:	ef 92       	push	r14
    2650:	ff 92       	push	r15
    2652:	0f 93       	push	r16
    2654:	1f 93       	push	r17
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	8c 01       	movw	r16, r24
    265c:	eb 01       	movw	r28, r22
    265e:	6a 01       	movw	r12, r20
    2660:	31 d2       	rcall	.+1122   	; 0x2ac4 <Endpoint_WaitUntilReady>
    2662:	81 11       	cpse	r24, r1
    2664:	3d c0       	rjmp	.+122    	; 0x26e0 <Endpoint_Write_Stream_LE+0x9e>
    2666:	c1 14       	cp	r12, r1
    2668:	d1 04       	cpc	r13, r1
    266a:	39 f0       	breq	.+14     	; 0x267a <Endpoint_Write_Stream_LE+0x38>
    266c:	f6 01       	movw	r30, r12
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	c8 1b       	sub	r28, r24
    2674:	d9 0b       	sbc	r29, r25
    2676:	08 0f       	add	r16, r24
    2678:	19 1f       	adc	r17, r25
    267a:	20 97       	sbiw	r28, 0x00	; 0
    267c:	81 f1       	breq	.+96     	; 0x26de <Endpoint_Write_Stream_LE+0x9c>
    267e:	e1 2c       	mov	r14, r1
    2680:	f1 2c       	mov	r15, r1
    2682:	0f 2e       	mov	r0, r31
    2684:	f8 ee       	ldi	r31, 0xE8	; 232
    2686:	8f 2e       	mov	r8, r31
    2688:	91 2c       	mov	r9, r1
    268a:	f0 2d       	mov	r31, r0
    268c:	0f 2e       	mov	r0, r31
    268e:	f1 ef       	ldi	r31, 0xF1	; 241
    2690:	af 2e       	mov	r10, r31
    2692:	b1 2c       	mov	r11, r1
    2694:	f0 2d       	mov	r31, r0
    2696:	f4 01       	movw	r30, r8
    2698:	80 81       	ld	r24, Z
    269a:	85 fd       	sbrc	r24, 5
    269c:	13 c0       	rjmp	.+38     	; 0x26c4 <Endpoint_Write_Stream_LE+0x82>
    269e:	80 81       	ld	r24, Z
    26a0:	8e 77       	andi	r24, 0x7E	; 126
    26a2:	80 83       	st	Z, r24
    26a4:	c1 14       	cp	r12, r1
    26a6:	d1 04       	cpc	r13, r1
    26a8:	49 f0       	breq	.+18     	; 0x26bc <Endpoint_Write_Stream_LE+0x7a>
    26aa:	f6 01       	movw	r30, r12
    26ac:	80 81       	ld	r24, Z
    26ae:	91 81       	ldd	r25, Z+1	; 0x01
    26b0:	e8 0e       	add	r14, r24
    26b2:	f9 1e       	adc	r15, r25
    26b4:	f1 82       	std	Z+1, r15	; 0x01
    26b6:	e0 82       	st	Z, r14
    26b8:	85 e0       	ldi	r24, 0x05	; 5
    26ba:	12 c0       	rjmp	.+36     	; 0x26e0 <Endpoint_Write_Stream_LE+0x9e>
    26bc:	03 d2       	rcall	.+1030   	; 0x2ac4 <Endpoint_WaitUntilReady>
    26be:	88 23       	and	r24, r24
    26c0:	51 f0       	breq	.+20     	; 0x26d6 <Endpoint_Write_Stream_LE+0x94>
    26c2:	0e c0       	rjmp	.+28     	; 0x26e0 <Endpoint_Write_Stream_LE+0x9e>
    26c4:	f8 01       	movw	r30, r16
    26c6:	81 91       	ld	r24, Z+
    26c8:	8f 01       	movw	r16, r30
    26ca:	f5 01       	movw	r30, r10
    26cc:	80 83       	st	Z, r24
    26ce:	21 97       	sbiw	r28, 0x01	; 1
    26d0:	ff ef       	ldi	r31, 0xFF	; 255
    26d2:	ef 1a       	sub	r14, r31
    26d4:	ff 0a       	sbc	r15, r31
    26d6:	20 97       	sbiw	r28, 0x00	; 0
    26d8:	f1 f6       	brne	.-68     	; 0x2696 <Endpoint_Write_Stream_LE+0x54>
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	01 c0       	rjmp	.+2      	; 0x26e0 <Endpoint_Write_Stream_LE+0x9e>
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	1f 91       	pop	r17
    26e6:	0f 91       	pop	r16
    26e8:	ff 90       	pop	r15
    26ea:	ef 90       	pop	r14
    26ec:	df 90       	pop	r13
    26ee:	cf 90       	pop	r12
    26f0:	bf 90       	pop	r11
    26f2:	af 90       	pop	r10
    26f4:	9f 90       	pop	r9
    26f6:	8f 90       	pop	r8
    26f8:	08 95       	ret

000026fa <Endpoint_Read_Stream_LE>:
    26fa:	8f 92       	push	r8
    26fc:	9f 92       	push	r9
    26fe:	af 92       	push	r10
    2700:	bf 92       	push	r11
    2702:	cf 92       	push	r12
    2704:	df 92       	push	r13
    2706:	ef 92       	push	r14
    2708:	ff 92       	push	r15
    270a:	0f 93       	push	r16
    270c:	1f 93       	push	r17
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	8c 01       	movw	r16, r24
    2714:	eb 01       	movw	r28, r22
    2716:	6a 01       	movw	r12, r20
    2718:	d5 d1       	rcall	.+938    	; 0x2ac4 <Endpoint_WaitUntilReady>
    271a:	81 11       	cpse	r24, r1
    271c:	3d c0       	rjmp	.+122    	; 0x2798 <Endpoint_Read_Stream_LE+0x9e>
    271e:	c1 14       	cp	r12, r1
    2720:	d1 04       	cpc	r13, r1
    2722:	39 f0       	breq	.+14     	; 0x2732 <Endpoint_Read_Stream_LE+0x38>
    2724:	f6 01       	movw	r30, r12
    2726:	80 81       	ld	r24, Z
    2728:	91 81       	ldd	r25, Z+1	; 0x01
    272a:	c8 1b       	sub	r28, r24
    272c:	d9 0b       	sbc	r29, r25
    272e:	08 0f       	add	r16, r24
    2730:	19 1f       	adc	r17, r25
    2732:	20 97       	sbiw	r28, 0x00	; 0
    2734:	81 f1       	breq	.+96     	; 0x2796 <Endpoint_Read_Stream_LE+0x9c>
    2736:	e1 2c       	mov	r14, r1
    2738:	f1 2c       	mov	r15, r1
    273a:	0f 2e       	mov	r0, r31
    273c:	f8 ee       	ldi	r31, 0xE8	; 232
    273e:	8f 2e       	mov	r8, r31
    2740:	91 2c       	mov	r9, r1
    2742:	f0 2d       	mov	r31, r0
    2744:	0f 2e       	mov	r0, r31
    2746:	f1 ef       	ldi	r31, 0xF1	; 241
    2748:	af 2e       	mov	r10, r31
    274a:	b1 2c       	mov	r11, r1
    274c:	f0 2d       	mov	r31, r0
    274e:	f4 01       	movw	r30, r8
    2750:	80 81       	ld	r24, Z
    2752:	85 fd       	sbrc	r24, 5
    2754:	13 c0       	rjmp	.+38     	; 0x277c <Endpoint_Read_Stream_LE+0x82>
    2756:	80 81       	ld	r24, Z
    2758:	8b 77       	andi	r24, 0x7B	; 123
    275a:	80 83       	st	Z, r24
    275c:	c1 14       	cp	r12, r1
    275e:	d1 04       	cpc	r13, r1
    2760:	49 f0       	breq	.+18     	; 0x2774 <Endpoint_Read_Stream_LE+0x7a>
    2762:	f6 01       	movw	r30, r12
    2764:	80 81       	ld	r24, Z
    2766:	91 81       	ldd	r25, Z+1	; 0x01
    2768:	e8 0e       	add	r14, r24
    276a:	f9 1e       	adc	r15, r25
    276c:	f1 82       	std	Z+1, r15	; 0x01
    276e:	e0 82       	st	Z, r14
    2770:	85 e0       	ldi	r24, 0x05	; 5
    2772:	12 c0       	rjmp	.+36     	; 0x2798 <Endpoint_Read_Stream_LE+0x9e>
    2774:	a7 d1       	rcall	.+846    	; 0x2ac4 <Endpoint_WaitUntilReady>
    2776:	88 23       	and	r24, r24
    2778:	51 f0       	breq	.+20     	; 0x278e <Endpoint_Read_Stream_LE+0x94>
    277a:	0e c0       	rjmp	.+28     	; 0x2798 <Endpoint_Read_Stream_LE+0x9e>
    277c:	f5 01       	movw	r30, r10
    277e:	80 81       	ld	r24, Z
    2780:	f8 01       	movw	r30, r16
    2782:	81 93       	st	Z+, r24
    2784:	8f 01       	movw	r16, r30
    2786:	21 97       	sbiw	r28, 0x01	; 1
    2788:	ff ef       	ldi	r31, 0xFF	; 255
    278a:	ef 1a       	sub	r14, r31
    278c:	ff 0a       	sbc	r15, r31
    278e:	20 97       	sbiw	r28, 0x00	; 0
    2790:	f1 f6       	brne	.-68     	; 0x274e <Endpoint_Read_Stream_LE+0x54>
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	01 c0       	rjmp	.+2      	; 0x2798 <Endpoint_Read_Stream_LE+0x9e>
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	df 91       	pop	r29
    279a:	cf 91       	pop	r28
    279c:	1f 91       	pop	r17
    279e:	0f 91       	pop	r16
    27a0:	ff 90       	pop	r15
    27a2:	ef 90       	pop	r14
    27a4:	df 90       	pop	r13
    27a6:	cf 90       	pop	r12
    27a8:	bf 90       	pop	r11
    27aa:	af 90       	pop	r10
    27ac:	9f 90       	pop	r9
    27ae:	8f 90       	pop	r8
    27b0:	08 95       	ret

000027b2 <Endpoint_Write_Control_Stream_LE>:
    27b2:	ef 92       	push	r14
    27b4:	ff 92       	push	r15
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	20 91 77 04 	lds	r18, 0x0477	; 0x800477 <USB_ControlRequest+0x6>
    27c2:	30 91 78 04 	lds	r19, 0x0478	; 0x800478 <USB_ControlRequest+0x7>
    27c6:	26 17       	cp	r18, r22
    27c8:	37 07       	cpc	r19, r23
    27ca:	58 f0       	brcs	.+22     	; 0x27e2 <Endpoint_Write_Control_Stream_LE+0x30>
    27cc:	61 15       	cp	r22, r1
    27ce:	71 05       	cpc	r23, r1
    27d0:	39 f4       	brne	.+14     	; 0x27e0 <Endpoint_Write_Control_Stream_LE+0x2e>
    27d2:	e8 ee       	ldi	r30, 0xE8	; 232
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	20 81       	ld	r18, Z
    27d8:	2e 77       	andi	r18, 0x7E	; 126
    27da:	20 83       	st	Z, r18
    27dc:	9b 01       	movw	r18, r22
    27de:	01 c0       	rjmp	.+2      	; 0x27e2 <Endpoint_Write_Control_Stream_LE+0x30>
    27e0:	9b 01       	movw	r18, r22
    27e2:	a8 2f       	mov	r26, r24
    27e4:	b9 2f       	mov	r27, r25
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	e8 ee       	ldi	r30, 0xE8	; 232
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	62 ef       	ldi	r22, 0xF2	; 242
    27ee:	70 e0       	ldi	r23, 0x00	; 0
    27f0:	0f 2e       	mov	r0, r31
    27f2:	f1 ef       	ldi	r31, 0xF1	; 241
    27f4:	ef 2e       	mov	r14, r31
    27f6:	f1 2c       	mov	r15, r1
    27f8:	f0 2d       	mov	r31, r0
    27fa:	11 e0       	ldi	r17, 0x01	; 1
    27fc:	00 e0       	ldi	r16, 0x00	; 0
    27fe:	2f c0       	rjmp	.+94     	; 0x285e <Endpoint_Write_Control_Stream_LE+0xac>
    2800:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <USB_DeviceState>
    2804:	88 23       	and	r24, r24
    2806:	09 f4       	brne	.+2      	; 0x280a <Endpoint_Write_Control_Stream_LE+0x58>
    2808:	41 c0       	rjmp	.+130    	; 0x288c <Endpoint_Write_Control_Stream_LE+0xda>
    280a:	85 30       	cpi	r24, 0x05	; 5
    280c:	09 f4       	brne	.+2      	; 0x2810 <Endpoint_Write_Control_Stream_LE+0x5e>
    280e:	40 c0       	rjmp	.+128    	; 0x2890 <Endpoint_Write_Control_Stream_LE+0xde>
    2810:	80 81       	ld	r24, Z
    2812:	83 fd       	sbrc	r24, 3
    2814:	3f c0       	rjmp	.+126    	; 0x2894 <Endpoint_Write_Control_Stream_LE+0xe2>
    2816:	80 81       	ld	r24, Z
    2818:	82 fd       	sbrc	r24, 2
    281a:	31 c0       	rjmp	.+98     	; 0x287e <Endpoint_Write_Control_Stream_LE+0xcc>
    281c:	80 81       	ld	r24, Z
    281e:	80 ff       	sbrs	r24, 0
    2820:	1e c0       	rjmp	.+60     	; 0x285e <Endpoint_Write_Control_Stream_LE+0xac>
    2822:	eb 01       	movw	r28, r22
    2824:	48 81       	ld	r20, Y
    2826:	59 81       	ldd	r21, Y+1	; 0x01
    2828:	21 15       	cp	r18, r1
    282a:	31 05       	cpc	r19, r1
    282c:	81 f0       	breq	.+32     	; 0x284e <Endpoint_Write_Control_Stream_LE+0x9c>
    282e:	48 30       	cpi	r20, 0x08	; 8
    2830:	51 05       	cpc	r21, r1
    2832:	68 f4       	brcc	.+26     	; 0x284e <Endpoint_Write_Control_Stream_LE+0x9c>
    2834:	8d 91       	ld	r24, X+
    2836:	e7 01       	movw	r28, r14
    2838:	88 83       	st	Y, r24
    283a:	21 50       	subi	r18, 0x01	; 1
    283c:	31 09       	sbc	r19, r1
    283e:	4f 5f       	subi	r20, 0xFF	; 255
    2840:	5f 4f       	sbci	r21, 0xFF	; 255
    2842:	21 15       	cp	r18, r1
    2844:	31 05       	cpc	r19, r1
    2846:	19 f0       	breq	.+6      	; 0x284e <Endpoint_Write_Control_Stream_LE+0x9c>
    2848:	48 30       	cpi	r20, 0x08	; 8
    284a:	51 05       	cpc	r21, r1
    284c:	99 f7       	brne	.-26     	; 0x2834 <Endpoint_Write_Control_Stream_LE+0x82>
    284e:	91 2f       	mov	r25, r17
    2850:	48 30       	cpi	r20, 0x08	; 8
    2852:	51 05       	cpc	r21, r1
    2854:	09 f0       	breq	.+2      	; 0x2858 <Endpoint_Write_Control_Stream_LE+0xa6>
    2856:	90 2f       	mov	r25, r16
    2858:	80 81       	ld	r24, Z
    285a:	8e 77       	andi	r24, 0x7E	; 126
    285c:	80 83       	st	Z, r24
    285e:	21 15       	cp	r18, r1
    2860:	31 05       	cpc	r19, r1
    2862:	71 f6       	brne	.-100    	; 0x2800 <Endpoint_Write_Control_Stream_LE+0x4e>
    2864:	91 11       	cpse	r25, r1
    2866:	cc cf       	rjmp	.-104    	; 0x2800 <Endpoint_Write_Control_Stream_LE+0x4e>
    2868:	0a c0       	rjmp	.+20     	; 0x287e <Endpoint_Write_Control_Stream_LE+0xcc>
    286a:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <USB_DeviceState>
    286e:	88 23       	and	r24, r24
    2870:	99 f0       	breq	.+38     	; 0x2898 <Endpoint_Write_Control_Stream_LE+0xe6>
    2872:	85 30       	cpi	r24, 0x05	; 5
    2874:	99 f0       	breq	.+38     	; 0x289c <Endpoint_Write_Control_Stream_LE+0xea>
    2876:	80 81       	ld	r24, Z
    2878:	83 ff       	sbrs	r24, 3
    287a:	03 c0       	rjmp	.+6      	; 0x2882 <Endpoint_Write_Control_Stream_LE+0xd0>
    287c:	11 c0       	rjmp	.+34     	; 0x28a0 <Endpoint_Write_Control_Stream_LE+0xee>
    287e:	e8 ee       	ldi	r30, 0xE8	; 232
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	82 ff       	sbrs	r24, 2
    2886:	f1 cf       	rjmp	.-30     	; 0x286a <Endpoint_Write_Control_Stream_LE+0xb8>
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	0b c0       	rjmp	.+22     	; 0x28a2 <Endpoint_Write_Control_Stream_LE+0xf0>
    288c:	82 e0       	ldi	r24, 0x02	; 2
    288e:	09 c0       	rjmp	.+18     	; 0x28a2 <Endpoint_Write_Control_Stream_LE+0xf0>
    2890:	83 e0       	ldi	r24, 0x03	; 3
    2892:	07 c0       	rjmp	.+14     	; 0x28a2 <Endpoint_Write_Control_Stream_LE+0xf0>
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	05 c0       	rjmp	.+10     	; 0x28a2 <Endpoint_Write_Control_Stream_LE+0xf0>
    2898:	82 e0       	ldi	r24, 0x02	; 2
    289a:	03 c0       	rjmp	.+6      	; 0x28a2 <Endpoint_Write_Control_Stream_LE+0xf0>
    289c:	83 e0       	ldi	r24, 0x03	; 3
    289e:	01 c0       	rjmp	.+2      	; 0x28a2 <Endpoint_Write_Control_Stream_LE+0xf0>
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	1f 91       	pop	r17
    28a8:	0f 91       	pop	r16
    28aa:	ff 90       	pop	r15
    28ac:	ef 90       	pop	r14
    28ae:	08 95       	ret

000028b0 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    28b0:	ef 92       	push	r14
    28b2:	ff 92       	push	r15
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    28bc:	20 91 77 04 	lds	r18, 0x0477	; 0x800477 <USB_ControlRequest+0x6>
    28c0:	30 91 78 04 	lds	r19, 0x0478	; 0x800478 <USB_ControlRequest+0x7>
    28c4:	26 17       	cp	r18, r22
    28c6:	37 07       	cpc	r19, r23
    28c8:	58 f0       	brcs	.+22     	; 0x28e0 <Endpoint_Write_Control_PStream_LE+0x30>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    28ca:	61 15       	cp	r22, r1
    28cc:	71 05       	cpc	r23, r1
    28ce:	39 f4       	brne	.+14     	; 0x28de <Endpoint_Write_Control_PStream_LE+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    28d0:	e8 ee       	ldi	r30, 0xE8	; 232
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	20 81       	ld	r18, Z
    28d6:	2e 77       	andi	r18, 0x7E	; 126
    28d8:	20 83       	st	Z, r18
    28da:	9b 01       	movw	r18, r22
    28dc:	01 c0       	rjmp	.+2      	; 0x28e0 <Endpoint_Write_Control_PStream_LE+0x30>
    28de:	9b 01       	movw	r18, r22
    28e0:	e8 2f       	mov	r30, r24
    28e2:	f9 2f       	mov	r31, r25
    28e4:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    28e6:	a8 ee       	ldi	r26, 0xE8	; 232
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    28ea:	62 ef       	ldi	r22, 0xF2	; 242
    28ec:	70 e0       	ldi	r23, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    28ee:	0f 2e       	mov	r0, r31
    28f0:	f1 ef       	ldi	r31, 0xF1	; 241
    28f2:	ef 2e       	mov	r14, r31
    28f4:	f1 2c       	mov	r15, r1
    28f6:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    28f8:	11 e0       	ldi	r17, 0x01	; 1
    28fa:	00 e0       	ldi	r16, 0x00	; 0
    28fc:	30 c0       	rjmp	.+96     	; 0x295e <Endpoint_Write_Control_PStream_LE+0xae>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    28fe:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2902:	88 23       	and	r24, r24
    2904:	09 f4       	brne	.+2      	; 0x2908 <Endpoint_Write_Control_PStream_LE+0x58>
    2906:	42 c0       	rjmp	.+132    	; 0x298c <Endpoint_Write_Control_PStream_LE+0xdc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2908:	85 30       	cpi	r24, 0x05	; 5
    290a:	09 f4       	brne	.+2      	; 0x290e <Endpoint_Write_Control_PStream_LE+0x5e>
    290c:	41 c0       	rjmp	.+130    	; 0x2990 <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    290e:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2910:	83 fd       	sbrc	r24, 3
    2912:	40 c0       	rjmp	.+128    	; 0x2994 <Endpoint_Write_Control_PStream_LE+0xe4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2914:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2916:	82 fd       	sbrc	r24, 2
    2918:	32 c0       	rjmp	.+100    	; 0x297e <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    291a:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
    291c:	80 ff       	sbrs	r24, 0
    291e:	1f c0       	rjmp	.+62     	; 0x295e <Endpoint_Write_Control_PStream_LE+0xae>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    2920:	eb 01       	movw	r28, r22
    2922:	48 81       	ld	r20, Y
    2924:	59 81       	ldd	r21, Y+1	; 0x01
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2926:	21 15       	cp	r18, r1
    2928:	31 05       	cpc	r19, r1
    292a:	89 f0       	breq	.+34     	; 0x294e <Endpoint_Write_Control_PStream_LE+0x9e>
    292c:	48 30       	cpi	r20, 0x08	; 8
    292e:	51 05       	cpc	r21, r1
    2930:	70 f4       	brcc	.+28     	; 0x294e <Endpoint_Write_Control_PStream_LE+0x9e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2932:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2934:	e7 01       	movw	r28, r14
    2936:	88 83       	st	Y, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2938:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    293a:	21 50       	subi	r18, 0x01	; 1
    293c:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    293e:	4f 5f       	subi	r20, 0xFF	; 255
    2940:	5f 4f       	sbci	r21, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2942:	21 15       	cp	r18, r1
    2944:	31 05       	cpc	r19, r1
    2946:	19 f0       	breq	.+6      	; 0x294e <Endpoint_Write_Control_PStream_LE+0x9e>
    2948:	48 30       	cpi	r20, 0x08	; 8
    294a:	51 05       	cpc	r21, r1
    294c:	91 f7       	brne	.-28     	; 0x2932 <Endpoint_Write_Control_PStream_LE+0x82>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    294e:	91 2f       	mov	r25, r17
    2950:	48 30       	cpi	r20, 0x08	; 8
    2952:	51 05       	cpc	r21, r1
    2954:	09 f0       	breq	.+2      	; 0x2958 <Endpoint_Write_Control_PStream_LE+0xa8>
    2956:	90 2f       	mov	r25, r16
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2958:	8c 91       	ld	r24, X
    295a:	8e 77       	andi	r24, 0x7E	; 126
    295c:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    295e:	21 15       	cp	r18, r1
    2960:	31 05       	cpc	r19, r1
    2962:	69 f6       	brne	.-102    	; 0x28fe <Endpoint_Write_Control_PStream_LE+0x4e>
    2964:	91 11       	cpse	r25, r1
    2966:	cb cf       	rjmp	.-106    	; 0x28fe <Endpoint_Write_Control_PStream_LE+0x4e>
    2968:	0a c0       	rjmp	.+20     	; 0x297e <Endpoint_Write_Control_PStream_LE+0xce>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    296a:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    296e:	88 23       	and	r24, r24
    2970:	99 f0       	breq	.+38     	; 0x2998 <Endpoint_Write_Control_PStream_LE+0xe8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2972:	85 30       	cpi	r24, 0x05	; 5
    2974:	99 f0       	breq	.+38     	; 0x299c <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2976:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2978:	83 ff       	sbrs	r24, 3
    297a:	03 c0       	rjmp	.+6      	; 0x2982 <Endpoint_Write_Control_PStream_LE+0xd2>
    297c:	11 c0       	rjmp	.+34     	; 0x29a0 <Endpoint_Write_Control_PStream_LE+0xf0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    297e:	e8 ee       	ldi	r30, 0xE8	; 232
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2984:	82 ff       	sbrs	r24, 2
    2986:	f1 cf       	rjmp	.-30     	; 0x296a <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	0b c0       	rjmp	.+22     	; 0x29a2 <Endpoint_Write_Control_PStream_LE+0xf2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    298c:	82 e0       	ldi	r24, 0x02	; 2
    298e:	09 c0       	rjmp	.+18     	; 0x29a2 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2990:	83 e0       	ldi	r24, 0x03	; 3
    2992:	07 c0       	rjmp	.+14     	; 0x29a2 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	05 c0       	rjmp	.+10     	; 0x29a2 <Endpoint_Write_Control_PStream_LE+0xf2>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2998:	82 e0       	ldi	r24, 0x02	; 2
    299a:	03 c0       	rjmp	.+6      	; 0x29a2 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    299c:	83 e0       	ldi	r24, 0x03	; 3
    299e:	01 c0       	rjmp	.+2      	; 0x29a2 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	1f 91       	pop	r17
    29a8:	0f 91       	pop	r16
    29aa:	ff 90       	pop	r15
    29ac:	ef 90       	pop	r14
    29ae:	08 95       	ret

000029b0 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    29b0:	8f 92       	push	r8
    29b2:	9f 92       	push	r9
    29b4:	bf 92       	push	r11
    29b6:	cf 92       	push	r12
    29b8:	df 92       	push	r13
    29ba:	ef 92       	push	r14
    29bc:	ff 92       	push	r15
    29be:	0f 93       	push	r16
    29c0:	1f 93       	push	r17
    29c2:	cf 93       	push	r28
    29c4:	df 93       	push	r29
    29c6:	87 30       	cpi	r24, 0x07	; 7
    29c8:	70 f1       	brcs	.+92     	; 0x2a26 <Endpoint_ConfigureEndpoint_Prv+0x76>
    29ca:	26 c0       	rjmp	.+76     	; 0x2a18 <Endpoint_ConfigureEndpoint_Prv+0x68>
    29cc:	29 2f       	mov	r18, r25
    29ce:	2f 70       	andi	r18, 0x0F	; 15
    29d0:	e7 01       	movw	r28, r14
    29d2:	28 83       	st	Y, r18
    29d4:	89 17       	cp	r24, r25
    29d6:	31 f0       	breq	.+12     	; 0x29e4 <Endpoint_ConfigureEndpoint_Prv+0x34>
    29d8:	e8 01       	movw	r28, r16
    29da:	78 81       	ld	r23, Y
    29dc:	20 81       	ld	r18, Z
    29de:	e4 01       	movw	r28, r8
    29e0:	58 81       	ld	r21, Y
    29e2:	03 c0       	rjmp	.+6      	; 0x29ea <Endpoint_ConfigureEndpoint_Prv+0x3a>
    29e4:	24 2f       	mov	r18, r20
    29e6:	76 2f       	mov	r23, r22
    29e8:	5b 2d       	mov	r21, r11
    29ea:	21 ff       	sbrs	r18, 1
    29ec:	12 c0       	rjmp	.+36     	; 0x2a12 <Endpoint_ConfigureEndpoint_Prv+0x62>
    29ee:	3c 91       	ld	r19, X
    29f0:	3e 7f       	andi	r19, 0xFE	; 254
    29f2:	3c 93       	st	X, r19
    29f4:	30 81       	ld	r19, Z
    29f6:	3d 7f       	andi	r19, 0xFD	; 253
    29f8:	30 83       	st	Z, r19
    29fa:	3c 91       	ld	r19, X
    29fc:	31 60       	ori	r19, 0x01	; 1
    29fe:	3c 93       	st	X, r19
    2a00:	e8 01       	movw	r28, r16
    2a02:	78 83       	st	Y, r23
    2a04:	20 83       	st	Z, r18
    2a06:	e4 01       	movw	r28, r8
    2a08:	58 83       	st	Y, r21
    2a0a:	e6 01       	movw	r28, r12
    2a0c:	28 81       	ld	r18, Y
    2a0e:	22 23       	and	r18, r18
    2a10:	44 f4       	brge	.+16     	; 0x2a22 <Endpoint_ConfigureEndpoint_Prv+0x72>
    2a12:	9f 5f       	subi	r25, 0xFF	; 255
    2a14:	97 30       	cpi	r25, 0x07	; 7
    2a16:	d1 f6       	brne	.-76     	; 0x29cc <Endpoint_ConfigureEndpoint_Prv+0x1c>
    2a18:	8f 70       	andi	r24, 0x0F	; 15
    2a1a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	21 c0       	rjmp	.+66     	; 0x2a64 <Endpoint_ConfigureEndpoint_Prv+0xb4>
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	1f c0       	rjmp	.+62     	; 0x2a64 <Endpoint_ConfigureEndpoint_Prv+0xb4>
    2a26:	98 2f       	mov	r25, r24
    2a28:	9f 70       	andi	r25, 0x0F	; 15
    2a2a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2a2e:	98 2f       	mov	r25, r24
    2a30:	24 2f       	mov	r18, r20
    2a32:	76 2f       	mov	r23, r22
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	ab ee       	ldi	r26, 0xEB	; 235
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	ed ee       	ldi	r30, 0xED	; 237
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	0c ee       	ldi	r16, 0xEC	; 236
    2a40:	10 e0       	ldi	r17, 0x00	; 0
    2a42:	0f 2e       	mov	r0, r31
    2a44:	f0 ef       	ldi	r31, 0xF0	; 240
    2a46:	8f 2e       	mov	r8, r31
    2a48:	91 2c       	mov	r9, r1
    2a4a:	f0 2d       	mov	r31, r0
    2a4c:	0f 2e       	mov	r0, r31
    2a4e:	fe ee       	ldi	r31, 0xEE	; 238
    2a50:	cf 2e       	mov	r12, r31
    2a52:	d1 2c       	mov	r13, r1
    2a54:	f0 2d       	mov	r31, r0
    2a56:	0f 2e       	mov	r0, r31
    2a58:	f9 ee       	ldi	r31, 0xE9	; 233
    2a5a:	ef 2e       	mov	r14, r31
    2a5c:	f1 2c       	mov	r15, r1
    2a5e:	f0 2d       	mov	r31, r0
    2a60:	b1 2c       	mov	r11, r1
    2a62:	c3 cf       	rjmp	.-122    	; 0x29ea <Endpoint_ConfigureEndpoint_Prv+0x3a>
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	1f 91       	pop	r17
    2a6a:	0f 91       	pop	r16
    2a6c:	ff 90       	pop	r15
    2a6e:	ef 90       	pop	r14
    2a70:	df 90       	pop	r13
    2a72:	cf 90       	pop	r12
    2a74:	bf 90       	pop	r11
    2a76:	9f 90       	pop	r9
    2a78:	8f 90       	pop	r8
    2a7a:	08 95       	ret

00002a7c <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2a7c:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <USB_ControlRequest>
    2a80:	88 23       	and	r24, r24
    2a82:	44 f0       	brlt	.+16     	; 0x2a94 <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2a84:	e8 ee       	ldi	r30, 0xE8	; 232
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	14 c0       	rjmp	.+40     	; 0x2ab2 <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2a8a:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <USB_DeviceState>
    2a8e:	81 11       	cpse	r24, r1
    2a90:	03 c0       	rjmp	.+6      	; 0x2a98 <Endpoint_ClearStatusStage+0x1c>
    2a92:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2a94:	e8 ee       	ldi	r30, 0xE8	; 232
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2a9a:	82 ff       	sbrs	r24, 2
    2a9c:	f6 cf       	rjmp	.-20     	; 0x2a8a <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2a9e:	e8 ee       	ldi	r30, 0xE8	; 232
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	8b 77       	andi	r24, 0x7B	; 123
    2aa6:	80 83       	st	Z, r24
    2aa8:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2aaa:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <USB_DeviceState>
    2aae:	88 23       	and	r24, r24
    2ab0:	41 f0       	breq	.+16     	; 0x2ac2 <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2ab2:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2ab4:	80 ff       	sbrs	r24, 0
    2ab6:	f9 cf       	rjmp	.-14     	; 0x2aaa <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2ab8:	e8 ee       	ldi	r30, 0xE8	; 232
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	8e 77       	andi	r24, 0x7E	; 126
    2ac0:	80 83       	st	Z, r24
    2ac2:	08 95       	ret

00002ac4 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    2ac4:	0f 93       	push	r16
    2ac6:	1f 93       	push	r17
    2ac8:	cf 93       	push	r28
    2aca:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2acc:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    2ad0:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    2ad4:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2ad6:	ac ee       	ldi	r26, 0xEC	; 236
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2ada:	e8 ee       	ldi	r30, 0xE8	; 232
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2ade:	0b ee       	ldi	r16, 0xEB	; 235
    2ae0:	10 e0       	ldi	r17, 0x00	; 0
    2ae2:	44 ee       	ldi	r20, 0xE4	; 228
    2ae4:	50 e0       	ldi	r21, 0x00	; 0
    2ae6:	01 c0       	rjmp	.+2      	; 0x2aea <Endpoint_WaitUntilReady+0x26>
    2ae8:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2aea:	9c 91       	ld	r25, X
    2aec:	89 2f       	mov	r24, r25
    2aee:	81 70       	andi	r24, 0x01	; 1
    2af0:	90 fd       	sbrc	r25, 0
    2af2:	1d c0       	rjmp	.+58     	; 0x2b2e <Endpoint_WaitUntilReady+0x6a>
    2af4:	20 c0       	rjmp	.+64     	; 0x2b36 <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2af6:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2afa:	88 23       	and	r24, r24
    2afc:	81 f0       	breq	.+32     	; 0x2b1e <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2afe:	85 30       	cpi	r24, 0x05	; 5
    2b00:	81 f0       	breq	.+32     	; 0x2b22 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2b02:	e8 01       	movw	r28, r16
    2b04:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    2b06:	85 fd       	sbrc	r24, 5
    2b08:	0e c0       	rjmp	.+28     	; 0x2b26 <Endpoint_WaitUntilReady+0x62>
    2b0a:	ea 01       	movw	r28, r20
    2b0c:	88 81       	ld	r24, Y
    2b0e:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    2b10:	28 17       	cp	r18, r24
    2b12:	39 07       	cpc	r19, r25
    2b14:	51 f3       	breq	.-44     	; 0x2aea <Endpoint_WaitUntilReady+0x26>
    2b16:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2b18:	39 f7       	brne	.-50     	; 0x2ae8 <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
    2b1a:	84 e0       	ldi	r24, 0x04	; 4
    2b1c:	0f c0       	rjmp	.+30     	; 0x2b3c <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    2b1e:	82 e0       	ldi	r24, 0x02	; 2
    2b20:	0d c0       	rjmp	.+26     	; 0x2b3c <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    2b22:	83 e0       	ldi	r24, 0x03	; 3
    2b24:	0b c0       	rjmp	.+22     	; 0x2b3c <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	09 c0       	rjmp	.+18     	; 0x2b3c <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	07 c0       	rjmp	.+14     	; 0x2b3c <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2b2e:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    2b30:	80 ff       	sbrs	r24, 0
    2b32:	e1 cf       	rjmp	.-62     	; 0x2af6 <Endpoint_WaitUntilReady+0x32>
    2b34:	fa cf       	rjmp	.-12     	; 0x2b2a <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2b36:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2b38:	92 ff       	sbrs	r25, 2
    2b3a:	dd cf       	rjmp	.-70     	; 0x2af6 <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	1f 91       	pop	r17
    2b42:	0f 91       	pop	r16
    2b44:	08 95       	ret

00002b46 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    2b46:	0f 93       	push	r16
    2b48:	1f 93       	push	r17
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2b4e:	4f d0       	rcall	.+158    	; 0x2bee <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2b50:	56 d0       	rcall	.+172    	; 0x2bfe <USB_INT_ClearAllInterrupts>
    2b52:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    2b54:	d0 e0       	ldi	r29, 0x00	; 0
    2b56:	88 81       	ld	r24, Y
    2b58:	8f 77       	andi	r24, 0x7F	; 127
    2b5a:	88 83       	st	Y, r24
    2b5c:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    2b5e:	80 68       	ori	r24, 0x80	; 128
    2b60:	88 83       	st	Y, r24
    2b62:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2b64:	8f 7d       	andi	r24, 0xDF	; 223
    2b66:	88 83       	st	Y, r24
    2b68:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	80 68       	ori	r24, 0x80	; 128
    2b70:	80 83       	st	Z, r24
    2b72:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2b74:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2b78:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    2b7c:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2b80:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    2b84:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2b86:	10 e0       	ldi	r17, 0x00	; 0
    2b88:	f8 01       	movw	r30, r16
    2b8a:	80 81       	ld	r24, Z
    2b8c:	8b 7f       	andi	r24, 0xFB	; 251
    2b8e:	80 83       	st	Z, r24
    2b90:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    2b92:	81 60       	ori	r24, 0x01	; 1
    2b94:	88 83       	st	Y, r24
    2b96:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2b98:	60 e0       	ldi	r22, 0x00	; 0
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	09 df       	rcall	.-494    	; 0x29b0 <Endpoint_ConfigureEndpoint_Prv>
    2b9e:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	8e 7f       	andi	r24, 0xFE	; 254
    2ba6:	80 83       	st	Z, r24
    2ba8:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	81 60       	ori	r24, 0x01	; 1
    2bb0:	80 83       	st	Z, r24
    2bb2:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2bb4:	88 60       	ori	r24, 0x08	; 8
    2bb6:	80 83       	st	Z, r24
    2bb8:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2bba:	80 81       	ld	r24, Z
    2bbc:	8e 7f       	andi	r24, 0xFE	; 254
    2bbe:	80 83       	st	Z, r24
    2bc0:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2bc2:	80 61       	ori	r24, 0x10	; 16
    2bc4:	88 83       	st	Y, r24
    2bc6:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2bc8:	cf 91       	pop	r28
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	08 95       	ret

00002bd0 <USB_Init>:
    2bd0:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	8f 7e       	andi	r24, 0xEF	; 239
    2bd8:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    2bda:	e7 ed       	ldi	r30, 0xD7	; 215
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	80 81       	ld	r24, Z
    2be0:	81 60       	ori	r24, 0x01	; 1
    2be2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <USB_IsInitialized>

	USB_ResetInterface();
    2bea:	ad cf       	rjmp	.-166    	; 0x2b46 <USB_ResetInterface>
    2bec:	08 95       	ret

00002bee <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    2bee:	e8 ed       	ldi	r30, 0xD8	; 216
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	8c 7f       	andi	r24, 0xFC	; 252
    2bf6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2bf8:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2bfc:	08 95       	ret

00002bfe <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    2bfe:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    2c02:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2c06:	08 95       	ret

00002c08 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    2c08:	1f 92       	push	r1
    2c0a:	0f 92       	push	r0
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	0f 92       	push	r0
    2c10:	11 24       	eor	r1, r1
    2c12:	0b b6       	in	r0, 0x3b	; 59
    2c14:	0f 92       	push	r0
    2c16:	2f 93       	push	r18
    2c18:	3f 93       	push	r19
    2c1a:	4f 93       	push	r20
    2c1c:	5f 93       	push	r21
    2c1e:	6f 93       	push	r22
    2c20:	7f 93       	push	r23
    2c22:	8f 93       	push	r24
    2c24:	9f 93       	push	r25
    2c26:	af 93       	push	r26
    2c28:	bf 93       	push	r27
    2c2a:	ef 93       	push	r30
    2c2c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    2c2e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2c32:	82 ff       	sbrs	r24, 2
    2c34:	0a c0       	rjmp	.+20     	; 0x2c4a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    2c36:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2c3a:	82 ff       	sbrs	r24, 2
    2c3c:	06 c0       	rjmp	.+12     	; 0x2c4a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    2c3e:	e1 ee       	ldi	r30, 0xE1	; 225
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	8b 7f       	andi	r24, 0xFB	; 251
    2c46:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2c48:	6a d2       	rcall	.+1236   	; 0x311e <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    2c4a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2c4e:	80 ff       	sbrs	r24, 0
    2c50:	1d c0       	rjmp	.+58     	; 0x2c8c <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    2c52:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2c56:	80 ff       	sbrs	r24, 0
    2c58:	19 c0       	rjmp	.+50     	; 0x2c8c <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    2c5a:	ea ed       	ldi	r30, 0xDA	; 218
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	8e 7f       	andi	r24, 0xFE	; 254
    2c62:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2c64:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    2c68:	80 ff       	sbrs	r24, 0
    2c6a:	0c c0       	rjmp	.+24     	; 0x2c84 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2c6c:	84 e1       	ldi	r24, 0x14	; 20
    2c6e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2c70:	86 e1       	ldi	r24, 0x16	; 22
    2c72:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2c74:	09 b4       	in	r0, 0x29	; 41
    2c76:	00 fe       	sbrs	r0, 0
    2c78:	fd cf       	rjmp	.-6      	; 0x2c74 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    2c80:	32 d4       	rcall	.+2148   	; 0x34e6 <EVENT_USB_Device_Connect>
    2c82:	04 c0       	rjmp	.+8      	; 0x2c8c <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2c84:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2c86:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    2c8a:	32 d4       	rcall	.+2148   	; 0x34f0 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2c8c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2c90:	80 ff       	sbrs	r24, 0
    2c92:	16 c0       	rjmp	.+44     	; 0x2cc0 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2c94:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2c98:	80 ff       	sbrs	r24, 0
    2c9a:	12 c0       	rjmp	.+36     	; 0x2cc0 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2c9c:	e2 ee       	ldi	r30, 0xE2	; 226
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8e 7f       	andi	r24, 0xFE	; 254
    2ca4:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2ca6:	80 81       	ld	r24, Z
    2ca8:	80 61       	ori	r24, 0x10	; 16
    2caa:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2cac:	e8 ed       	ldi	r30, 0xD8	; 216
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	80 62       	ori	r24, 0x20	; 32
    2cb4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2cb6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2cb8:	85 e0       	ldi	r24, 0x05	; 5
    2cba:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    2cbe:	2f d2       	rcall	.+1118   	; 0x311e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2cc0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2cc4:	84 ff       	sbrs	r24, 4
    2cc6:	2f c0       	rjmp	.+94     	; 0x2d26 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2cc8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2ccc:	84 ff       	sbrs	r24, 4
    2cce:	2b c0       	rjmp	.+86     	; 0x2d26 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2cd0:	84 e1       	ldi	r24, 0x14	; 20
    2cd2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2cd4:	86 e1       	ldi	r24, 0x16	; 22
    2cd6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2cd8:	09 b4       	in	r0, 0x29	; 41
    2cda:	00 fe       	sbrs	r0, 0
    2cdc:	fd cf       	rjmp	.-6      	; 0x2cd8 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2cde:	e8 ed       	ldi	r30, 0xD8	; 216
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	8f 7d       	andi	r24, 0xDF	; 223
    2ce6:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    2ce8:	e1 ee       	ldi	r30, 0xE1	; 225
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	8f 7e       	andi	r24, 0xEF	; 239
    2cf0:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2cf2:	e2 ee       	ldi	r30, 0xE2	; 226
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	8f 7e       	andi	r24, 0xEF	; 239
    2cfa:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2cfc:	80 81       	ld	r24, Z
    2cfe:	81 60       	ori	r24, 0x01	; 1
    2d00:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2d02:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <USB_Device_ConfigurationNumber>
    2d06:	88 23       	and	r24, r24
    2d08:	21 f0       	breq	.+8      	; 0x2d12 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2d0a:	84 e0       	ldi	r24, 0x04	; 4
    2d0c:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <USB_DeviceState>
    2d10:	09 c0       	rjmp	.+18     	; 0x2d24 <__vector_10+0x11c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2d12:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2d16:	88 23       	and	r24, r24
    2d18:	14 f0       	brlt	.+4      	; 0x2d1e <__vector_10+0x116>
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	01 c0       	rjmp	.+2      	; 0x2d20 <__vector_10+0x118>
    2d1e:	83 e0       	ldi	r24, 0x03	; 3
    2d20:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2d24:	fc d1       	rcall	.+1016   	; 0x311e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2d26:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2d2a:	83 ff       	sbrs	r24, 3
    2d2c:	23 c0       	rjmp	.+70     	; 0x2d74 <__vector_10+0x16c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2d2e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2d32:	83 ff       	sbrs	r24, 3
    2d34:	1f c0       	rjmp	.+62     	; 0x2d74 <__vector_10+0x16c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2d36:	e1 ee       	ldi	r30, 0xE1	; 225
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
    2d3c:	87 7f       	andi	r24, 0xF7	; 247
    2d3e:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    2d46:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2d4a:	80 81       	ld	r24, Z
    2d4c:	8e 7f       	andi	r24, 0xFE	; 254
    2d4e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2d50:	e2 ee       	ldi	r30, 0xE2	; 226
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	8e 7f       	andi	r24, 0xFE	; 254
    2d58:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2d5a:	80 81       	ld	r24, Z
    2d5c:	80 61       	ori	r24, 0x10	; 16
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2d5e:	80 83       	st	Z, r24
    2d60:	42 e0       	ldi	r20, 0x02	; 2
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2d66:	24 de       	rcall	.-952    	; 0x29b0 <Endpoint_ConfigureEndpoint_Prv>
    2d68:	e0 ef       	ldi	r30, 0xF0	; 240
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	88 60       	ori	r24, 0x08	; 8

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2d70:	80 83       	st	Z, r24
    2d72:	d5 d1       	rcall	.+938    	; 0x311e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2d74:	ff 91       	pop	r31
    2d76:	ef 91       	pop	r30
    2d78:	bf 91       	pop	r27
    2d7a:	af 91       	pop	r26
    2d7c:	9f 91       	pop	r25
    2d7e:	8f 91       	pop	r24
    2d80:	7f 91       	pop	r23
    2d82:	6f 91       	pop	r22
    2d84:	5f 91       	pop	r21
    2d86:	4f 91       	pop	r20
    2d88:	3f 91       	pop	r19
    2d8a:	2f 91       	pop	r18
    2d8c:	0f 90       	pop	r0
    2d8e:	0b be       	out	0x3b, r0	; 59
    2d90:	0f 90       	pop	r0
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	0f 90       	pop	r0
    2d96:	1f 90       	pop	r1
    2d98:	18 95       	reti

00002d9a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2d9a:	1f 92       	push	r1
    2d9c:	0f 92       	push	r0
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	0f 92       	push	r0
    2da2:	11 24       	eor	r1, r1
    2da4:	0b b6       	in	r0, 0x3b	; 59
    2da6:	0f 92       	push	r0
    2da8:	ef 92       	push	r14
    2daa:	ff 92       	push	r15
    2dac:	0f 93       	push	r16
    2dae:	1f 93       	push	r17
    2db0:	2f 93       	push	r18
    2db2:	3f 93       	push	r19
    2db4:	4f 93       	push	r20
    2db6:	5f 93       	push	r21
    2db8:	6f 93       	push	r22
    2dba:	7f 93       	push	r23
    2dbc:	8f 93       	push	r24
    2dbe:	9f 93       	push	r25
    2dc0:	af 93       	push	r26
    2dc2:	bf 93       	push	r27
    2dc4:	cf 93       	push	r28
    2dc6:	df 93       	push	r29
    2dc8:	ef 93       	push	r30
    2dca:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2dcc:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2dd0:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2dd2:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2dd6:	d8 2f       	mov	r29, r24
    2dd8:	d1 70       	andi	r29, 0x01	; 1
    2dda:	80 fd       	sbrc	r24, 0
    2ddc:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2dde:	0f 2e       	mov	r0, r31
    2de0:	f9 ee       	ldi	r31, 0xE9	; 233
    2de2:	ef 2e       	mov	r14, r31
    2de4:	f1 2c       	mov	r15, r1
    2de6:	f0 2d       	mov	r31, r0
    2de8:	f7 01       	movw	r30, r14
    2dea:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2dec:	00 ef       	ldi	r16, 0xF0	; 240
    2dee:	10 e0       	ldi	r17, 0x00	; 0
    2df0:	f8 01       	movw	r30, r16
    2df2:	80 81       	ld	r24, Z
    2df4:	87 7f       	andi	r24, 0xF7	; 247
    2df6:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    2df8:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    2dfa:	23 d0       	rcall	.+70     	; 0x2e42 <USB_Device_ProcessControlRequest>
    2dfc:	f7 01       	movw	r30, r14
    2dfe:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2e00:	f8 01       	movw	r30, r16
    2e02:	80 81       	ld	r24, Z
    2e04:	88 60       	ori	r24, 0x08	; 8
    2e06:	80 83       	st	Z, r24
    2e08:	cd 2b       	or	r28, r29
    2e0a:	cf 70       	andi	r28, 0x0F	; 15
    2e0c:	f7 01       	movw	r30, r14
    2e0e:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    2e10:	ff 91       	pop	r31
    2e12:	ef 91       	pop	r30
    2e14:	df 91       	pop	r29
    2e16:	cf 91       	pop	r28
    2e18:	bf 91       	pop	r27
    2e1a:	af 91       	pop	r26
    2e1c:	9f 91       	pop	r25
    2e1e:	8f 91       	pop	r24
    2e20:	7f 91       	pop	r23
    2e22:	6f 91       	pop	r22
    2e24:	5f 91       	pop	r21
    2e26:	4f 91       	pop	r20
    2e28:	3f 91       	pop	r19
    2e2a:	2f 91       	pop	r18
    2e2c:	1f 91       	pop	r17
    2e2e:	0f 91       	pop	r16
    2e30:	ff 90       	pop	r15
    2e32:	ef 90       	pop	r14
    2e34:	0f 90       	pop	r0
    2e36:	0b be       	out	0x3b, r0	; 59
    2e38:	0f 90       	pop	r0
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	0f 90       	pop	r0
    2e3e:	1f 90       	pop	r1
    2e40:	18 95       	reti

00002e42 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	aa 97       	sbiw	r28, 0x2a	; 42
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	e1 e7       	ldi	r30, 0x71	; 113
    2e5c:	f4 e0       	ldi	r31, 0x04	; 4
    2e5e:	29 e7       	ldi	r18, 0x79	; 121
    2e60:	34 e0       	ldi	r19, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2e62:	a1 ef       	ldi	r26, 0xF1	; 241
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2e68:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2e6a:	2e 17       	cp	r18, r30
    2e6c:	3f 07       	cpc	r19, r31
    2e6e:	d9 f7       	brne	.-10     	; 0x2e66 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2e70:	61 d3       	rcall	.+1730   	; 0x3534 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2e72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    2e76:	83 ff       	sbrs	r24, 3
    2e78:	2d c1       	rjmp	.+602    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2e7a:	e1 e7       	ldi	r30, 0x71	; 113
    2e7c:	f4 e0       	ldi	r31, 0x04	; 4
    2e7e:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
    2e80:	31 81       	ldd	r19, Z+1	; 0x01
    2e82:	83 2f       	mov	r24, r19
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	8a 30       	cpi	r24, 0x0A	; 10
    2e88:	91 05       	cpc	r25, r1
    2e8a:	08 f0       	brcs	.+2      	; 0x2e8e <USB_Device_ProcessControlRequest+0x4c>
    2e8c:	23 c1       	rjmp	.+582    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
    2e8e:	fc 01       	movw	r30, r24
    2e90:	ea 5a       	subi	r30, 0xAA	; 170
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	7c c6       	rjmp	.+3320   	; 0x3b8e <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2e96:	20 38       	cpi	r18, 0x80	; 128
    2e98:	21 f0       	breq	.+8      	; 0x2ea2 <USB_Device_ProcessControlRequest+0x60>
    2e9a:	22 38       	cpi	r18, 0x82	; 130
    2e9c:	09 f0       	breq	.+2      	; 0x2ea0 <USB_Device_ProcessControlRequest+0x5e>
    2e9e:	1a c1       	rjmp	.+564    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
    2ea0:	08 c0       	rjmp	.+16     	; 0x2eb2 <USB_Device_ProcessControlRequest+0x70>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2ea2:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2ea6:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <USB_Device_RemoteWakeupEnabled>
    2eaa:	99 23       	and	r25, r25
    2eac:	89 f0       	breq	.+34     	; 0x2ed0 <USB_Device_ProcessControlRequest+0x8e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2eae:	82 60       	ori	r24, 0x02	; 2
    2eb0:	0f c0       	rjmp	.+30     	; 0x2ed0 <USB_Device_ProcessControlRequest+0x8e>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2eb2:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <USB_ControlRequest+0x4>
    2eb6:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    2eb8:	87 30       	cpi	r24, 0x07	; 7
    2eba:	08 f0       	brcs	.+2      	; 0x2ebe <USB_Device_ProcessControlRequest+0x7c>
    2ebc:	0b c1       	rjmp	.+534    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2ebe:	e9 ee       	ldi	r30, 0xE9	; 233
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2ec4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    2ec8:	85 fb       	bst	r24, 5
    2eca:	88 27       	eor	r24, r24
    2ecc:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2ece:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2ed0:	e8 ee       	ldi	r30, 0xE8	; 232
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	90 81       	ld	r25, Z
    2ed6:	97 7f       	andi	r25, 0xF7	; 247
    2ed8:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2eda:	a1 ef       	ldi	r26, 0xF1	; 241
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    2ee0:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2ee2:	80 81       	ld	r24, Z
    2ee4:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2ee6:	80 83       	st	Z, r24
    2ee8:	c9 dd       	rcall	.-1134   	; 0x2a7c <Endpoint_ClearStatusStage>
    2eea:	f4 c0       	rjmp	.+488    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2eec:	22 23       	and	r18, r18
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <USB_Device_ProcessControlRequest+0xb0>
    2ef0:	00 c1       	rjmp	.+512    	; 0x30f2 <USB_Device_ProcessControlRequest+0x2b0>
    2ef2:	22 30       	cpi	r18, 0x02	; 2
    2ef4:	09 f0       	breq	.+2      	; 0x2ef8 <USB_Device_ProcessControlRequest+0xb6>
    2ef6:	ee c0       	rjmp	.+476    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
    2ef8:	01 c1       	rjmp	.+514    	; 0x30fc <USB_Device_ProcessControlRequest+0x2ba>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	33 30       	cpi	r19, 0x03	; 3
    2efe:	09 f0       	breq	.+2      	; 0x2f02 <USB_Device_ProcessControlRequest+0xc0>
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <USB_Device_RemoteWakeupEnabled>
    2f06:	2c c0       	rjmp	.+88     	; 0x2f60 <USB_Device_ProcessControlRequest+0x11e>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2f08:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <USB_ControlRequest+0x4>
    2f0c:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    2f0e:	9f ef       	ldi	r25, 0xFF	; 255
    2f10:	98 0f       	add	r25, r24
    2f12:	96 30       	cpi	r25, 0x06	; 6
    2f14:	08 f0       	brcs	.+2      	; 0x2f18 <USB_Device_ProcessControlRequest+0xd6>
    2f16:	de c0       	rjmp	.+444    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2f18:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2f1c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2f20:	90 ff       	sbrs	r25, 0
    2f22:	1e c0       	rjmp	.+60     	; 0x2f60 <USB_Device_ProcessControlRequest+0x11e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2f24:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <USB_ControlRequest+0x1>
    2f28:	93 30       	cpi	r25, 0x03	; 3
    2f2a:	31 f4       	brne	.+12     	; 0x2f38 <USB_Device_ProcessControlRequest+0xf6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2f2c:	eb ee       	ldi	r30, 0xEB	; 235
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	80 81       	ld	r24, Z
    2f32:	80 62       	ori	r24, 0x20	; 32
    2f34:	80 83       	st	Z, r24
    2f36:	14 c0       	rjmp	.+40     	; 0x2f60 <USB_Device_ProcessControlRequest+0x11e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2f38:	eb ee       	ldi	r30, 0xEB	; 235
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	90 81       	ld	r25, Z
    2f3e:	90 61       	ori	r25, 0x10	; 16
    2f40:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2f42:	21 e0       	ldi	r18, 0x01	; 1
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	a9 01       	movw	r20, r18
    2f48:	02 c0       	rjmp	.+4      	; 0x2f4e <USB_Device_ProcessControlRequest+0x10c>
    2f4a:	44 0f       	add	r20, r20
    2f4c:	55 1f       	adc	r21, r21
    2f4e:	8a 95       	dec	r24
    2f50:	e2 f7       	brpl	.-8      	; 0x2f4a <USB_Device_ProcessControlRequest+0x108>
    2f52:	aa ee       	ldi	r26, 0xEA	; 234
    2f54:	b0 e0       	ldi	r27, 0x00	; 0
    2f56:	4c 93       	st	X, r20
				UERST = 0;
    2f58:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2f5a:	80 81       	ld	r24, Z
    2f5c:	88 60       	ori	r24, 0x08	; 8
    2f5e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2f60:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2f64:	e8 ee       	ldi	r30, 0xE8	; 232
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2f6c:	80 83       	st	Z, r24
    2f6e:	86 dd       	rcall	.-1268   	; 0x2a7c <Endpoint_ClearStatusStage>
    2f70:	b1 c0       	rjmp	.+354    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2f72:	21 11       	cpse	r18, r1
    2f74:	af c0       	rjmp	.+350    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2f76:	10 91 73 04 	lds	r17, 0x0473	; 0x800473 <USB_ControlRequest+0x2>
    2f7a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2f7c:	e3 ee       	ldi	r30, 0xE3	; 227
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	80 78       	andi	r24, 0x80	; 128
    2f84:	81 2b       	or	r24, r17
    2f86:	80 83       	st	Z, r24
    2f88:	e8 ee       	ldi	r30, 0xE8	; 232
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	80 81       	ld	r24, Z
    2f8e:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2f90:	80 83       	st	Z, r24
    2f92:	74 dd       	rcall	.-1304   	; 0x2a7c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2f94:	e8 ee       	ldi	r30, 0xE8	; 232
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    2f9a:	80 ff       	sbrs	r24, 0
    2f9c:	fd cf       	rjmp	.-6      	; 0x2f98 <USB_Device_ProcessControlRequest+0x156>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2f9e:	e3 ee       	ldi	r30, 0xE3	; 227
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	80 68       	ori	r24, 0x80	; 128
    2fa6:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2fa8:	11 11       	cpse	r17, r1
    2faa:	02 c0       	rjmp	.+4      	; 0x2fb0 <USB_Device_ProcessControlRequest+0x16e>
    2fac:	82 e0       	ldi	r24, 0x02	; 2
    2fae:	01 c0       	rjmp	.+2      	; 0x2fb2 <USB_Device_ProcessControlRequest+0x170>
    2fb0:	83 e0       	ldi	r24, 0x03	; 3
    2fb2:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <USB_DeviceState>
    2fb6:	8e c0       	rjmp	.+284    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2fb8:	20 58       	subi	r18, 0x80	; 128
    2fba:	22 30       	cpi	r18, 0x02	; 2
    2fbc:	08 f0       	brcs	.+2      	; 0x2fc0 <USB_Device_ProcessControlRequest+0x17e>
    2fbe:	8a c0       	rjmp	.+276    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2fc0:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <USB_ControlRequest+0x2>
    2fc4:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <USB_ControlRequest+0x3>
    2fc8:	8c 3d       	cpi	r24, 0xDC	; 220
    2fca:	53 e0       	ldi	r21, 0x03	; 3
    2fcc:	95 07       	cpc	r25, r21
    2fce:	99 f5       	brne	.+102    	; 0x3036 <USB_Device_ProcessControlRequest+0x1f4>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2fd0:	83 e0       	ldi	r24, 0x03	; 3
    2fd2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2fd4:	8a e2       	ldi	r24, 0x2A	; 42
    2fd6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2fd8:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2fda:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2fdc:	de 01       	movw	r26, r28
    2fde:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2fe2:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2fe4:	41 e2       	ldi	r20, 0x21	; 33
    2fe6:	e3 2f       	mov	r30, r19
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    2fee:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    2ff0:	20 ff       	sbrs	r18, 0
    2ff2:	03 c0       	rjmp	.+6      	; 0x2ffa <USB_Device_ProcessControlRequest+0x1b8>
					{
						SerialByte >>= 4;
    2ff4:	82 95       	swap	r24
    2ff6:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    2ff8:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2ffa:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2ffc:	8a 30       	cpi	r24, 0x0A	; 10
    2ffe:	18 f0       	brcs	.+6      	; 0x3006 <USB_Device_ProcessControlRequest+0x1c4>
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	c7 96       	adiw	r24, 0x37	; 55
    3004:	02 c0       	rjmp	.+4      	; 0x300a <USB_Device_ProcessControlRequest+0x1c8>
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	c0 96       	adiw	r24, 0x30	; 48
    300a:	8d 93       	st	X+, r24
    300c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    300e:	2f 5f       	subi	r18, 0xFF	; 255
    3010:	24 31       	cpi	r18, 0x14	; 20
    3012:	49 f7       	brne	.-46     	; 0x2fe6 <USB_Device_ProcessControlRequest+0x1a4>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    3014:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3016:	08 ee       	ldi	r16, 0xE8	; 232
    3018:	10 e0       	ldi	r17, 0x00	; 0
    301a:	f8 01       	movw	r30, r16
    301c:	80 81       	ld	r24, Z
    301e:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    3020:	80 83       	st	Z, r24
    3022:	6a e2       	ldi	r22, 0x2A	; 42
    3024:	70 e0       	ldi	r23, 0x00	; 0
    3026:	ce 01       	movw	r24, r28
    3028:	01 96       	adiw	r24, 0x01	; 1
    302a:	c3 db       	rcall	.-2170   	; 0x27b2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    302c:	f8 01       	movw	r30, r16
    302e:	80 81       	ld	r24, Z
    3030:	8b 77       	andi	r24, 0x7B	; 123
    3032:	80 83       	st	Z, r24
    3034:	4f c0       	rjmp	.+158    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3036:	60 91 75 04 	lds	r22, 0x0475	; 0x800475 <USB_ControlRequest+0x4>
    303a:	70 91 76 04 	lds	r23, 0x0476	; 0x800476 <USB_ControlRequest+0x5>
    303e:	ae 01       	movw	r20, r28
    3040:	4f 5f       	subi	r20, 0xFF	; 255
    3042:	5f 4f       	sbci	r21, 0xFF	; 255
    3044:	c2 da       	rcall	.-2684   	; 0x25ca <CALLBACK_USB_GetDescriptor>
    3046:	bc 01       	movw	r22, r24
    3048:	89 2b       	or	r24, r25
    304a:	09 f4       	brne	.+2      	; 0x304e <USB_Device_ProcessControlRequest+0x20c>
    304c:	43 c0       	rjmp	.+134    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    304e:	08 ee       	ldi	r16, 0xE8	; 232
    3050:	10 e0       	ldi	r17, 0x00	; 0
    3052:	f8 01       	movw	r30, r16
    3054:	90 81       	ld	r25, Z
    3056:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3058:	90 83       	st	Z, r25
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	9a 81       	ldd	r25, Y+2	; 0x02
    305e:	28 dc       	rcall	.-1968   	; 0x28b0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3060:	f8 01       	movw	r30, r16
    3062:	80 81       	ld	r24, Z
    3064:	8b 77       	andi	r24, 0x7B	; 123
    3066:	80 83       	st	Z, r24
    3068:	35 c0       	rjmp	.+106    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    306a:	20 38       	cpi	r18, 0x80	; 128
    306c:	99 f5       	brne	.+102    	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    306e:	e8 ee       	ldi	r30, 0xE8	; 232
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	87 7f       	andi	r24, 0xF7	; 247

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3076:	80 83       	st	Z, r24
    3078:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    307c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3080:	80 81       	ld	r24, Z
    3082:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3084:	80 83       	st	Z, r24
    3086:	fa dc       	rcall	.-1548   	; 0x2a7c <Endpoint_ClearStatusStage>
    3088:	25 c0       	rjmp	.+74     	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    308a:	21 11       	cpse	r18, r1
    308c:	23 c0       	rjmp	.+70     	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    308e:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <USB_ControlRequest+0x2>
    3092:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <USB_ControlRequest+0x3>
    3096:	99 27       	eor	r25, r25
    3098:	02 97       	sbiw	r24, 0x02	; 2
    309a:	e4 f4       	brge	.+56     	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    309c:	e8 ee       	ldi	r30, 0xE8	; 232
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    30a4:	80 83       	st	Z, r24
    30a6:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <USB_ControlRequest+0x2>
    30aa:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    30ae:	e6 dc       	rcall	.-1588   	; 0x2a7c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    30b0:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <USB_Device_ConfigurationNumber>
    30b4:	88 23       	and	r24, r24
    30b6:	21 f0       	breq	.+8      	; 0x30c0 <USB_Device_ProcessControlRequest+0x27e>
	  USB_DeviceState = DEVICE_STATE_Configured;
    30b8:	84 e0       	ldi	r24, 0x04	; 4
    30ba:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <USB_DeviceState>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    30be:	09 c0       	rjmp	.+18     	; 0x30d2 <USB_Device_ProcessControlRequest+0x290>
    30c0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    30c4:	88 23       	and	r24, r24
    30c6:	14 f0       	brlt	.+4      	; 0x30cc <USB_Device_ProcessControlRequest+0x28a>
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	01 c0       	rjmp	.+2      	; 0x30ce <USB_Device_ProcessControlRequest+0x28c>
    30cc:	84 e0       	ldi	r24, 0x04	; 4
    30ce:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    30d2:	13 d2       	rcall	.+1062   	; 0x34fa <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    30d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    30d8:	83 ff       	sbrs	r24, 3
    30da:	16 c0       	rjmp	.+44     	; 0x3108 <USB_Device_ProcessControlRequest+0x2c6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    30dc:	e8 ee       	ldi	r30, 0xE8	; 232
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	87 7f       	andi	r24, 0xF7	; 247
    30e4:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    30e6:	eb ee       	ldi	r30, 0xEB	; 235
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	80 81       	ld	r24, Z
    30ec:	80 62       	ori	r24, 0x20	; 32
    30ee:	80 83       	st	Z, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    30f0:	0b c0       	rjmp	.+22     	; 0x3108 <USB_Device_ProcessControlRequest+0x2c6>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    30f2:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <USB_ControlRequest+0x2>
    30f6:	81 30       	cpi	r24, 0x01	; 1
    30f8:	69 f7       	brne	.-38     	; 0x30d4 <USB_Device_ProcessControlRequest+0x292>
    30fa:	ff ce       	rjmp	.-514    	; 0x2efa <USB_Device_ProcessControlRequest+0xb8>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    30fc:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <USB_ControlRequest+0x2>
    3100:	88 23       	and	r24, r24
    3102:	09 f4       	brne	.+2      	; 0x3106 <USB_Device_ProcessControlRequest+0x2c4>
    3104:	01 cf       	rjmp	.-510    	; 0x2f08 <USB_Device_ProcessControlRequest+0xc6>
    3106:	2c cf       	rjmp	.-424    	; 0x2f60 <USB_Device_ProcessControlRequest+0x11e>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    3108:	aa 96       	adiw	r28, 0x2a	; 42
    310a:	0f b6       	in	r0, 0x3f	; 63
    310c:	f8 94       	cli
    310e:	de bf       	out	0x3e, r29	; 62
    3110:	0f be       	out	0x3f, r0	; 63
    3112:	cd bf       	out	0x3d, r28	; 61
    3114:	df 91       	pop	r29
    3116:	cf 91       	pop	r28
    3118:	1f 91       	pop	r17
    311a:	0f 91       	pop	r16
    311c:	08 95       	ret

0000311e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    311e:	08 95       	ret

00003120 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    3120:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    3122:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <USB_DeviceState>
    3126:	88 23       	and	r24, r24
    3128:	99 f0       	breq	.+38     	; 0x3150 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    312a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    312e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3130:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    3134:	98 2f       	mov	r25, r24
    3136:	91 70       	andi	r25, 0x01	; 1
    3138:	80 fd       	sbrc	r24, 0
    313a:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    313c:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    313e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3142:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    3146:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    3148:	7c de       	rcall	.-776    	; 0x2e42 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    314a:	cf 70       	andi	r28, 0x0F	; 15
    314c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    3150:	cf 91       	pop	r28
    3152:	08 95       	ret

00003154 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    3154:	08 95       	ret

00003156 <IDN>:
	PORTD= (((Device)*10+PORT)%8)|(PORTD&0b11111000);
	
}	
static scpi_result_t IDN(scpi_t * context)
	{
				strcpy(bf,"XIRGO TECH QUAL INSTR");
    3156:	86 e1       	ldi	r24, 0x16	; 22
    3158:	ef ec       	ldi	r30, 0xCF	; 207
    315a:	f2 e0       	ldi	r31, 0x02	; 2
    315c:	a5 ef       	ldi	r26, 0xF5	; 245
    315e:	b5 e0       	ldi	r27, 0x05	; 5
    3160:	01 90       	ld	r0, Z+
    3162:	0d 92       	st	X+, r0
    3164:	8a 95       	dec	r24
    3166:	e1 f7       	brne	.-8      	; 0x3160 <IDN+0xa>

	}
    3168:	08 95       	ret

0000316a <DEV_OUT_POR_SEL>:
		sprintf(bf,"hello %n",i);

		switchToMUXport(device,  port);

}
static scpi_result_t DEV_OUT_POR_SEL(scpi_t * context){
    316a:	cf 93       	push	r28
    316c:	df 93       	push	r29
    316e:	00 d0       	rcall	.+0      	; 0x3170 <DEV_OUT_POR_SEL+0x6>
    3170:	00 d0       	rcall	.+0      	; 0x3172 <DEV_OUT_POR_SEL+0x8>
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
	int32_t port;
	if (!SCPI_ParamInt(context, &port, FALSE)) {
    3176:	40 e0       	ldi	r20, 0x00	; 0
    3178:	be 01       	movw	r22, r28
    317a:	6f 5f       	subi	r22, 0xFF	; 255
    317c:	7f 4f       	sbci	r23, 0xFF	; 255
    317e:	0e 94 b5 0a 	call	0x156a	; 0x156a <SCPI_ParamInt32>
    3182:	81 11       	cpse	r24, r1
    3184:	0b c0       	rjmp	.+22     	; 0x319c <DEV_OUT_POR_SEL+0x32>
		strcpy(bf,"Please Enter The Port Number");
    3186:	8d e1       	ldi	r24, 0x1D	; 29
    3188:	e5 ee       	ldi	r30, 0xE5	; 229
    318a:	f2 e0       	ldi	r31, 0x02	; 2
    318c:	a5 ef       	ldi	r26, 0xF5	; 245
    318e:	b5 e0       	ldi	r27, 0x05	; 5
    3190:	01 90       	ld	r0, Z+
    3192:	0d 92       	st	X+, r0
    3194:	8a 95       	dec	r24
    3196:	e1 f7       	brne	.-8      	; 0x3190 <DEV_OUT_POR_SEL+0x26>

		return SCPI_RES_ERR;
    3198:	8f ef       	ldi	r24, 0xFF	; 255
    319a:	60 c0       	rjmp	.+192    	; 0x325c <DEV_OUT_POR_SEL+0xf2>
	}
PORTC=(1<<device%2)|(PORTC&0b11111000);
    319c:	48 b1       	in	r20, 0x08	; 8
    319e:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <device>
    31a2:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <device+0x1>
    31a6:	a0 91 f3 05 	lds	r26, 0x05F3	; 0x8005f3 <device+0x2>
    31aa:	b0 91 f4 05 	lds	r27, 0x05F4	; 0x8005f4 <device+0x3>
    31ae:	81 70       	andi	r24, 0x01	; 1
    31b0:	99 27       	eor	r25, r25
    31b2:	aa 27       	eor	r26, r26
    31b4:	b0 78       	andi	r27, 0x80	; 128
    31b6:	bb 23       	and	r27, r27
    31b8:	54 f4       	brge	.+20     	; 0x31ce <DEV_OUT_POR_SEL+0x64>
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	a1 09       	sbc	r26, r1
    31be:	b1 09       	sbc	r27, r1
    31c0:	8e 6f       	ori	r24, 0xFE	; 254
    31c2:	9f 6f       	ori	r25, 0xFF	; 255
    31c4:	af 6f       	ori	r26, 0xFF	; 255
    31c6:	bf 6f       	ori	r27, 0xFF	; 255
    31c8:	01 96       	adiw	r24, 0x01	; 1
    31ca:	a1 1d       	adc	r26, r1
    31cc:	b1 1d       	adc	r27, r1
    31ce:	21 e0       	ldi	r18, 0x01	; 1
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	b9 01       	movw	r22, r18
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <DEV_OUT_POR_SEL+0x70>
    31d6:	66 0f       	add	r22, r22
    31d8:	77 1f       	adc	r23, r23
    31da:	8a 95       	dec	r24
    31dc:	e2 f7       	brpl	.-8      	; 0x31d6 <DEV_OUT_POR_SEL+0x6c>
    31de:	cb 01       	movw	r24, r22
    31e0:	94 2f       	mov	r25, r20
    31e2:	98 7f       	andi	r25, 0xF8	; 248
    31e4:	89 2b       	or	r24, r25
    31e6:	88 b9       	out	0x08, r24	; 8
PORTD=(((device%2)<<2+port))|(PORTD&0b11111000);
    31e8:	2b b1       	in	r18, 0x0b	; 11
    31ea:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <device>
    31ee:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <device+0x1>
    31f2:	a0 91 f3 05 	lds	r26, 0x05F3	; 0x8005f3 <device+0x2>
    31f6:	b0 91 f4 05 	lds	r27, 0x05F4	; 0x8005f4 <device+0x3>
    31fa:	81 70       	andi	r24, 0x01	; 1
    31fc:	99 27       	eor	r25, r25
    31fe:	aa 27       	eor	r26, r26
    3200:	b0 78       	andi	r27, 0x80	; 128
    3202:	bb 23       	and	r27, r27
    3204:	54 f4       	brge	.+20     	; 0x321a <DEV_OUT_POR_SEL+0xb0>
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	a1 09       	sbc	r26, r1
    320a:	b1 09       	sbc	r27, r1
    320c:	8e 6f       	ori	r24, 0xFE	; 254
    320e:	9f 6f       	ori	r25, 0xFF	; 255
    3210:	af 6f       	ori	r26, 0xFF	; 255
    3212:	bf 6f       	ori	r27, 0xFF	; 255
    3214:	01 96       	adiw	r24, 0x01	; 1
    3216:	a1 1d       	adc	r26, r1
    3218:	b1 1d       	adc	r27, r1
    321a:	49 81       	ldd	r20, Y+1	; 0x01
    321c:	5a 81       	ldd	r21, Y+2	; 0x02
    321e:	4e 5f       	subi	r20, 0xFE	; 254
    3220:	5f 4f       	sbci	r21, 0xFF	; 255
    3222:	04 c0       	rjmp	.+8      	; 0x322c <DEV_OUT_POR_SEL+0xc2>
    3224:	88 0f       	add	r24, r24
    3226:	99 1f       	adc	r25, r25
    3228:	aa 1f       	adc	r26, r26
    322a:	bb 1f       	adc	r27, r27
    322c:	4a 95       	dec	r20
    322e:	d2 f7       	brpl	.-12     	; 0x3224 <DEV_OUT_POR_SEL+0xba>
    3230:	28 7f       	andi	r18, 0xF8	; 248
    3232:	82 2b       	or	r24, r18
    3234:	8b b9       	out	0x0b, r24	; 11
		sprintf(bf,"hello %n",PORTD);
    3236:	8b b1       	in	r24, 0x0b	; 11
    3238:	1f 92       	push	r1
    323a:	8f 93       	push	r24
    323c:	82 e0       	ldi	r24, 0x02	; 2
    323e:	93 e0       	ldi	r25, 0x03	; 3
    3240:	9f 93       	push	r25
    3242:	8f 93       	push	r24
    3244:	85 ef       	ldi	r24, 0xF5	; 245
    3246:	95 e0       	ldi	r25, 0x05	; 5
    3248:	9f 93       	push	r25
    324a:	8f 93       	push	r24
    324c:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <sprintf>

}
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	df 91       	pop	r29
    3266:	cf 91       	pop	r28
    3268:	08 95       	ret

0000326a <DEV_SEL>:
	return SCPI_RES_OK;
}
//Select INPUT PORT for the device
static scpi_result_t DEV_SEL(scpi_t * context){
		
		if (!SCPI_ParamInt(context, &device, FALSE)) {
    326a:	40 e0       	ldi	r20, 0x00	; 0
    326c:	61 ef       	ldi	r22, 0xF1	; 241
    326e:	75 e0       	ldi	r23, 0x05	; 5
    3270:	0e 94 b5 0a 	call	0x156a	; 0x156a <SCPI_ParamInt32>
    3274:	81 11       	cpse	r24, r1
    3276:	0a c0       	rjmp	.+20     	; 0x328c <DEV_SEL+0x22>
			strcpy(bf,"Please Enter The Device Number");
    3278:	8f e1       	ldi	r24, 0x1F	; 31
    327a:	eb e0       	ldi	r30, 0x0B	; 11
    327c:	f3 e0       	ldi	r31, 0x03	; 3
    327e:	a5 ef       	ldi	r26, 0xF5	; 245
    3280:	b5 e0       	ldi	r27, 0x05	; 5
    3282:	01 90       	ld	r0, Z+
    3284:	0d 92       	st	X+, r0
    3286:	8a 95       	dec	r24
    3288:	e1 f7       	brne	.-8      	; 0x3282 <DEV_SEL+0x18>

			return SCPI_RES_ERR;
    328a:	09 c0       	rjmp	.+18     	; 0x329e <DEV_SEL+0x34>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    328c:	4a e0       	ldi	r20, 0x0A	; 10
    328e:	65 ef       	ldi	r22, 0xF5	; 245
    3290:	75 e0       	ldi	r23, 0x05	; 5
    3292:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <device>
    3296:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <device+0x1>
    329a:	0e 94 c5 21 	call	0x438a	; 0x438a <__itoa_ncheck>
		
		itoa(device,bf,10);

		return SCPI_RES_ERR;

}
    329e:	8f ef       	ldi	r24, 0xFF	; 255
    32a0:	08 95       	ret

000032a2 <turnON>:
#include "scpi-def.h"
char bf[80];
int32_t device;

void turnON(int32_t DEVICE){
	PORTB|= (1<<DEVICE);
    32a2:	25 b1       	in	r18, 0x05	; 5
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	02 c0       	rjmp	.+4      	; 0x32ae <turnON+0xc>
    32aa:	88 0f       	add	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	6a 95       	dec	r22
    32b0:	e2 f7       	brpl	.-8      	; 0x32aa <turnON+0x8>
    32b2:	82 2b       	or	r24, r18
    32b4:	85 b9       	out	0x05, r24	; 5
    32b6:	08 95       	ret

000032b8 <turnOFF>:


}
void turnOFF(int32_t DEVICE){
	PORTB&= !(1<<DEVICE);
    32b8:	85 b1       	in	r24, 0x05	; 5
    32ba:	21 e0       	ldi	r18, 0x01	; 1
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <turnOFF+0xc>
    32c0:	22 0f       	add	r18, r18
    32c2:	33 1f       	adc	r19, r19
    32c4:	6a 95       	dec	r22
    32c6:	e2 f7       	brpl	.-8      	; 0x32c0 <turnOFF+0x8>
    32c8:	91 e0       	ldi	r25, 0x01	; 1
    32ca:	23 2b       	or	r18, r19
    32cc:	09 f0       	breq	.+2      	; 0x32d0 <turnOFF+0x18>
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	89 23       	and	r24, r25
    32d2:	85 b9       	out	0x05, r24	; 5
    32d4:	08 95       	ret

000032d6 <DEV_POW>:
static scpi_result_t IDN(scpi_t * context)
	{
				strcpy(bf,"XIRGO TECH QUAL INSTR");

	}
static scpi_result_t DEV_POW(scpi_t * context){
    32d6:	0f 93       	push	r16
    32d8:	1f 93       	push	r17
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	1f 92       	push	r1
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	8c 01       	movw	r16, r24

	scpi_bool_t cond;

	/* read first parameter if present */
	
	if (!SCPI_ParamInt(context, &device, FALSE)) {
    32e6:	40 e0       	ldi	r20, 0x00	; 0
    32e8:	61 ef       	ldi	r22, 0xF1	; 241
    32ea:	75 e0       	ldi	r23, 0x05	; 5
    32ec:	0e 94 b5 0a 	call	0x156a	; 0x156a <SCPI_ParamInt32>
    32f0:	81 11       	cpse	r24, r1
    32f2:	0b c0       	rjmp	.+22     	; 0x330a <DEV_POW+0x34>
		strcpy(bf,"Please Enter The Device Number");
    32f4:	8f e1       	ldi	r24, 0x1F	; 31
    32f6:	eb e0       	ldi	r30, 0x0B	; 11
    32f8:	f3 e0       	ldi	r31, 0x03	; 3
    32fa:	a5 ef       	ldi	r26, 0xF5	; 245
    32fc:	b5 e0       	ldi	r27, 0x05	; 5
    32fe:	01 90       	ld	r0, Z+
    3300:	0d 92       	st	X+, r0
    3302:	8a 95       	dec	r24
    3304:	e1 f7       	brne	.-8      	; 0x32fe <DEV_POW+0x28>

		return SCPI_RES_ERR;
    3306:	8f ef       	ldi	r24, 0xFF	; 255
    3308:	35 c0       	rjmp	.+106    	; 0x3374 <DEV_POW+0x9e>
	}

	/* read second paraeter if present */
	if (!SCPI_ParamBool(context, &cond, FALSE)) {
    330a:	40 e0       	ldi	r20, 0x00	; 0
    330c:	be 01       	movw	r22, r28
    330e:	6f 5f       	subi	r22, 0xFF	; 255
    3310:	7f 4f       	sbci	r23, 0xFF	; 255
    3312:	c8 01       	movw	r24, r16
    3314:	0e 94 b8 0a 	call	0x1570	; 0x1570 <SCPI_ParamBool>
    3318:	81 11       	cpse	r24, r1
    331a:	0b c0       	rjmp	.+22     	; 0x3332 <DEV_POW+0x5c>
		strcpy(bf,"Please Enter The Device State");
    331c:	8e e1       	ldi	r24, 0x1E	; 30
    331e:	ea e2       	ldi	r30, 0x2A	; 42
    3320:	f3 e0       	ldi	r31, 0x03	; 3
    3322:	a5 ef       	ldi	r26, 0xF5	; 245
    3324:	b5 e0       	ldi	r27, 0x05	; 5
    3326:	01 90       	ld	r0, Z+
    3328:	0d 92       	st	X+, r0
    332a:	8a 95       	dec	r24
    332c:	e1 f7       	brne	.-8      	; 0x3326 <DEV_POW+0x50>

		return SCPI_RES_ERR;
    332e:	8f ef       	ldi	r24, 0xFF	; 255
    3330:	21 c0       	rjmp	.+66     	; 0x3374 <DEV_POW+0x9e>
    3332:	4a e0       	ldi	r20, 0x0A	; 10
    3334:	65 ef       	ldi	r22, 0xF5	; 245
    3336:	75 e0       	ldi	r23, 0x05	; 5
    3338:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <device>
    333c:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <device+0x1>
    3340:	0e 94 c5 21 	call	0x438a	; 0x438a <__itoa_ncheck>
		itoa(device,bf,10);


//If device condition is on

	if(cond){
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	88 23       	and	r24, r24
    3348:	59 f0       	breq	.+22     	; 0x3360 <DEV_POW+0x8a>
		turnON(device);
    334a:	60 91 f1 05 	lds	r22, 0x05F1	; 0x8005f1 <device>
    334e:	70 91 f2 05 	lds	r23, 0x05F2	; 0x8005f2 <device+0x1>
    3352:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <device+0x2>
    3356:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <device+0x3>
    335a:	a3 df       	rcall	.-186    	; 0x32a2 <turnON>
		}else{
		turnOFF(device);
	}
	return SCPI_RES_OK;
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	0a c0       	rjmp	.+20     	; 0x3374 <DEV_POW+0x9e>
//If device condition is on

	if(cond){
		turnON(device);
		}else{
		turnOFF(device);
    3360:	60 91 f1 05 	lds	r22, 0x05F1	; 0x8005f1 <device>
    3364:	70 91 f2 05 	lds	r23, 0x05F2	; 0x8005f2 <device+0x1>
    3368:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <device+0x2>
    336c:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <device+0x3>
    3370:	a3 df       	rcall	.-186    	; 0x32b8 <turnOFF>
	}
	return SCPI_RES_OK;
    3372:	81 e0       	ldi	r24, 0x01	; 1
}
    3374:	0f 90       	pop	r0
    3376:	df 91       	pop	r29
    3378:	cf 91       	pop	r28
    337a:	1f 91       	pop	r17
    337c:	0f 91       	pop	r16
    337e:	08 95       	ret

00003380 <switchToMUXport>:
void turnOFF(int32_t DEVICE){
	PORTB&= !(1<<DEVICE);

}

void switchToMUXport(int32_t Device, int32_t PORT){
    3380:	cf 92       	push	r12
    3382:	df 92       	push	r13
    3384:	ef 92       	push	r14
    3386:	ff 92       	push	r15
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
	PORTA=(1<<(((Device)*10+PORT)>>3));
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	88 0f       	add	r24, r24
    3392:	99 1f       	adc	r25, r25
    3394:	aa 1f       	adc	r26, r26
    3396:	bb 1f       	adc	r27, r27
    3398:	6c 01       	movw	r12, r24
    339a:	7d 01       	movw	r14, r26
    339c:	cc 0c       	add	r12, r12
    339e:	dd 1c       	adc	r13, r13
    33a0:	ee 1c       	adc	r14, r14
    33a2:	ff 1c       	adc	r15, r15
    33a4:	cc 0c       	add	r12, r12
    33a6:	dd 1c       	adc	r13, r13
    33a8:	ee 1c       	adc	r14, r14
    33aa:	ff 1c       	adc	r15, r15
    33ac:	8c 0d       	add	r24, r12
    33ae:	9d 1d       	adc	r25, r13
    33b0:	ae 1d       	adc	r26, r14
    33b2:	bf 1d       	adc	r27, r15
    33b4:	89 01       	movw	r16, r18
    33b6:	9a 01       	movw	r18, r20
    33b8:	08 0f       	add	r16, r24
    33ba:	19 1f       	adc	r17, r25
    33bc:	2a 1f       	adc	r18, r26
    33be:	3b 1f       	adc	r19, r27
    33c0:	68 01       	movw	r12, r16
    33c2:	79 01       	movw	r14, r18
    33c4:	68 94       	set
    33c6:	12 f8       	bld	r1, 2
    33c8:	f5 94       	asr	r15
    33ca:	e7 94       	ror	r14
    33cc:	d7 94       	ror	r13
    33ce:	c7 94       	ror	r12
    33d0:	16 94       	lsr	r1
    33d2:	d1 f7       	brne	.-12     	; 0x33c8 <switchToMUXport+0x48>
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	02 c0       	rjmp	.+4      	; 0x33de <switchToMUXport+0x5e>
    33da:	88 0f       	add	r24, r24
    33dc:	99 1f       	adc	r25, r25
    33de:	ca 94       	dec	r12
    33e0:	e2 f7       	brpl	.-8      	; 0x33da <switchToMUXport+0x5a>
    33e2:	82 b9       	out	0x02, r24	; 2
	PORTD= (((Device)*10+PORT)%8)|(PORTD&0b11111000);
    33e4:	6b b1       	in	r22, 0x0b	; 11
    33e6:	d9 01       	movw	r26, r18
    33e8:	c8 01       	movw	r24, r16
    33ea:	87 70       	andi	r24, 0x07	; 7
    33ec:	99 27       	eor	r25, r25
    33ee:	aa 27       	eor	r26, r26
    33f0:	b0 78       	andi	r27, 0x80	; 128
    33f2:	bb 23       	and	r27, r27
    33f4:	54 f4       	brge	.+20     	; 0x340a <switchToMUXport+0x8a>
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	a1 09       	sbc	r26, r1
    33fa:	b1 09       	sbc	r27, r1
    33fc:	88 6f       	ori	r24, 0xF8	; 248
    33fe:	9f 6f       	ori	r25, 0xFF	; 255
    3400:	af 6f       	ori	r26, 0xFF	; 255
    3402:	bf 6f       	ori	r27, 0xFF	; 255
    3404:	01 96       	adiw	r24, 0x01	; 1
    3406:	a1 1d       	adc	r26, r1
    3408:	b1 1d       	adc	r27, r1
    340a:	68 7f       	andi	r22, 0xF8	; 248
    340c:	26 2f       	mov	r18, r22
    340e:	28 2b       	or	r18, r24
    3410:	2b b9       	out	0x0b, r18	; 11
	
}	
    3412:	1f 91       	pop	r17
    3414:	0f 91       	pop	r16
    3416:	ff 90       	pop	r15
    3418:	ef 90       	pop	r14
    341a:	df 90       	pop	r13
    341c:	cf 90       	pop	r12
    341e:	08 95       	ret

00003420 <DEV_IN_POR_SEL>:
		itoa(device,bf,10);

		return SCPI_RES_ERR;

}
static scpi_result_t DEV_IN_POR_SEL(scpi_t * context){
    3420:	cf 93       	push	r28
    3422:	df 93       	push	r29
    3424:	00 d0       	rcall	.+0      	; 0x3426 <DEV_IN_POR_SEL+0x6>
    3426:	00 d0       	rcall	.+0      	; 0x3428 <DEV_IN_POR_SEL+0x8>
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
	int32_t port;
		if (!SCPI_ParamInt(context, &port, FALSE)) {
    342c:	40 e0       	ldi	r20, 0x00	; 0
    342e:	be 01       	movw	r22, r28
    3430:	6f 5f       	subi	r22, 0xFF	; 255
    3432:	7f 4f       	sbci	r23, 0xFF	; 255
    3434:	0e 94 b5 0a 	call	0x156a	; 0x156a <SCPI_ParamInt32>
    3438:	81 11       	cpse	r24, r1
    343a:	0b c0       	rjmp	.+22     	; 0x3452 <DEV_IN_POR_SEL+0x32>
				strcpy(bf,"Please Enter The Port Number");
    343c:	8d e1       	ldi	r24, 0x1D	; 29
    343e:	e5 ee       	ldi	r30, 0xE5	; 229
    3440:	f2 e0       	ldi	r31, 0x02	; 2
    3442:	a5 ef       	ldi	r26, 0xF5	; 245
    3444:	b5 e0       	ldi	r27, 0x05	; 5
    3446:	01 90       	ld	r0, Z+
    3448:	0d 92       	st	X+, r0
    344a:	8a 95       	dec	r24
    344c:	e1 f7       	brne	.-8      	; 0x3446 <DEV_IN_POR_SEL+0x26>

				return SCPI_RES_ERR;
    344e:	8f ef       	ldi	r24, 0xFF	; 255
    3450:	1e c0       	rjmp	.+60     	; 0x348e <DEV_IN_POR_SEL+0x6e>
		}
		int i=0;
		sprintf(bf,"hello %n",i);
    3452:	1f 92       	push	r1
    3454:	1f 92       	push	r1
    3456:	82 e0       	ldi	r24, 0x02	; 2
    3458:	93 e0       	ldi	r25, 0x03	; 3
    345a:	9f 93       	push	r25
    345c:	8f 93       	push	r24
    345e:	85 ef       	ldi	r24, 0xF5	; 245
    3460:	95 e0       	ldi	r25, 0x05	; 5
    3462:	9f 93       	push	r25
    3464:	8f 93       	push	r24
    3466:	b4 d7       	rcall	.+3944   	; 0x43d0 <sprintf>

		switchToMUXport(device,  port);
    3468:	29 81       	ldd	r18, Y+1	; 0x01
    346a:	3a 81       	ldd	r19, Y+2	; 0x02
    346c:	4b 81       	ldd	r20, Y+3	; 0x03
    346e:	5c 81       	ldd	r21, Y+4	; 0x04
    3470:	60 91 f1 05 	lds	r22, 0x05F1	; 0x8005f1 <device>
    3474:	70 91 f2 05 	lds	r23, 0x05F2	; 0x8005f2 <device+0x1>
    3478:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <device+0x2>
    347c:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <device+0x3>
    3480:	7f df       	rcall	.-258    	; 0x3380 <switchToMUXport>

}
    3482:	0f 90       	pop	r0
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	df 91       	pop	r29
    3498:	cf 91       	pop	r28
    349a:	08 95       	ret

0000349c <SetupHardware>:
}

void SetupHardware(void)
{
/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    349c:	84 b7       	in	r24, 0x34	; 52
    349e:	87 7f       	andi	r24, 0xF7	; 247
    34a0:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    34a2:	0f b6       	in	r0, 0x3f	; 63
    34a4:	f8 94       	cli
    34a6:	a8 95       	wdr
    34a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    34ac:	88 61       	ori	r24, 0x18	; 24
    34ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    34b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    34b6:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	80 e8       	ldi	r24, 0x80	; 128
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    34c4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    34c8:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	clock_prescale_set(clock_div_1);

	board_init();
    34ca:	44 de       	rcall	.-888    	; 0x3154 <board_init>

	/* Inline Functions: */
	#if !defined(__DOXYGEN__)
	static inline void LEDs_Init(void)
	{
	DDRE  |= LEDS_ALL_LEDS;
    34cc:	8d b1       	in	r24, 0x0d	; 13
    34ce:	80 6f       	ori	r24, 0xF0	; 240
    34d0:	8d b9       	out	0x0d, r24	; 13
	PORTE |= LEDS_ALL_LEDS;
    34d2:	8e b1       	in	r24, 0x0e	; 14
    34d4:	80 6f       	ori	r24, 0xF0	; 240
	LEDs_Init();
	USB_Init();
    34d6:	8e b9       	out	0x0e, r24	; 14
    34d8:	7b db       	rcall	.-2314   	; 0x2bd0 <USB_Init>
	DDRA=0XFF;
    34da:	8f ef       	ldi	r24, 0xFF	; 255
    34dc:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF;
    34de:	84 b9       	out	0x04, r24	; 4
	DDRD=0XFF;
    34e0:	8a b9       	out	0x0a, r24	; 10
	PORTD=0xFF;
    34e2:	8b b9       	out	0x0b, r24	; 11
    34e4:	08 95       	ret

000034e6 <EVENT_USB_Device_Connect>:
	PORTE |= LEDMask;
	}

	static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
	{
	PORTE = ((PORTE | LEDS_ALL_LEDS) & ~LEDMask);
    34e6:	8e b1       	in	r24, 0x0e	; 14
    34e8:	80 6f       	ori	r24, 0xF0	; 240
    34ea:	8f 79       	andi	r24, 0x9F	; 159
    34ec:	8e b9       	out	0x0e, r24	; 14
    34ee:	08 95       	ret

000034f0 <EVENT_USB_Device_Disconnect>:
    34f0:	8e b1       	in	r24, 0x0e	; 14
    34f2:	80 6f       	ori	r24, 0xF0	; 240
    34f4:	8f 7e       	andi	r24, 0xEF	; 239
    34f6:	8e b9       	out	0x0e, r24	; 14
    34f8:	08 95       	ret

000034fa <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the CDC management task started.
 */

void EVENT_USB_Device_ConfigurationChanged(void)
{
    34fa:	cf 93       	push	r28
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    34fc:	42 e3       	ldi	r20, 0x32	; 50
    34fe:	61 ec       	ldi	r22, 0xC1	; 193
    3500:	82 e0       	ldi	r24, 0x02	; 2
    3502:	56 da       	rcall	.-2900   	; 0x29b0 <Endpoint_ConfigureEndpoint_Prv>
    3504:	c8 2f       	mov	r28, r24
    3506:	42 e3       	ldi	r20, 0x32	; 50
    3508:	61 e8       	ldi	r22, 0x81	; 129
    350a:	83 e0       	ldi	r24, 0x03	; 3
    350c:	51 da       	rcall	.-2910   	; 0x29b0 <Endpoint_ConfigureEndpoint_Prv>
    350e:	c8 23       	and	r28, r24
    3510:	42 e3       	ldi	r20, 0x32	; 50
    3512:	60 e8       	ldi	r22, 0x80	; 128
    3514:	84 e0       	ldi	r24, 0x04	; 4
    3516:	4c da       	rcall	.-2920   	; 0x29b0 <Endpoint_ConfigureEndpoint_Prv>
	ConfigSuccess &= Endpoint_ConfigureEndpoint(TMC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, TMC_IO_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(TMC_IN_EPADDR,  EP_TYPE_BULK, TMC_IO_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(TMC_OUT_EPADDR, EP_TYPE_BULK, TMC_IO_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    3518:	cc 23       	and	r28, r28
    351a:	11 f0       	breq	.+4      	; 0x3520 <EVENT_USB_Device_ConfigurationChanged+0x26>
    351c:	81 11       	cpse	r24, r1
    351e:	02 c0       	rjmp	.+4      	; 0x3524 <EVENT_USB_Device_ConfigurationChanged+0x2a>
    3520:	80 e5       	ldi	r24, 0x50	; 80
    3522:	01 c0       	rjmp	.+2      	; 0x3526 <EVENT_USB_Device_ConfigurationChanged+0x2c>
    3524:	80 ea       	ldi	r24, 0xA0	; 160
    3526:	9e b1       	in	r25, 0x0e	; 14
    3528:	90 6f       	ori	r25, 0xF0	; 240
    352a:	80 95       	com	r24
    352c:	89 23       	and	r24, r25
    352e:	8e b9       	out	0x0e, r24	; 14
}
    3530:	cf 91       	pop	r28
    3532:	08 95       	ret

00003534 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    3534:	cf 93       	push	r28
    3536:	df 93       	push	r29
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;

	/* Process TMC specific control requests */
	switch (USB_ControlRequest.bRequest)
    3538:	e0 91 72 04 	lds	r30, 0x0472	; 0x800472 <USB_ControlRequest+0x1>
    353c:	8e 2f       	mov	r24, r30
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	fc 01       	movw	r30, r24
    3542:	31 97       	sbiw	r30, 0x01	; 1
    3544:	e7 30       	cpi	r30, 0x07	; 7
    3546:	f1 05       	cpc	r31, r1
    3548:	08 f0       	brcs	.+2      	; 0x354c <EVENT_USB_Device_ControlRequest+0x18>
    354a:	26 c1       	rjmp	.+588    	; 0x3798 <EVENT_USB_Device_ControlRequest+0x264>
    354c:	e0 5a       	subi	r30, 0xA0	; 160
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	1e c3       	rjmp	.+1596   	; 0x3b8e <__tablejump2__>
	{
		case Req_InitiateAbortBulkOut:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
    3552:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <USB_ControlRequest>
    3556:	82 3a       	cpi	r24, 0xA2	; 162
    3558:	09 f0       	breq	.+2      	; 0x355c <EVENT_USB_Device_ControlRequest+0x28>
    355a:	1e c1       	rjmp	.+572    	; 0x3798 <EVENT_USB_Device_ControlRequest+0x264>
			{
				/* Check that no split transaction is already in progress and the data transfer tag is valid */
				if (RequestInProgress != 0)
    355c:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <RequestInProgress>
    3560:	81 11       	cpse	r24, r1
    3562:	11 c0       	rjmp	.+34     	; 0x3586 <EVENT_USB_Device_ControlRequest+0x52>
				{
					TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
				}
				else if (USB_ControlRequest.wValue != CurrentTransferTag)
    3564:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <CurrentTransferTag>
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <USB_ControlRequest+0x2>
    356e:	30 91 74 04 	lds	r19, 0x0474	; 0x800474 <USB_ControlRequest+0x3>
    3572:	28 17       	cp	r18, r24
    3574:	39 07       	cpc	r19, r25
    3576:	49 f4       	brne	.+18     	; 0x358a <EVENT_USB_Device_ControlRequest+0x56>
					TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
				}
				else
				{
					/* Indicate that all in-progress/pending data OUT requests should be aborted */
					IsTMCBulkOUTReset = true;
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <IsTMCBulkOUTReset>

					/* Save the split request for later checking when a new request is received */
					RequestInProgress = Req_InitiateAbortBulkOut;
    357e:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
    3582:	91 e0       	ldi	r25, 0x01	; 1
    3584:	03 c0       	rjmp	.+6      	; 0x358c <EVENT_USB_Device_ControlRequest+0x58>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
			{
				/* Check that no split transaction is already in progress and the data transfer tag is valid */
				if (RequestInProgress != 0)
				{
					TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
    3586:	93 e8       	ldi	r25, 0x83	; 131
    3588:	01 c0       	rjmp	.+2      	; 0x358c <EVENT_USB_Device_ControlRequest+0x58>
				}
				else if (USB_ControlRequest.wValue != CurrentTransferTag)
				{
					TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
    358a:	91 e8       	ldi	r25, 0x81	; 129
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    358c:	e8 ee       	ldi	r30, 0xE8	; 232
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	80 81       	ld	r24, Z
    3592:	87 7f       	andi	r24, 0xF7	; 247
    3594:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3596:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    359a:	80 81       	ld	r24, Z
    359c:	8e 77       	andi	r24, 0x7E	; 126

				/* Write the request response byte */
				Endpoint_Write_8(TMCRequestStatus);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    359e:	80 83       	st	Z, r24
    35a0:	6d da       	rcall	.-2854   	; 0x2a7c <Endpoint_ClearStatusStage>
    35a2:	fa c0       	rjmp	.+500    	; 0x3798 <EVENT_USB_Device_ControlRequest+0x264>
			}

			break;
		case Req_CheckAbortBulkOutStatus:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
    35a4:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <USB_ControlRequest>
    35a8:	82 3a       	cpi	r24, 0xA2	; 162
    35aa:	09 f0       	breq	.+2      	; 0x35ae <EVENT_USB_Device_ControlRequest+0x7a>
    35ac:	f5 c0       	rjmp	.+490    	; 0x3798 <EVENT_USB_Device_ControlRequest+0x264>
			{
				/* Check that an ABORT BULK OUT transaction has been requested and that the request has completed */
				if (RequestInProgress != Req_InitiateAbortBulkOut)
    35ae:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <RequestInProgress>
    35b2:	81 30       	cpi	r24, 0x01	; 1
    35b4:	41 f4       	brne	.+16     	; 0x35c6 <EVENT_USB_Device_ControlRequest+0x92>
				  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
				else if (IsTMCBulkOUTReset)
    35b6:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <IsTMCBulkOUTReset>
    35ba:	81 11       	cpse	r24, r1
    35bc:	06 c0       	rjmp	.+12     	; 0x35ca <EVENT_USB_Device_ControlRequest+0x96>
				  TMCRequestStatus = TMC_STATUS_PENDING;
				else
				  RequestInProgress = 0;
    35be:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
    35c2:	91 e0       	ldi	r25, 0x01	; 1
    35c4:	03 c0       	rjmp	.+6      	; 0x35cc <EVENT_USB_Device_ControlRequest+0x98>
		case Req_CheckAbortBulkOutStatus:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
			{
				/* Check that an ABORT BULK OUT transaction has been requested and that the request has completed */
				if (RequestInProgress != Req_InitiateAbortBulkOut)
				  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
    35c6:	92 e8       	ldi	r25, 0x82	; 130
    35c8:	01 c0       	rjmp	.+2      	; 0x35cc <EVENT_USB_Device_ControlRequest+0x98>
				else if (IsTMCBulkOUTReset)
				  TMCRequestStatus = TMC_STATUS_PENDING;
    35ca:	92 e0       	ldi	r25, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    35cc:	c8 ee       	ldi	r28, 0xE8	; 232
    35ce:	d0 e0       	ldi	r29, 0x00	; 0
    35d0:	88 81       	ld	r24, Y
    35d2:	87 7f       	andi	r24, 0xF7	; 247
    35d4:	88 83       	st	Y, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    35d6:	e1 ef       	ldi	r30, 0xF1	; 241
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    35dc:	10 82       	st	Z, r1
				UEDATX = (Data >> 8);
    35de:	10 82       	st	Z, r1
				Endpoint_ClearSETUP();

				/* Write the request response bytes */
				Endpoint_Write_8(TMCRequestStatus);
				Endpoint_Write_16_LE(0);
				Endpoint_Write_32_LE(LastTransferLength);
    35e0:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <LastTransferLength>
    35e4:	30 91 5d 04 	lds	r19, 0x045D	; 0x80045d <LastTransferLength+0x1>
    35e8:	c9 01       	movw	r24, r18
    35ea:	a0 e0       	ldi	r26, 0x00	; 0
    35ec:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    35ee:	20 83       	st	Z, r18
				UEDATX = (Data >> 8);
    35f0:	49 2f       	mov	r20, r25
    35f2:	5a 2f       	mov	r21, r26
    35f4:	6b 2f       	mov	r22, r27
    35f6:	77 27       	eor	r23, r23
    35f8:	40 83       	st	Z, r20
				UEDATX = (Data >> 16);
    35fa:	ad 01       	movw	r20, r26
    35fc:	66 27       	eor	r22, r22
    35fe:	77 27       	eor	r23, r23
    3600:	40 83       	st	Z, r20
				UEDATX = (Data >> 24);
    3602:	8b 2f       	mov	r24, r27
    3604:	99 27       	eor	r25, r25
    3606:	aa 27       	eor	r26, r26
    3608:	bb 27       	eor	r27, r27
    360a:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    360c:	88 81       	ld	r24, Y
    360e:	8e 77       	andi	r24, 0x7E	; 126

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    3610:	88 83       	st	Y, r24
    3612:	34 da       	rcall	.-2968   	; 0x2a7c <Endpoint_ClearStatusStage>
    3614:	c1 c0       	rjmp	.+386    	; 0x3798 <EVENT_USB_Device_ControlRequest+0x264>
			}

			break;
		case Req_InitiateAbortBulkIn:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
    3616:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <USB_ControlRequest>
    361a:	82 3a       	cpi	r24, 0xA2	; 162
    361c:	09 f0       	breq	.+2      	; 0x3620 <EVENT_USB_Device_ControlRequest+0xec>
    361e:	bc c0       	rjmp	.+376    	; 0x3798 <EVENT_USB_Device_ControlRequest+0x264>
			{
				/* Check that no split transaction is already in progress and the data transfer tag is valid */
				if (RequestInProgress != 0)
    3620:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <RequestInProgress>
    3624:	81 11       	cpse	r24, r1
    3626:	12 c0       	rjmp	.+36     	; 0x364c <EVENT_USB_Device_ControlRequest+0x118>
				{
					TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
				}
				else if (USB_ControlRequest.wValue != CurrentTransferTag)
    3628:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <CurrentTransferTag>
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <USB_ControlRequest+0x2>
    3632:	30 91 74 04 	lds	r19, 0x0474	; 0x800474 <USB_ControlRequest+0x3>
    3636:	28 17       	cp	r18, r24
    3638:	39 07       	cpc	r19, r25
    363a:	51 f4       	brne	.+20     	; 0x3650 <EVENT_USB_Device_ControlRequest+0x11c>
					TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
				}
				else
				{
					/* Indicate that all in-progress/pending data IN requests should be aborted */
					IsTMCBulkINReset = true;
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <IsTMCBulkINReset>

					/* Save the split request for later checking when a new request is received */
					RequestInProgress = Req_InitiateAbortBulkIn;
    3642:	83 e0       	ldi	r24, 0x03	; 3
    3644:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
    3648:	91 e0       	ldi	r25, 0x01	; 1
    364a:	03 c0       	rjmp	.+6      	; 0x3652 <EVENT_USB_Device_ControlRequest+0x11e>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
			{
				/* Check that no split transaction is already in progress and the data transfer tag is valid */
				if (RequestInProgress != 0)
				{
					TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
    364c:	93 e8       	ldi	r25, 0x83	; 131
    364e:	01 c0       	rjmp	.+2      	; 0x3652 <EVENT_USB_Device_ControlRequest+0x11e>
				}
				else if (USB_ControlRequest.wValue != CurrentTransferTag)
				{
					TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
    3650:	91 e8       	ldi	r25, 0x81	; 129
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3652:	e8 ee       	ldi	r30, 0xE8	; 232
    3654:	f0 e0       	ldi	r31, 0x00	; 0
    3656:	80 81       	ld	r24, Z
    3658:	87 7f       	andi	r24, 0xF7	; 247
    365a:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    365c:	a1 ef       	ldi	r26, 0xF1	; 241
    365e:	b0 e0       	ldi	r27, 0x00	; 0
    3660:	9c 93       	st	X, r25

				Endpoint_ClearSETUP();

				/* Write the request response bytes */
				Endpoint_Write_8(TMCRequestStatus);
				Endpoint_Write_8(CurrentTransferTag);
    3662:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <CurrentTransferTag>
    3666:	8c 93       	st	X, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3668:	80 81       	ld	r24, Z
    366a:	8e 77       	andi	r24, 0x7E	; 126

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    366c:	80 83       	st	Z, r24
    366e:	06 da       	rcall	.-3060   	; 0x2a7c <Endpoint_ClearStatusStage>
    3670:	93 c0       	rjmp	.+294    	; 0x3798 <EVENT_USB_Device_ControlRequest+0x264>
			}

			break;
		case Req_CheckAbortBulkInStatus:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
    3672:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <USB_ControlRequest>
    3676:	82 3a       	cpi	r24, 0xA2	; 162
    3678:	09 f0       	breq	.+2      	; 0x367c <EVENT_USB_Device_ControlRequest+0x148>
    367a:	8e c0       	rjmp	.+284    	; 0x3798 <EVENT_USB_Device_ControlRequest+0x264>
			{
				/* Check that an ABORT BULK IN transaction has been requested and that the request has completed */
				if (RequestInProgress != Req_InitiateAbortBulkIn)
    367c:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <RequestInProgress>
    3680:	83 30       	cpi	r24, 0x03	; 3
    3682:	41 f4       	brne	.+16     	; 0x3694 <EVENT_USB_Device_ControlRequest+0x160>
				  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
				else if (IsTMCBulkINReset)
    3684:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <IsTMCBulkINReset>
    3688:	81 11       	cpse	r24, r1
    368a:	06 c0       	rjmp	.+12     	; 0x3698 <EVENT_USB_Device_ControlRequest+0x164>
				  TMCRequestStatus = TMC_STATUS_PENDING;
				else
				  RequestInProgress = 0;
    368c:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
    3690:	91 e0       	ldi	r25, 0x01	; 1
    3692:	03 c0       	rjmp	.+6      	; 0x369a <EVENT_USB_Device_ControlRequest+0x166>
		case Req_CheckAbortBulkInStatus:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
			{
				/* Check that an ABORT BULK IN transaction has been requested and that the request has completed */
				if (RequestInProgress != Req_InitiateAbortBulkIn)
				  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
    3694:	92 e8       	ldi	r25, 0x82	; 130
    3696:	01 c0       	rjmp	.+2      	; 0x369a <EVENT_USB_Device_ControlRequest+0x166>
				else if (IsTMCBulkINReset)
				  TMCRequestStatus = TMC_STATUS_PENDING;
    3698:	92 e0       	ldi	r25, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    369a:	c8 ee       	ldi	r28, 0xE8	; 232
    369c:	d0 e0       	ldi	r29, 0x00	; 0
    369e:	88 81       	ld	r24, Y
    36a0:	87 7f       	andi	r24, 0xF7	; 247
    36a2:	88 83       	st	Y, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    36a4:	e1 ef       	ldi	r30, 0xF1	; 241
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    36aa:	10 82       	st	Z, r1
				UEDATX = (Data >> 8);
    36ac:	10 82       	st	Z, r1
				Endpoint_ClearSETUP();

				/* Write the request response bytes */
				Endpoint_Write_8(TMCRequestStatus);
				Endpoint_Write_16_LE(0);
				Endpoint_Write_32_LE(LastTransferLength);
    36ae:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <LastTransferLength>
    36b2:	30 91 5d 04 	lds	r19, 0x045D	; 0x80045d <LastTransferLength+0x1>
    36b6:	c9 01       	movw	r24, r18
    36b8:	a0 e0       	ldi	r26, 0x00	; 0
    36ba:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    36bc:	20 83       	st	Z, r18
				UEDATX = (Data >> 8);
    36be:	49 2f       	mov	r20, r25
    36c0:	5a 2f       	mov	r21, r26
    36c2:	6b 2f       	mov	r22, r27
    36c4:	77 27       	eor	r23, r23
    36c6:	40 83       	st	Z, r20
				UEDATX = (Data >> 16);
    36c8:	ad 01       	movw	r20, r26
    36ca:	66 27       	eor	r22, r22
    36cc:	77 27       	eor	r23, r23
    36ce:	40 83       	st	Z, r20
				UEDATX = (Data >> 24);
    36d0:	8b 2f       	mov	r24, r27
    36d2:	99 27       	eor	r25, r25
    36d4:	aa 27       	eor	r26, r26
    36d6:	bb 27       	eor	r27, r27
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    36d8:	80 83       	st	Z, r24
    36da:	88 81       	ld	r24, Y
    36dc:	8e 77       	andi	r24, 0x7E	; 126

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    36de:	88 83       	st	Y, r24
    36e0:	cd d9       	rcall	.-3174   	; 0x2a7c <Endpoint_ClearStatusStage>
    36e2:	5a c0       	rjmp	.+180    	; 0x3798 <EVENT_USB_Device_ControlRequest+0x264>
			}

			break;
		case Req_InitiateClear:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    36e4:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <USB_ControlRequest>
    36e8:	81 3a       	cpi	r24, 0xA1	; 161
    36ea:	09 f0       	breq	.+2      	; 0x36ee <EVENT_USB_Device_ControlRequest+0x1ba>
    36ec:	55 c0       	rjmp	.+170    	; 0x3798 <EVENT_USB_Device_ControlRequest+0x264>
			{
				/* Check that no split transaction is already in progress */
				if (RequestInProgress != 0)
    36ee:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <RequestInProgress>
    36f2:	88 23       	and	r24, r24
    36f4:	21 f0       	breq	.+8      	; 0x36fe <EVENT_USB_Device_ControlRequest+0x1ca>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    36f6:	83 e8       	ldi	r24, 0x83	; 131
    36f8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    36fc:	08 c0       	rjmp	.+16     	; 0x370e <EVENT_USB_Device_ControlRequest+0x1da>
					Endpoint_Write_8(TMC_STATUS_SPLIT_IN_PROGRESS);
				}
				else
				{
					/* Indicate that all in-progress/pending data IN and OUT requests should be aborted */
					IsTMCBulkINReset  = true;
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <IsTMCBulkINReset>
					IsTMCBulkOUTReset = true;
    3704:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <IsTMCBulkOUTReset>

					/* Save the split request for later checking when a new request is received */
					RequestInProgress = Req_InitiateClear;
    3708:	85 e0       	ldi	r24, 0x05	; 5
    370a:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <RequestInProgress>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    370e:	e8 ee       	ldi	r30, 0xE8	; 232
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	80 81       	ld	r24, Z
    3714:	87 7f       	andi	r24, 0xF7	; 247
    3716:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    371e:	80 81       	ld	r24, Z
    3720:	8e 77       	andi	r24, 0x7E	; 126

				/* Write the request response byte */
				Endpoint_Write_8(TMCRequestStatus);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    3722:	80 83       	st	Z, r24
    3724:	ab d9       	rcall	.-3242   	; 0x2a7c <Endpoint_ClearStatusStage>
    3726:	38 c0       	rjmp	.+112    	; 0x3798 <EVENT_USB_Device_ControlRequest+0x264>
			}

			break;
		case Req_CheckClearStatus:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3728:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <USB_ControlRequest>
    372c:	81 3a       	cpi	r24, 0xA1	; 161
    372e:	a1 f5       	brne	.+104    	; 0x3798 <EVENT_USB_Device_ControlRequest+0x264>
			{
				/* Check that a CLEAR transaction has been requested and that the request has completed */
				if (RequestInProgress != Req_InitiateClear)
    3730:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <RequestInProgress>
    3734:	85 30       	cpi	r24, 0x05	; 5
    3736:	61 f4       	brne	.+24     	; 0x3750 <EVENT_USB_Device_ControlRequest+0x21c>
				  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
				else if (IsTMCBulkINReset || IsTMCBulkOUTReset)
    3738:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <IsTMCBulkINReset>
    373c:	81 11       	cpse	r24, r1
    373e:	0a c0       	rjmp	.+20     	; 0x3754 <EVENT_USB_Device_ControlRequest+0x220>
    3740:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <IsTMCBulkOUTReset>
    3744:	81 11       	cpse	r24, r1
    3746:	08 c0       	rjmp	.+16     	; 0x3758 <EVENT_USB_Device_ControlRequest+0x224>
				  TMCRequestStatus = TMC_STATUS_PENDING;
				else
				  RequestInProgress = 0;
    3748:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
    374c:	91 e0       	ldi	r25, 0x01	; 1
    374e:	05 c0       	rjmp	.+10     	; 0x375a <EVENT_USB_Device_ControlRequest+0x226>
		case Req_CheckClearStatus:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				/* Check that a CLEAR transaction has been requested and that the request has completed */
				if (RequestInProgress != Req_InitiateClear)
				  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
    3750:	92 e8       	ldi	r25, 0x82	; 130
    3752:	03 c0       	rjmp	.+6      	; 0x375a <EVENT_USB_Device_ControlRequest+0x226>
				else if (IsTMCBulkINReset || IsTMCBulkOUTReset)
				  TMCRequestStatus = TMC_STATUS_PENDING;
    3754:	92 e0       	ldi	r25, 0x02	; 2
    3756:	01 c0       	rjmp	.+2      	; 0x375a <EVENT_USB_Device_ControlRequest+0x226>
    3758:	92 e0       	ldi	r25, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    375a:	e8 ee       	ldi	r30, 0xE8	; 232
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	80 81       	ld	r24, Z
    3760:	87 7f       	andi	r24, 0xF7	; 247
    3762:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3764:	a1 ef       	ldi	r26, 0xF1	; 241
    3766:	b0 e0       	ldi	r27, 0x00	; 0
    3768:	9c 93       	st	X, r25
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    376a:	1c 92       	st	X, r1
    376c:	80 81       	ld	r24, Z
    376e:	8e 77       	andi	r24, 0x7E	; 126
				/* Write the request response bytes */
				Endpoint_Write_8(TMCRequestStatus);
				Endpoint_Write_8(0);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    3770:	80 83       	st	Z, r24
    3772:	84 d9       	rcall	.-3320   	; 0x2a7c <Endpoint_ClearStatusStage>
    3774:	11 c0       	rjmp	.+34     	; 0x3798 <EVENT_USB_Device_ControlRequest+0x264>
			}

			break;
		case Req_GetCapabilities:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3776:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <USB_ControlRequest>
    377a:	81 3a       	cpi	r24, 0xA1	; 161
    377c:	69 f4       	brne	.+26     	; 0x3798 <EVENT_USB_Device_ControlRequest+0x264>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    377e:	c8 ee       	ldi	r28, 0xE8	; 232
    3780:	d0 e0       	ldi	r29, 0x00	; 0
    3782:	88 81       	ld	r24, Y
    3784:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();

				/* Write the device capabilities to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&Capabilities, sizeof(TMC_Capabilities_t));
    3786:	88 83       	st	Y, r24
    3788:	68 e1       	ldi	r22, 0x18	; 24
    378a:	70 e0       	ldi	r23, 0x00	; 0
    378c:	86 e0       	ldi	r24, 0x06	; 6
    378e:	91 e0       	ldi	r25, 0x01	; 1
    3790:	10 d8       	rcall	.-4064   	; 0x27b2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3792:	88 81       	ld	r24, Y
    3794:	8b 77       	andi	r24, 0x7B	; 123
    3796:	88 83       	st	Y, r24
				Endpoint_ClearOUT();
			}

			break;
	}
}
    3798:	df 91       	pop	r29
    379a:	cf 91       	pop	r28
    379c:	08 95       	ret

0000379e <ProcessSentMessage>:

void ProcessSentMessage(uint8_t* const Data, const uint8_t Length)
{
    379e:	cf 93       	push	r28
    37a0:	df 93       	push	r29
    37a2:	ec 01       	movw	r28, r24
	
	if (strncmp((char*)Data, "*IDN?", 5) == 0)
    37a4:	45 e0       	ldi	r20, 0x05	; 5
    37a6:	50 e0       	ldi	r21, 0x00	; 0
    37a8:	68 e4       	ldi	r22, 0x48	; 72
    37aa:	73 e0       	ldi	r23, 0x03	; 3
    37ac:	e0 d5       	rcall	.+3008   	; 0x436e <strncmp>
    37ae:	89 2b       	or	r24, r25
    37b0:	51 f4       	brne	.+20     	; 0x37c6 <ProcessSentMessage+0x28>
	strcpy((char*)NextResponseBuffer, "LUFA TMC DEMO");
    37b2:	8e e0       	ldi	r24, 0x0E	; 14
    37b4:	ee e4       	ldi	r30, 0x4E	; 78
    37b6:	f3 e0       	ldi	r31, 0x03	; 3
    37b8:	ac e1       	ldi	r26, 0x1C	; 28
    37ba:	b4 e0       	ldi	r27, 0x04	; 4
    37bc:	01 90       	ld	r0, Z+
    37be:	0d 92       	st	X+, r0
    37c0:	8a 95       	dec	r24
    37c2:	e1 f7       	brne	.-8      	; 0x37bc <ProcessSentMessage+0x1e>
    37c4:	23 c0       	rjmp	.+70     	; 0x380c <ProcessSentMessage+0x6e>
	else if (strncmp((char*)Data, "REL:1:1", 7) == 0){
    37c6:	47 e0       	ldi	r20, 0x07	; 7
    37c8:	50 e0       	ldi	r21, 0x00	; 0
    37ca:	6c e5       	ldi	r22, 0x5C	; 92
    37cc:	73 e0       	ldi	r23, 0x03	; 3
    37ce:	ce 01       	movw	r24, r28
    37d0:	ce d5       	rcall	.+2972   	; 0x436e <strncmp>
    37d2:	89 2b       	or	r24, r25
    37d4:	51 f4       	brne	.+20     	; 0x37ea <ProcessSentMessage+0x4c>
		strcpy((char*)NextResponseBuffer, "DEVICE ONE IS ON");
    37d6:	81 e1       	ldi	r24, 0x11	; 17
    37d8:	e4 e6       	ldi	r30, 0x64	; 100
    37da:	f3 e0       	ldi	r31, 0x03	; 3
    37dc:	ac e1       	ldi	r26, 0x1C	; 28
    37de:	b4 e0       	ldi	r27, 0x04	; 4
    37e0:	01 90       	ld	r0, Z+
    37e2:	0d 92       	st	X+, r0
    37e4:	8a 95       	dec	r24
    37e6:	e1 f7       	brne	.-8      	; 0x37e0 <ProcessSentMessage+0x42>
    37e8:	11 c0       	rjmp	.+34     	; 0x380c <ProcessSentMessage+0x6e>
	}
	else if (strncmp((char*)Data, "REL:1:0", 7) == 0){
    37ea:	47 e0       	ldi	r20, 0x07	; 7
    37ec:	50 e0       	ldi	r21, 0x00	; 0
    37ee:	65 e7       	ldi	r22, 0x75	; 117
    37f0:	73 e0       	ldi	r23, 0x03	; 3
    37f2:	ce 01       	movw	r24, r28
    37f4:	bc d5       	rcall	.+2936   	; 0x436e <strncmp>
    37f6:	89 2b       	or	r24, r25
    37f8:	49 f4       	brne	.+18     	; 0x380c <ProcessSentMessage+0x6e>
		strcpy((char*)NextResponseBuffer, "DEVICE ONE IS OFF");
    37fa:	82 e1       	ldi	r24, 0x12	; 18
    37fc:	ed e7       	ldi	r30, 0x7D	; 125
    37fe:	f3 e0       	ldi	r31, 0x03	; 3
    3800:	ac e1       	ldi	r26, 0x1C	; 28
    3802:	b4 e0       	ldi	r27, 0x04	; 4
    3804:	01 90       	ld	r0, Z+
    3806:	0d 92       	st	X+, r0
    3808:	8a 95       	dec	r24
    380a:	e1 f7       	brne	.-8      	; 0x3804 <ProcessSentMessage+0x66>
	}


	
	NextResponseLen = strlen((char*)NextResponseBuffer);
}
    380c:	df 91       	pop	r29
    380e:	cf 91       	pop	r28
    3810:	08 95       	ret

00003812 <GetNextMessage>:


uint8_t GetNextMessage(uint8_t* const Data)
{
    3812:	8f 92       	push	r8
    3814:	9f 92       	push	r9
    3816:	af 92       	push	r10
    3818:	bf 92       	push	r11
    381a:	cf 92       	push	r12
    381c:	df 92       	push	r13
    381e:	ef 92       	push	r14
    3820:	ff 92       	push	r15
    3822:	0f 93       	push	r16
    3824:	1f 93       	push	r17
    3826:	cf 93       	push	r28
    3828:	df 93       	push	r29
    382a:	ec 01       	movw	r28, r24
	//Initialize SCPI Library
SCPI_Init(&scpi_context,
    382c:	1f 92       	push	r1
    382e:	81 e1       	ldi	r24, 0x11	; 17
    3830:	8f 93       	push	r24
    3832:	8f ec       	ldi	r24, 0xCF	; 207
    3834:	95 e0       	ldi	r25, 0x05	; 5
    3836:	9f 93       	push	r25
    3838:	8f 93       	push	r24
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	8f 93       	push	r24
    383e:	1f 92       	push	r1
    3840:	0f 2e       	mov	r0, r31
    3842:	ff ec       	ldi	r31, 0xCF	; 207
    3844:	8f 2e       	mov	r8, r31
    3846:	f4 e0       	ldi	r31, 0x04	; 4
    3848:	9f 2e       	mov	r9, r31
    384a:	f0 2d       	mov	r31, r0
    384c:	0f 2e       	mov	r0, r31
    384e:	ff e8       	ldi	r31, 0x8F	; 143
    3850:	af 2e       	mov	r10, r31
    3852:	f3 e0       	ldi	r31, 0x03	; 3
    3854:	bf 2e       	mov	r11, r31
    3856:	f0 2d       	mov	r31, r0
    3858:	c1 2c       	mov	r12, r1
    385a:	d1 2c       	mov	r13, r1
    385c:	0f 2e       	mov	r0, r31
    385e:	f5 e9       	ldi	r31, 0x95	; 149
    3860:	ef 2e       	mov	r14, r31
    3862:	f3 e0       	ldi	r31, 0x03	; 3
    3864:	ff 2e       	mov	r15, r31
    3866:	f0 2d       	mov	r31, r0
    3868:	01 ea       	ldi	r16, 0xA1	; 161
    386a:	13 e0       	ldi	r17, 0x03	; 3
    386c:	21 ef       	ldi	r18, 0xF1	; 241
    386e:	31 e0       	ldi	r19, 0x01	; 1
    3870:	42 e6       	ldi	r20, 0x62	; 98
    3872:	54 e0       	ldi	r21, 0x04	; 4
    3874:	6b ee       	ldi	r22, 0xEB	; 235
    3876:	73 e0       	ldi	r23, 0x03	; 3
    3878:	89 e7       	ldi	r24, 0x79	; 121
    387a:	94 e0       	ldi	r25, 0x04	; 4
    387c:	0e 94 ca 08 	call	0x1194	; 0x1194 <SCPI_Init>
SCPI_IDN1, SCPI_IDN2, SCPI_IDN3, SCPI_IDN4,
scpi_input_buffer, SCPI_INPUT_BUFFER_LENGTH,
scpi_error_queue_data, SCPI_ERROR_QUEUE_SIZE);

//Call SCPI Library	
	SCPI_Input(&scpi_context, Data, strlen(Data));
    3880:	fe 01       	movw	r30, r28
    3882:	01 90       	ld	r0, Z+
    3884:	00 20       	and	r0, r0
    3886:	e9 f7       	brne	.-6      	; 0x3882 <GetNextMessage+0x70>
    3888:	31 97       	sbiw	r30, 0x01	; 1
    388a:	af 01       	movw	r20, r30
    388c:	4c 1b       	sub	r20, r28
    388e:	5d 0b       	sbc	r21, r29
    3890:	be 01       	movw	r22, r28
    3892:	89 e7       	ldi	r24, 0x79	; 121
    3894:	94 e0       	ldi	r25, 0x04	; 4
    3896:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <SCPI_Input>
//READ returned buffer from the Executed Function
	strcpy((char*)NextResponseBuffer, bf);
    389a:	65 ef       	ldi	r22, 0xF5	; 245
    389c:	75 e0       	ldi	r23, 0x05	; 5
    389e:	8c e1       	ldi	r24, 0x1C	; 28
    38a0:	94 e0       	ldi	r25, 0x04	; 4
    38a2:	4a d5       	rcall	.+2708   	; 0x4338 <strcpy>
	

	NextResponseLen = strlen((char*)NextResponseBuffer);
    38a4:	ec e1       	ldi	r30, 0x1C	; 28
    38a6:	f4 e0       	ldi	r31, 0x04	; 4
    38a8:	01 90       	ld	r0, Z+
    38aa:	00 20       	and	r0, r0
    38ac:	e9 f7       	brne	.-6      	; 0x38a8 <GetNextMessage+0x96>
    38ae:	31 97       	sbiw	r30, 0x01	; 1
    38b0:	ec 51       	subi	r30, 0x1C	; 28
    38b2:	f4 40       	sbci	r31, 0x04	; 4
	// ---
	uint8_t DataLen = MIN(NextResponseLen, 64);
    38b4:	1e 2f       	mov	r17, r30
    38b6:	0f 90       	pop	r0
    38b8:	0f 90       	pop	r0
    38ba:	0f 90       	pop	r0
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	e1 34       	cpi	r30, 0x41	; 65
    38c4:	08 f0       	brcs	.+2      	; 0x38c8 <GetNextMessage+0xb6>
    38c6:	10 e4       	ldi	r17, 0x40	; 64

	strlcpy((char*)Data, (char*)NextResponseBuffer, DataLen);
    38c8:	41 2f       	mov	r20, r17
    38ca:	50 e0       	ldi	r21, 0x00	; 0
    38cc:	6c e1       	ldi	r22, 0x1C	; 28
    38ce:	74 e0       	ldi	r23, 0x04	; 4
    38d0:	ce 01       	movw	r24, r28
    38d2:	39 d5       	rcall	.+2674   	; 0x4346 <strlcpy>
	free(bf);
    38d4:	85 ef       	ldi	r24, 0xF5	; 245
    38d6:	95 e0       	ldi	r25, 0x05	; 5
    38d8:	28 d2       	rcall	.+1104   	; 0x3d2a <free>
	return DataLen;
}
    38da:	81 2f       	mov	r24, r17
    38dc:	df 91       	pop	r29
    38de:	cf 91       	pop	r28
    38e0:	1f 91       	pop	r17
    38e2:	0f 91       	pop	r16
    38e4:	ff 90       	pop	r15
    38e6:	ef 90       	pop	r14
    38e8:	df 90       	pop	r13
    38ea:	cf 90       	pop	r12
    38ec:	bf 90       	pop	r11
    38ee:	af 90       	pop	r10
    38f0:	9f 90       	pop	r9
    38f2:	8f 90       	pop	r8
    38f4:	08 95       	ret

000038f6 <ReadTMCHeader>:
 *  \param[out] MessageHeader  Pointer to a location where the read header (if any) should be stored
 *
 *  \return Boolean \c true if a header was read, \c false otherwise
 */
bool ReadTMCHeader(TMC_MessageHeader_t* const MessageHeader)
{
    38f6:	0f 93       	push	r16
    38f8:	1f 93       	push	r17
    38fa:	cf 93       	push	r28
    38fc:	df 93       	push	r29
    38fe:	00 d0       	rcall	.+0      	; 0x3900 <ReadTMCHeader+0xa>
    3900:	cd b7       	in	r28, 0x3d	; 61
    3902:	de b7       	in	r29, 0x3e	; 62
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3904:	24 e0       	ldi	r18, 0x04	; 4
    3906:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    390a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
    390e:	22 ff       	sbrs	r18, 2
    3910:	22 c0       	rjmp	.+68     	; 0x3956 <ReadTMCHeader+0x60>
    3912:	8c 01       	movw	r16, r24
	  return false;

	/* Read in the header of the command from the host */
	BytesTransferred = 0;
    3914:	1a 82       	std	Y+2, r1	; 0x02
    3916:	19 82       	std	Y+1, r1	; 0x01
	while ((ErrorCode = Endpoint_Read_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
    3918:	04 c0       	rjmp	.+8      	; 0x3922 <ReadTMCHeader+0x2c>
	       ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (IsTMCBulkOUTReset)
    391a:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <IsTMCBulkOUTReset>
    391e:	91 11       	cpse	r25, r1
    3920:	1c c0       	rjmp	.+56     	; 0x395a <ReadTMCHeader+0x64>
	if (!(Endpoint_IsOUTReceived()))
	  return false;

	/* Read in the header of the command from the host */
	BytesTransferred = 0;
	while ((ErrorCode = Endpoint_Read_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
    3922:	ae 01       	movw	r20, r28
    3924:	4f 5f       	subi	r20, 0xFF	; 255
    3926:	5f 4f       	sbci	r21, 0xFF	; 255
    3928:	6c e0       	ldi	r22, 0x0C	; 12
    392a:	70 e0       	ldi	r23, 0x00	; 0
    392c:	c8 01       	movw	r24, r16
    392e:	0e 94 7d 13 	call	0x26fa	; 0x26fa <Endpoint_Read_Stream_LE>
    3932:	85 30       	cpi	r24, 0x05	; 5
    3934:	91 f3       	breq	.-28     	; 0x391a <ReadTMCHeader+0x24>
		if (IsTMCBulkOUTReset)
		  break;
	}

	/* Store the new command tag value for later use */
	CurrentTransferTag = MessageHeader->Tag;
    3936:	f8 01       	movw	r30, r16
    3938:	91 81       	ldd	r25, Z+1	; 0x01
    393a:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <CurrentTransferTag>

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkOUTReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
    393e:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <IsTMCBulkOUTReset>
    3942:	91 11       	cpse	r25, r1
    3944:	05 c0       	rjmp	.+10     	; 0x3950 <ReadTMCHeader+0x5a>
    3946:	91 e0       	ldi	r25, 0x01	; 1
    3948:	81 11       	cpse	r24, r1
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	89 2f       	mov	r24, r25
    394e:	01 c0       	rjmp	.+2      	; 0x3952 <ReadTMCHeader+0x5c>
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	81 70       	andi	r24, 0x01	; 1
    3954:	08 c0       	rjmp	.+16     	; 0x3966 <ReadTMCHeader+0x70>
	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
	  return false;
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	06 c0       	rjmp	.+12     	; 0x3966 <ReadTMCHeader+0x70>
		if (IsTMCBulkOUTReset)
		  break;
	}

	/* Store the new command tag value for later use */
	CurrentTransferTag = MessageHeader->Tag;
    395a:	f8 01       	movw	r30, r16
    395c:	81 81       	ldd	r24, Z+1	; 0x01
    395e:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <CurrentTransferTag>

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkOUTReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
    3962:	80 e0       	ldi	r24, 0x00	; 0
    3964:	f6 cf       	rjmp	.-20     	; 0x3952 <ReadTMCHeader+0x5c>
}
    3966:	0f 90       	pop	r0
    3968:	0f 90       	pop	r0
    396a:	df 91       	pop	r29
    396c:	cf 91       	pop	r28
    396e:	1f 91       	pop	r17
    3970:	0f 91       	pop	r16
    3972:	08 95       	ret

00003974 <WriteTMCHeader>:

bool WriteTMCHeader(TMC_MessageHeader_t* const MessageHeader)
{
    3974:	0f 93       	push	r16
    3976:	1f 93       	push	r17
    3978:	cf 93       	push	r28
    397a:	df 93       	push	r29
    397c:	00 d0       	rcall	.+0      	; 0x397e <WriteTMCHeader+0xa>
    397e:	cd b7       	in	r28, 0x3d	; 61
    3980:	de b7       	in	r29, 0x3e	; 62
    3982:	8c 01       	movw	r16, r24
	uint16_t BytesTransferred;
	uint8_t  ErrorCode;

	/* Set the message tag of the command header */
	MessageHeader->Tag        =  CurrentTransferTag;
    3984:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <CurrentTransferTag>
    3988:	f8 01       	movw	r30, r16
    398a:	81 83       	std	Z+1, r24	; 0x01
	MessageHeader->InverseTag = ~CurrentTransferTag;
    398c:	80 95       	com	r24
    398e:	82 83       	std	Z+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3990:	83 e0       	ldi	r24, 0x03	; 3
    3992:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(TMC_IN_EPADDR);

	/* Send the command header to the host */
	BytesTransferred = 0;
    3996:	1a 82       	std	Y+2, r1	; 0x02
    3998:	19 82       	std	Y+1, r1	; 0x01
	while ((ErrorCode = Endpoint_Write_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
    399a:	04 c0       	rjmp	.+8      	; 0x39a4 <WriteTMCHeader+0x30>
	ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (IsTMCBulkINReset)
    399c:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <IsTMCBulkINReset>
    39a0:	81 11       	cpse	r24, r1
    39a2:	13 c0       	rjmp	.+38     	; 0x39ca <WriteTMCHeader+0x56>
	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(TMC_IN_EPADDR);

	/* Send the command header to the host */
	BytesTransferred = 0;
	while ((ErrorCode = Endpoint_Write_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
    39a4:	ae 01       	movw	r20, r28
    39a6:	4f 5f       	subi	r20, 0xFF	; 255
    39a8:	5f 4f       	sbci	r21, 0xFF	; 255
    39aa:	6c e0       	ldi	r22, 0x0C	; 12
    39ac:	70 e0       	ldi	r23, 0x00	; 0
    39ae:	c8 01       	movw	r24, r16
    39b0:	0e 94 21 13 	call	0x2642	; 0x2642 <Endpoint_Write_Stream_LE>
    39b4:	85 30       	cpi	r24, 0x05	; 5
    39b6:	91 f3       	breq	.-28     	; 0x399c <WriteTMCHeader+0x28>
		if (IsTMCBulkINReset)
		break;
	}

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkINReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
    39b8:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <IsTMCBulkINReset>
    39bc:	91 11       	cpse	r25, r1
    39be:	07 c0       	rjmp	.+14     	; 0x39ce <WriteTMCHeader+0x5a>
    39c0:	91 e0       	ldi	r25, 0x01	; 1
    39c2:	81 11       	cpse	r24, r1
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	89 2f       	mov	r24, r25
    39c8:	03 c0       	rjmp	.+6      	; 0x39d0 <WriteTMCHeader+0x5c>
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	01 c0       	rjmp	.+2      	; 0x39d0 <WriteTMCHeader+0x5c>
    39ce:	80 e0       	ldi	r24, 0x00	; 0
}
    39d0:	81 70       	andi	r24, 0x01	; 1
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	df 91       	pop	r29
    39d8:	cf 91       	pop	r28
    39da:	1f 91       	pop	r17
    39dc:	0f 91       	pop	r16
    39de:	08 95       	ret

000039e0 <TMC_Task>:
	return DataLen;
}

/** Function to manage TMC data transmission and reception to and from the host. */
void TMC_Task(void)
{
    39e0:	ef 92       	push	r14
    39e2:	ff 92       	push	r15
    39e4:	0f 93       	push	r16
    39e6:	1f 93       	push	r17
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	cd b7       	in	r28, 0x3d	; 61
    39ee:	de b7       	in	r29, 0x3e	; 62
    39f0:	cc 58       	subi	r28, 0x8C	; 140
    39f2:	d1 09       	sbc	r29, r1
    39f4:	0f b6       	in	r0, 0x3f	; 63
    39f6:	f8 94       	cli
    39f8:	de bf       	out	0x3e, r29	; 62
    39fa:	0f be       	out	0x3f, r0	; 63
    39fc:	cd bf       	out	0x3d, r28	; 61
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
    39fe:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <USB_DeviceState>
    3a02:	84 30       	cpi	r24, 0x04	; 4
    3a04:	09 f0       	breq	.+2      	; 0x3a08 <TMC_Task+0x28>
    3a06:	77 c0       	rjmp	.+238    	; 0x3af6 <TMC_Task+0x116>

	TMC_MessageHeader_t MessageHeader;
	uint8_t             MessagePayload[128];

	/* Try to read in a TMC message from the interface, process if one is available */
	if (ReadTMCHeader(&MessageHeader))
    3a08:	ce 01       	movw	r24, r28
    3a0a:	01 96       	adiw	r24, 0x01	; 1
    3a0c:	74 df       	rcall	.-280    	; 0x38f6 <ReadTMCHeader>
    3a0e:	88 23       	and	r24, r24
    3a10:	09 f4       	brne	.+2      	; 0x3a14 <TMC_Task+0x34>
    3a12:	6d c0       	rjmp	.+218    	; 0x3aee <TMC_Task+0x10e>
    3a14:	8e b1       	in	r24, 0x0e	; 14
    3a16:	80 6f       	ori	r24, 0xF0	; 240
    3a18:	8f 7d       	andi	r24, 0xDF	; 223
    3a1a:	8e b9       	out	0x0e, r24	; 14
	{
		/* Indicate busy */
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

		switch (MessageHeader.MessageID)
    3a1c:	89 81       	ldd	r24, Y+1	; 0x01
    3a1e:	81 30       	cpi	r24, 0x01	; 1
    3a20:	19 f0       	breq	.+6      	; 0x3a28 <TMC_Task+0x48>
    3a22:	82 30       	cpi	r24, 0x02	; 2
    3a24:	71 f1       	breq	.+92     	; 0x3a82 <TMC_Task+0xa2>
    3a26:	5a c0       	rjmp	.+180    	; 0x3adc <TMC_Task+0xfc>
		{
			case TMC_MESSAGEID_DEV_DEP_MSG_OUT:
			LastTransferLength = 0;
    3a28:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <LastTransferLength+0x1>
    3a2c:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <LastTransferLength>
			while (Endpoint_Read_Stream_LE(MessagePayload, MIN(MessageHeader.TransferSize, sizeof(MessagePayload)), &LastTransferLength) ==
    3a30:	68 94       	set
    3a32:	ee 24       	eor	r14, r14
    3a34:	e7 f8       	bld	r14, 7
    3a36:	f1 2c       	mov	r15, r1
    3a38:	00 e0       	ldi	r16, 0x00	; 0
    3a3a:	10 e0       	ldi	r17, 0x00	; 0
    3a3c:	04 c0       	rjmp	.+8      	; 0x3a46 <TMC_Task+0x66>
			ENDPOINT_RWSTREAM_IncompleteTransfer)
			{
				if (IsTMCBulkOUTReset)
    3a3e:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <IsTMCBulkOUTReset>
    3a42:	81 11       	cpse	r24, r1
    3a44:	13 c0       	rjmp	.+38     	; 0x3a6c <TMC_Task+0x8c>

		switch (MessageHeader.MessageID)
		{
			case TMC_MESSAGEID_DEV_DEP_MSG_OUT:
			LastTransferLength = 0;
			while (Endpoint_Read_Stream_LE(MessagePayload, MIN(MessageHeader.TransferSize, sizeof(MessagePayload)), &LastTransferLength) ==
    3a46:	6d 81       	ldd	r22, Y+5	; 0x05
    3a48:	7e 81       	ldd	r23, Y+6	; 0x06
    3a4a:	8f 81       	ldd	r24, Y+7	; 0x07
    3a4c:	98 85       	ldd	r25, Y+8	; 0x08
    3a4e:	61 38       	cpi	r22, 0x81	; 129
    3a50:	71 05       	cpc	r23, r1
    3a52:	81 05       	cpc	r24, r1
    3a54:	91 05       	cpc	r25, r1
    3a56:	10 f0       	brcs	.+4      	; 0x3a5c <TMC_Task+0x7c>
    3a58:	6e 2d       	mov	r22, r14
    3a5a:	7f 2d       	mov	r23, r15
    3a5c:	4c e5       	ldi	r20, 0x5C	; 92
    3a5e:	54 e0       	ldi	r21, 0x04	; 4
    3a60:	ce 01       	movw	r24, r28
    3a62:	0d 96       	adiw	r24, 0x0d	; 13
    3a64:	0e 94 7d 13 	call	0x26fa	; 0x26fa <Endpoint_Read_Stream_LE>
    3a68:	85 30       	cpi	r24, 0x05	; 5
    3a6a:	49 f3       	breq	.-46     	; 0x3a3e <TMC_Task+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3a6c:	e8 ee       	ldi	r30, 0xE8	; 232
    3a6e:	f0 e0       	ldi	r31, 0x00	; 0
    3a70:	80 81       	ld	r24, Z
    3a72:	8b 77       	andi	r24, 0x7B	; 123
    3a74:	80 83       	st	Z, r24
				break;
			}

			Endpoint_ClearOUT();

			ProcessSentMessage(MessagePayload, LastTransferLength);
    3a76:	60 91 5c 04 	lds	r22, 0x045C	; 0x80045c <LastTransferLength>
    3a7a:	ce 01       	movw	r24, r28
    3a7c:	0d 96       	adiw	r24, 0x0d	; 13
    3a7e:	8f de       	rcall	.-738    	; 0x379e <ProcessSentMessage>
			break;
    3a80:	32 c0       	rjmp	.+100    	; 0x3ae6 <TMC_Task+0x106>
    3a82:	e8 ee       	ldi	r30, 0xE8	; 232
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	80 81       	ld	r24, Z
    3a88:	8b 77       	andi	r24, 0x7B	; 123
    3a8a:	80 83       	st	Z, r24
			case TMC_MESSAGEID_DEV_DEP_MSG_IN:
			Endpoint_ClearOUT();

			MessageHeader.TransferSize = GetNextMessage(MessagePayload);
    3a8c:	ce 01       	movw	r24, r28
    3a8e:	0d 96       	adiw	r24, 0x0d	; 13
    3a90:	c0 de       	rcall	.-640    	; 0x3812 <GetNextMessage>
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	a0 e0       	ldi	r26, 0x00	; 0
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	8d 83       	std	Y+5, r24	; 0x05
    3a9a:	9e 83       	std	Y+6, r25	; 0x06
    3a9c:	af 83       	std	Y+7, r26	; 0x07
    3a9e:	b8 87       	std	Y+8, r27	; 0x08
			MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction = true;
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
			WriteTMCHeader(&MessageHeader);
    3aa2:	89 87       	std	Y+9, r24	; 0x09
    3aa4:	ce 01       	movw	r24, r28
    3aa6:	01 96       	adiw	r24, 0x01	; 1
    3aa8:	65 df       	rcall	.-310    	; 0x3974 <WriteTMCHeader>

			LastTransferLength = 0;
    3aaa:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <LastTransferLength+0x1>
    3aae:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <LastTransferLength>
			while (Endpoint_Write_Stream_LE(MessagePayload, MessageHeader.TransferSize, &LastTransferLength) ==
    3ab2:	04 c0       	rjmp	.+8      	; 0x3abc <TMC_Task+0xdc>
			ENDPOINT_RWSTREAM_IncompleteTransfer)
			{
				if (IsTMCBulkINReset)
    3ab4:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <IsTMCBulkINReset>
    3ab8:	81 11       	cpse	r24, r1
    3aba:	0a c0       	rjmp	.+20     	; 0x3ad0 <TMC_Task+0xf0>
			MessageHeader.TransferSize = GetNextMessage(MessagePayload);
			MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction = true;
			WriteTMCHeader(&MessageHeader);

			LastTransferLength = 0;
			while (Endpoint_Write_Stream_LE(MessagePayload, MessageHeader.TransferSize, &LastTransferLength) ==
    3abc:	6d 81       	ldd	r22, Y+5	; 0x05
    3abe:	7e 81       	ldd	r23, Y+6	; 0x06
    3ac0:	4c e5       	ldi	r20, 0x5C	; 92
    3ac2:	54 e0       	ldi	r21, 0x04	; 4
    3ac4:	ce 01       	movw	r24, r28
    3ac6:	0d 96       	adiw	r24, 0x0d	; 13
    3ac8:	0e 94 21 13 	call	0x2642	; 0x2642 <Endpoint_Write_Stream_LE>
    3acc:	85 30       	cpi	r24, 0x05	; 5
    3ace:	91 f3       	breq	.-28     	; 0x3ab4 <TMC_Task+0xd4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3ad0:	e8 ee       	ldi	r30, 0xE8	; 232
    3ad2:	f0 e0       	ldi	r31, 0x00	; 0
    3ad4:	80 81       	ld	r24, Z
    3ad6:	8e 77       	andi	r24, 0x7E	; 126
    3ad8:	80 83       	st	Z, r24
    3ada:	05 c0       	rjmp	.+10     	; 0x3ae6 <TMC_Task+0x106>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3adc:	eb ee       	ldi	r30, 0xEB	; 235
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	80 81       	ld	r24, Z
    3ae2:	80 62       	ori	r24, 0x20	; 32
    3ae4:	80 83       	st	Z, r24
    3ae6:	8e b1       	in	r24, 0x0e	; 14
    3ae8:	80 6f       	ori	r24, 0xF0	; 240
    3aea:	8f 75       	andi	r24, 0x5F	; 95
    3aec:	8e b9       	out	0x0e, r24	; 14

		LEDs_SetAllLEDs(LEDMASK_USB_READY);
	}

	/* All pending data has been processed - reset the data abort flags */
	IsTMCBulkINReset  = false;
    3aee:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <IsTMCBulkINReset>
	IsTMCBulkOUTReset = false;
    3af2:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <IsTMCBulkOUTReset>
}
    3af6:	c4 57       	subi	r28, 0x74	; 116
    3af8:	df 4f       	sbci	r29, 0xFF	; 255
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	f8 94       	cli
    3afe:	de bf       	out	0x3e, r29	; 62
    3b00:	0f be       	out	0x3f, r0	; 63
    3b02:	cd bf       	out	0x3d, r28	; 61
    3b04:	df 91       	pop	r29
    3b06:	cf 91       	pop	r28
    3b08:	1f 91       	pop	r17
    3b0a:	0f 91       	pop	r16
    3b0c:	ff 90       	pop	r15
    3b0e:	ef 90       	pop	r14
    3b10:	08 95       	ret

00003b12 <main>:
 *  setup of all components and the main program loop.
 */
int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	SetupHardware();
    3b12:	c4 dc       	rcall	.-1656   	; 0x349c <SetupHardware>
    3b14:	8e b1       	in	r24, 0x0e	; 14
    3b16:	80 6f       	ori	r24, 0xF0	; 240
    3b18:	8f 7e       	andi	r24, 0xEF	; 239
    3b1a:	8e b9       	out	0x0e, r24	; 14
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	for (;;)
	{
		TMC_Task();
    3b1c:	78 94       	sei
		USB_USBTask();
    3b1e:	60 df       	rcall	.-320    	; 0x39e0 <TMC_Task>
    3b20:	ff da       	rcall	.-2562   	; 0x3120 <USB_USBTask>
    3b22:	fd cf       	rjmp	.-6      	; 0x3b1e <main+0xc>

00003b24 <__divmodhi4>:
    3b24:	97 fb       	bst	r25, 7
    3b26:	07 2e       	mov	r0, r23
    3b28:	16 f4       	brtc	.+4      	; 0x3b2e <__divmodhi4+0xa>
    3b2a:	00 94       	com	r0
    3b2c:	06 d0       	rcall	.+12     	; 0x3b3a <__divmodhi4_neg1>
    3b2e:	77 fd       	sbrc	r23, 7
    3b30:	08 d0       	rcall	.+16     	; 0x3b42 <__divmodhi4_neg2>
    3b32:	36 d0       	rcall	.+108    	; 0x3ba0 <__udivmodhi4>
    3b34:	07 fc       	sbrc	r0, 7
    3b36:	05 d0       	rcall	.+10     	; 0x3b42 <__divmodhi4_neg2>
    3b38:	3e f4       	brtc	.+14     	; 0x3b48 <__divmodhi4_exit>

00003b3a <__divmodhi4_neg1>:
    3b3a:	90 95       	com	r25
    3b3c:	81 95       	neg	r24
    3b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b40:	08 95       	ret

00003b42 <__divmodhi4_neg2>:
    3b42:	70 95       	com	r23
    3b44:	61 95       	neg	r22
    3b46:	7f 4f       	sbci	r23, 0xFF	; 255

00003b48 <__divmodhi4_exit>:
    3b48:	08 95       	ret

00003b4a <__udivmodsi4>:
    3b4a:	a1 e2       	ldi	r26, 0x21	; 33
    3b4c:	1a 2e       	mov	r1, r26
    3b4e:	aa 1b       	sub	r26, r26
    3b50:	bb 1b       	sub	r27, r27
    3b52:	fd 01       	movw	r30, r26
    3b54:	0d c0       	rjmp	.+26     	; 0x3b70 <__udivmodsi4_ep>

00003b56 <__udivmodsi4_loop>:
    3b56:	aa 1f       	adc	r26, r26
    3b58:	bb 1f       	adc	r27, r27
    3b5a:	ee 1f       	adc	r30, r30
    3b5c:	ff 1f       	adc	r31, r31
    3b5e:	a2 17       	cp	r26, r18
    3b60:	b3 07       	cpc	r27, r19
    3b62:	e4 07       	cpc	r30, r20
    3b64:	f5 07       	cpc	r31, r21
    3b66:	20 f0       	brcs	.+8      	; 0x3b70 <__udivmodsi4_ep>
    3b68:	a2 1b       	sub	r26, r18
    3b6a:	b3 0b       	sbc	r27, r19
    3b6c:	e4 0b       	sbc	r30, r20
    3b6e:	f5 0b       	sbc	r31, r21

00003b70 <__udivmodsi4_ep>:
    3b70:	66 1f       	adc	r22, r22
    3b72:	77 1f       	adc	r23, r23
    3b74:	88 1f       	adc	r24, r24
    3b76:	99 1f       	adc	r25, r25
    3b78:	1a 94       	dec	r1
    3b7a:	69 f7       	brne	.-38     	; 0x3b56 <__udivmodsi4_loop>
    3b7c:	60 95       	com	r22
    3b7e:	70 95       	com	r23
    3b80:	80 95       	com	r24
    3b82:	90 95       	com	r25
    3b84:	9b 01       	movw	r18, r22
    3b86:	ac 01       	movw	r20, r24
    3b88:	bd 01       	movw	r22, r26
    3b8a:	cf 01       	movw	r24, r30
    3b8c:	08 95       	ret

00003b8e <__tablejump2__>:
    3b8e:	ee 0f       	add	r30, r30
    3b90:	ff 1f       	adc	r31, r31
    3b92:	00 24       	eor	r0, r0
    3b94:	00 1c       	adc	r0, r0
    3b96:	0b be       	out	0x3b, r0	; 59
    3b98:	07 90       	elpm	r0, Z+
    3b9a:	f6 91       	elpm	r31, Z
    3b9c:	e0 2d       	mov	r30, r0
    3b9e:	09 94       	ijmp

00003ba0 <__udivmodhi4>:
    3ba0:	aa 1b       	sub	r26, r26
    3ba2:	bb 1b       	sub	r27, r27
    3ba4:	51 e1       	ldi	r21, 0x11	; 17
    3ba6:	07 c0       	rjmp	.+14     	; 0x3bb6 <__udivmodhi4_ep>

00003ba8 <__udivmodhi4_loop>:
    3ba8:	aa 1f       	adc	r26, r26
    3baa:	bb 1f       	adc	r27, r27
    3bac:	a6 17       	cp	r26, r22
    3bae:	b7 07       	cpc	r27, r23
    3bb0:	10 f0       	brcs	.+4      	; 0x3bb6 <__udivmodhi4_ep>
    3bb2:	a6 1b       	sub	r26, r22
    3bb4:	b7 0b       	sbc	r27, r23

00003bb6 <__udivmodhi4_ep>:
    3bb6:	88 1f       	adc	r24, r24
    3bb8:	99 1f       	adc	r25, r25
    3bba:	5a 95       	dec	r21
    3bbc:	a9 f7       	brne	.-22     	; 0x3ba8 <__udivmodhi4_loop>
    3bbe:	80 95       	com	r24
    3bc0:	90 95       	com	r25
    3bc2:	bc 01       	movw	r22, r24
    3bc4:	cd 01       	movw	r24, r26
    3bc6:	08 95       	ret

00003bc8 <__umulhisi3>:
    3bc8:	a2 9f       	mul	r26, r18
    3bca:	b0 01       	movw	r22, r0
    3bcc:	b3 9f       	mul	r27, r19
    3bce:	c0 01       	movw	r24, r0
    3bd0:	a3 9f       	mul	r26, r19
    3bd2:	70 0d       	add	r23, r0
    3bd4:	81 1d       	adc	r24, r1
    3bd6:	11 24       	eor	r1, r1
    3bd8:	91 1d       	adc	r25, r1
    3bda:	b2 9f       	mul	r27, r18
    3bdc:	70 0d       	add	r23, r0
    3bde:	81 1d       	adc	r24, r1
    3be0:	11 24       	eor	r1, r1
    3be2:	91 1d       	adc	r25, r1
    3be4:	08 95       	ret

00003be6 <__muluhisi3>:
    3be6:	f0 df       	rcall	.-32     	; 0x3bc8 <__umulhisi3>
    3be8:	a5 9f       	mul	r26, r21
    3bea:	90 0d       	add	r25, r0
    3bec:	b4 9f       	mul	r27, r20
    3bee:	90 0d       	add	r25, r0
    3bf0:	a4 9f       	mul	r26, r20
    3bf2:	80 0d       	add	r24, r0
    3bf4:	91 1d       	adc	r25, r1
    3bf6:	11 24       	eor	r1, r1
    3bf8:	08 95       	ret

00003bfa <malloc>:
    3bfa:	0f 93       	push	r16
    3bfc:	1f 93       	push	r17
    3bfe:	cf 93       	push	r28
    3c00:	df 93       	push	r29
    3c02:	82 30       	cpi	r24, 0x02	; 2
    3c04:	91 05       	cpc	r25, r1
    3c06:	10 f4       	brcc	.+4      	; 0x3c0c <malloc+0x12>
    3c08:	82 e0       	ldi	r24, 0x02	; 2
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	e0 91 47 06 	lds	r30, 0x0647	; 0x800647 <__flp>
    3c10:	f0 91 48 06 	lds	r31, 0x0648	; 0x800648 <__flp+0x1>
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	a0 e0       	ldi	r26, 0x00	; 0
    3c1a:	b0 e0       	ldi	r27, 0x00	; 0
    3c1c:	30 97       	sbiw	r30, 0x00	; 0
    3c1e:	19 f1       	breq	.+70     	; 0x3c66 <malloc+0x6c>
    3c20:	40 81       	ld	r20, Z
    3c22:	51 81       	ldd	r21, Z+1	; 0x01
    3c24:	02 81       	ldd	r16, Z+2	; 0x02
    3c26:	13 81       	ldd	r17, Z+3	; 0x03
    3c28:	48 17       	cp	r20, r24
    3c2a:	59 07       	cpc	r21, r25
    3c2c:	c8 f0       	brcs	.+50     	; 0x3c60 <malloc+0x66>
    3c2e:	84 17       	cp	r24, r20
    3c30:	95 07       	cpc	r25, r21
    3c32:	69 f4       	brne	.+26     	; 0x3c4e <malloc+0x54>
    3c34:	10 97       	sbiw	r26, 0x00	; 0
    3c36:	31 f0       	breq	.+12     	; 0x3c44 <malloc+0x4a>
    3c38:	12 96       	adiw	r26, 0x02	; 2
    3c3a:	0c 93       	st	X, r16
    3c3c:	12 97       	sbiw	r26, 0x02	; 2
    3c3e:	13 96       	adiw	r26, 0x03	; 3
    3c40:	1c 93       	st	X, r17
    3c42:	27 c0       	rjmp	.+78     	; 0x3c92 <malloc+0x98>
    3c44:	00 93 47 06 	sts	0x0647, r16	; 0x800647 <__flp>
    3c48:	10 93 48 06 	sts	0x0648, r17	; 0x800648 <__flp+0x1>
    3c4c:	22 c0       	rjmp	.+68     	; 0x3c92 <malloc+0x98>
    3c4e:	21 15       	cp	r18, r1
    3c50:	31 05       	cpc	r19, r1
    3c52:	19 f0       	breq	.+6      	; 0x3c5a <malloc+0x60>
    3c54:	42 17       	cp	r20, r18
    3c56:	53 07       	cpc	r21, r19
    3c58:	18 f4       	brcc	.+6      	; 0x3c60 <malloc+0x66>
    3c5a:	9a 01       	movw	r18, r20
    3c5c:	bd 01       	movw	r22, r26
    3c5e:	ef 01       	movw	r28, r30
    3c60:	df 01       	movw	r26, r30
    3c62:	f8 01       	movw	r30, r16
    3c64:	db cf       	rjmp	.-74     	; 0x3c1c <malloc+0x22>
    3c66:	21 15       	cp	r18, r1
    3c68:	31 05       	cpc	r19, r1
    3c6a:	f9 f0       	breq	.+62     	; 0x3caa <malloc+0xb0>
    3c6c:	28 1b       	sub	r18, r24
    3c6e:	39 0b       	sbc	r19, r25
    3c70:	24 30       	cpi	r18, 0x04	; 4
    3c72:	31 05       	cpc	r19, r1
    3c74:	80 f4       	brcc	.+32     	; 0x3c96 <malloc+0x9c>
    3c76:	8a 81       	ldd	r24, Y+2	; 0x02
    3c78:	9b 81       	ldd	r25, Y+3	; 0x03
    3c7a:	61 15       	cp	r22, r1
    3c7c:	71 05       	cpc	r23, r1
    3c7e:	21 f0       	breq	.+8      	; 0x3c88 <malloc+0x8e>
    3c80:	fb 01       	movw	r30, r22
    3c82:	93 83       	std	Z+3, r25	; 0x03
    3c84:	82 83       	std	Z+2, r24	; 0x02
    3c86:	04 c0       	rjmp	.+8      	; 0x3c90 <malloc+0x96>
    3c88:	90 93 48 06 	sts	0x0648, r25	; 0x800648 <__flp+0x1>
    3c8c:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__flp>
    3c90:	fe 01       	movw	r30, r28
    3c92:	32 96       	adiw	r30, 0x02	; 2
    3c94:	44 c0       	rjmp	.+136    	; 0x3d1e <malloc+0x124>
    3c96:	fe 01       	movw	r30, r28
    3c98:	e2 0f       	add	r30, r18
    3c9a:	f3 1f       	adc	r31, r19
    3c9c:	81 93       	st	Z+, r24
    3c9e:	91 93       	st	Z+, r25
    3ca0:	22 50       	subi	r18, 0x02	; 2
    3ca2:	31 09       	sbc	r19, r1
    3ca4:	39 83       	std	Y+1, r19	; 0x01
    3ca6:	28 83       	st	Y, r18
    3ca8:	3a c0       	rjmp	.+116    	; 0x3d1e <malloc+0x124>
    3caa:	20 91 45 06 	lds	r18, 0x0645	; 0x800645 <__brkval>
    3cae:	30 91 46 06 	lds	r19, 0x0646	; 0x800646 <__brkval+0x1>
    3cb2:	23 2b       	or	r18, r19
    3cb4:	41 f4       	brne	.+16     	; 0x3cc6 <malloc+0xcc>
    3cb6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3cba:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3cbe:	30 93 46 06 	sts	0x0646, r19	; 0x800646 <__brkval+0x1>
    3cc2:	20 93 45 06 	sts	0x0645, r18	; 0x800645 <__brkval>
    3cc6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3cca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3cce:	21 15       	cp	r18, r1
    3cd0:	31 05       	cpc	r19, r1
    3cd2:	41 f4       	brne	.+16     	; 0x3ce4 <malloc+0xea>
    3cd4:	2d b7       	in	r18, 0x3d	; 61
    3cd6:	3e b7       	in	r19, 0x3e	; 62
    3cd8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3cdc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3ce0:	24 1b       	sub	r18, r20
    3ce2:	35 0b       	sbc	r19, r21
    3ce4:	e0 91 45 06 	lds	r30, 0x0645	; 0x800645 <__brkval>
    3ce8:	f0 91 46 06 	lds	r31, 0x0646	; 0x800646 <__brkval+0x1>
    3cec:	e2 17       	cp	r30, r18
    3cee:	f3 07       	cpc	r31, r19
    3cf0:	a0 f4       	brcc	.+40     	; 0x3d1a <malloc+0x120>
    3cf2:	2e 1b       	sub	r18, r30
    3cf4:	3f 0b       	sbc	r19, r31
    3cf6:	28 17       	cp	r18, r24
    3cf8:	39 07       	cpc	r19, r25
    3cfa:	78 f0       	brcs	.+30     	; 0x3d1a <malloc+0x120>
    3cfc:	ac 01       	movw	r20, r24
    3cfe:	4e 5f       	subi	r20, 0xFE	; 254
    3d00:	5f 4f       	sbci	r21, 0xFF	; 255
    3d02:	24 17       	cp	r18, r20
    3d04:	35 07       	cpc	r19, r21
    3d06:	48 f0       	brcs	.+18     	; 0x3d1a <malloc+0x120>
    3d08:	4e 0f       	add	r20, r30
    3d0a:	5f 1f       	adc	r21, r31
    3d0c:	50 93 46 06 	sts	0x0646, r21	; 0x800646 <__brkval+0x1>
    3d10:	40 93 45 06 	sts	0x0645, r20	; 0x800645 <__brkval>
    3d14:	81 93       	st	Z+, r24
    3d16:	91 93       	st	Z+, r25
    3d18:	02 c0       	rjmp	.+4      	; 0x3d1e <malloc+0x124>
    3d1a:	e0 e0       	ldi	r30, 0x00	; 0
    3d1c:	f0 e0       	ldi	r31, 0x00	; 0
    3d1e:	cf 01       	movw	r24, r30
    3d20:	df 91       	pop	r29
    3d22:	cf 91       	pop	r28
    3d24:	1f 91       	pop	r17
    3d26:	0f 91       	pop	r16
    3d28:	08 95       	ret

00003d2a <free>:
    3d2a:	cf 93       	push	r28
    3d2c:	df 93       	push	r29
    3d2e:	00 97       	sbiw	r24, 0x00	; 0
    3d30:	09 f4       	brne	.+2      	; 0x3d34 <free+0xa>
    3d32:	81 c0       	rjmp	.+258    	; 0x3e36 <free+0x10c>
    3d34:	fc 01       	movw	r30, r24
    3d36:	32 97       	sbiw	r30, 0x02	; 2
    3d38:	13 82       	std	Z+3, r1	; 0x03
    3d3a:	12 82       	std	Z+2, r1	; 0x02
    3d3c:	a0 91 47 06 	lds	r26, 0x0647	; 0x800647 <__flp>
    3d40:	b0 91 48 06 	lds	r27, 0x0648	; 0x800648 <__flp+0x1>
    3d44:	10 97       	sbiw	r26, 0x00	; 0
    3d46:	81 f4       	brne	.+32     	; 0x3d68 <free+0x3e>
    3d48:	20 81       	ld	r18, Z
    3d4a:	31 81       	ldd	r19, Z+1	; 0x01
    3d4c:	82 0f       	add	r24, r18
    3d4e:	93 1f       	adc	r25, r19
    3d50:	20 91 45 06 	lds	r18, 0x0645	; 0x800645 <__brkval>
    3d54:	30 91 46 06 	lds	r19, 0x0646	; 0x800646 <__brkval+0x1>
    3d58:	28 17       	cp	r18, r24
    3d5a:	39 07       	cpc	r19, r25
    3d5c:	51 f5       	brne	.+84     	; 0x3db2 <free+0x88>
    3d5e:	f0 93 46 06 	sts	0x0646, r31	; 0x800646 <__brkval+0x1>
    3d62:	e0 93 45 06 	sts	0x0645, r30	; 0x800645 <__brkval>
    3d66:	67 c0       	rjmp	.+206    	; 0x3e36 <free+0x10c>
    3d68:	ed 01       	movw	r28, r26
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	ce 17       	cp	r28, r30
    3d70:	df 07       	cpc	r29, r31
    3d72:	40 f4       	brcc	.+16     	; 0x3d84 <free+0x5a>
    3d74:	4a 81       	ldd	r20, Y+2	; 0x02
    3d76:	5b 81       	ldd	r21, Y+3	; 0x03
    3d78:	9e 01       	movw	r18, r28
    3d7a:	41 15       	cp	r20, r1
    3d7c:	51 05       	cpc	r21, r1
    3d7e:	f1 f0       	breq	.+60     	; 0x3dbc <free+0x92>
    3d80:	ea 01       	movw	r28, r20
    3d82:	f5 cf       	rjmp	.-22     	; 0x3d6e <free+0x44>
    3d84:	d3 83       	std	Z+3, r29	; 0x03
    3d86:	c2 83       	std	Z+2, r28	; 0x02
    3d88:	40 81       	ld	r20, Z
    3d8a:	51 81       	ldd	r21, Z+1	; 0x01
    3d8c:	84 0f       	add	r24, r20
    3d8e:	95 1f       	adc	r25, r21
    3d90:	c8 17       	cp	r28, r24
    3d92:	d9 07       	cpc	r29, r25
    3d94:	59 f4       	brne	.+22     	; 0x3dac <free+0x82>
    3d96:	88 81       	ld	r24, Y
    3d98:	99 81       	ldd	r25, Y+1	; 0x01
    3d9a:	84 0f       	add	r24, r20
    3d9c:	95 1f       	adc	r25, r21
    3d9e:	02 96       	adiw	r24, 0x02	; 2
    3da0:	91 83       	std	Z+1, r25	; 0x01
    3da2:	80 83       	st	Z, r24
    3da4:	8a 81       	ldd	r24, Y+2	; 0x02
    3da6:	9b 81       	ldd	r25, Y+3	; 0x03
    3da8:	93 83       	std	Z+3, r25	; 0x03
    3daa:	82 83       	std	Z+2, r24	; 0x02
    3dac:	21 15       	cp	r18, r1
    3dae:	31 05       	cpc	r19, r1
    3db0:	29 f4       	brne	.+10     	; 0x3dbc <free+0x92>
    3db2:	f0 93 48 06 	sts	0x0648, r31	; 0x800648 <__flp+0x1>
    3db6:	e0 93 47 06 	sts	0x0647, r30	; 0x800647 <__flp>
    3dba:	3d c0       	rjmp	.+122    	; 0x3e36 <free+0x10c>
    3dbc:	e9 01       	movw	r28, r18
    3dbe:	fb 83       	std	Y+3, r31	; 0x03
    3dc0:	ea 83       	std	Y+2, r30	; 0x02
    3dc2:	49 91       	ld	r20, Y+
    3dc4:	59 91       	ld	r21, Y+
    3dc6:	c4 0f       	add	r28, r20
    3dc8:	d5 1f       	adc	r29, r21
    3dca:	ec 17       	cp	r30, r28
    3dcc:	fd 07       	cpc	r31, r29
    3dce:	61 f4       	brne	.+24     	; 0x3de8 <free+0xbe>
    3dd0:	80 81       	ld	r24, Z
    3dd2:	91 81       	ldd	r25, Z+1	; 0x01
    3dd4:	84 0f       	add	r24, r20
    3dd6:	95 1f       	adc	r25, r21
    3dd8:	02 96       	adiw	r24, 0x02	; 2
    3dda:	e9 01       	movw	r28, r18
    3ddc:	99 83       	std	Y+1, r25	; 0x01
    3dde:	88 83       	st	Y, r24
    3de0:	82 81       	ldd	r24, Z+2	; 0x02
    3de2:	93 81       	ldd	r25, Z+3	; 0x03
    3de4:	9b 83       	std	Y+3, r25	; 0x03
    3de6:	8a 83       	std	Y+2, r24	; 0x02
    3de8:	e0 e0       	ldi	r30, 0x00	; 0
    3dea:	f0 e0       	ldi	r31, 0x00	; 0
    3dec:	12 96       	adiw	r26, 0x02	; 2
    3dee:	8d 91       	ld	r24, X+
    3df0:	9c 91       	ld	r25, X
    3df2:	13 97       	sbiw	r26, 0x03	; 3
    3df4:	00 97       	sbiw	r24, 0x00	; 0
    3df6:	19 f0       	breq	.+6      	; 0x3dfe <free+0xd4>
    3df8:	fd 01       	movw	r30, r26
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	f7 cf       	rjmp	.-18     	; 0x3dec <free+0xc2>
    3dfe:	8d 91       	ld	r24, X+
    3e00:	9c 91       	ld	r25, X
    3e02:	11 97       	sbiw	r26, 0x01	; 1
    3e04:	9d 01       	movw	r18, r26
    3e06:	2e 5f       	subi	r18, 0xFE	; 254
    3e08:	3f 4f       	sbci	r19, 0xFF	; 255
    3e0a:	82 0f       	add	r24, r18
    3e0c:	93 1f       	adc	r25, r19
    3e0e:	20 91 45 06 	lds	r18, 0x0645	; 0x800645 <__brkval>
    3e12:	30 91 46 06 	lds	r19, 0x0646	; 0x800646 <__brkval+0x1>
    3e16:	28 17       	cp	r18, r24
    3e18:	39 07       	cpc	r19, r25
    3e1a:	69 f4       	brne	.+26     	; 0x3e36 <free+0x10c>
    3e1c:	30 97       	sbiw	r30, 0x00	; 0
    3e1e:	29 f4       	brne	.+10     	; 0x3e2a <free+0x100>
    3e20:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <__flp+0x1>
    3e24:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <__flp>
    3e28:	02 c0       	rjmp	.+4      	; 0x3e2e <free+0x104>
    3e2a:	13 82       	std	Z+3, r1	; 0x03
    3e2c:	12 82       	std	Z+2, r1	; 0x02
    3e2e:	b0 93 46 06 	sts	0x0646, r27	; 0x800646 <__brkval+0x1>
    3e32:	a0 93 45 06 	sts	0x0645, r26	; 0x800645 <__brkval>
    3e36:	df 91       	pop	r29
    3e38:	cf 91       	pop	r28
    3e3a:	08 95       	ret

00003e3c <strtol>:
    3e3c:	3f 92       	push	r3
    3e3e:	4f 92       	push	r4
    3e40:	5f 92       	push	r5
    3e42:	6f 92       	push	r6
    3e44:	7f 92       	push	r7
    3e46:	8f 92       	push	r8
    3e48:	9f 92       	push	r9
    3e4a:	af 92       	push	r10
    3e4c:	bf 92       	push	r11
    3e4e:	cf 92       	push	r12
    3e50:	df 92       	push	r13
    3e52:	ef 92       	push	r14
    3e54:	ff 92       	push	r15
    3e56:	0f 93       	push	r16
    3e58:	1f 93       	push	r17
    3e5a:	cf 93       	push	r28
    3e5c:	df 93       	push	r29
    3e5e:	5c 01       	movw	r10, r24
    3e60:	6b 01       	movw	r12, r22
    3e62:	7a 01       	movw	r14, r20
    3e64:	61 15       	cp	r22, r1
    3e66:	71 05       	cpc	r23, r1
    3e68:	19 f0       	breq	.+6      	; 0x3e70 <strtol+0x34>
    3e6a:	fb 01       	movw	r30, r22
    3e6c:	91 83       	std	Z+1, r25	; 0x01
    3e6e:	80 83       	st	Z, r24
    3e70:	e1 14       	cp	r14, r1
    3e72:	f1 04       	cpc	r15, r1
    3e74:	29 f0       	breq	.+10     	; 0x3e80 <strtol+0x44>
    3e76:	c7 01       	movw	r24, r14
    3e78:	02 97       	sbiw	r24, 0x02	; 2
    3e7a:	83 97       	sbiw	r24, 0x23	; 35
    3e7c:	08 f0       	brcs	.+2      	; 0x3e80 <strtol+0x44>
    3e7e:	e2 c0       	rjmp	.+452    	; 0x4044 <strtol+0x208>
    3e80:	e5 01       	movw	r28, r10
    3e82:	21 96       	adiw	r28, 0x01	; 1
    3e84:	f5 01       	movw	r30, r10
    3e86:	10 81       	ld	r17, Z
    3e88:	81 2f       	mov	r24, r17
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	2b d2       	rcall	.+1110   	; 0x42e4 <isspace>
    3e8e:	89 2b       	or	r24, r25
    3e90:	11 f0       	breq	.+4      	; 0x3e96 <strtol+0x5a>
    3e92:	5e 01       	movw	r10, r28
    3e94:	f5 cf       	rjmp	.-22     	; 0x3e80 <strtol+0x44>
    3e96:	1d 32       	cpi	r17, 0x2D	; 45
    3e98:	29 f4       	brne	.+10     	; 0x3ea4 <strtol+0x68>
    3e9a:	21 96       	adiw	r28, 0x01	; 1
    3e9c:	f5 01       	movw	r30, r10
    3e9e:	11 81       	ldd	r17, Z+1	; 0x01
    3ea0:	01 e0       	ldi	r16, 0x01	; 1
    3ea2:	07 c0       	rjmp	.+14     	; 0x3eb2 <strtol+0x76>
    3ea4:	1b 32       	cpi	r17, 0x2B	; 43
    3ea6:	21 f4       	brne	.+8      	; 0x3eb0 <strtol+0x74>
    3ea8:	e5 01       	movw	r28, r10
    3eaa:	22 96       	adiw	r28, 0x02	; 2
    3eac:	f5 01       	movw	r30, r10
    3eae:	11 81       	ldd	r17, Z+1	; 0x01
    3eb0:	00 e0       	ldi	r16, 0x00	; 0
    3eb2:	e1 14       	cp	r14, r1
    3eb4:	f1 04       	cpc	r15, r1
    3eb6:	09 f1       	breq	.+66     	; 0x3efa <strtol+0xbe>
    3eb8:	f0 e1       	ldi	r31, 0x10	; 16
    3eba:	ef 16       	cp	r14, r31
    3ebc:	f1 04       	cpc	r15, r1
    3ebe:	29 f4       	brne	.+10     	; 0x3eca <strtol+0x8e>
    3ec0:	3e c0       	rjmp	.+124    	; 0x3f3e <strtol+0x102>
    3ec2:	10 e3       	ldi	r17, 0x30	; 48
    3ec4:	e1 14       	cp	r14, r1
    3ec6:	f1 04       	cpc	r15, r1
    3ec8:	21 f1       	breq	.+72     	; 0x3f12 <strtol+0xd6>
    3eca:	28 e0       	ldi	r18, 0x08	; 8
    3ecc:	e2 16       	cp	r14, r18
    3ece:	f1 04       	cpc	r15, r1
    3ed0:	01 f1       	breq	.+64     	; 0x3f12 <strtol+0xd6>
    3ed2:	54 f4       	brge	.+20     	; 0x3ee8 <strtol+0xac>
    3ed4:	e2 e0       	ldi	r30, 0x02	; 2
    3ed6:	ee 16       	cp	r14, r30
    3ed8:	f1 04       	cpc	r15, r1
    3eda:	21 f5       	brne	.+72     	; 0x3f24 <strtol+0xe8>
    3edc:	81 2c       	mov	r8, r1
    3ede:	91 2c       	mov	r9, r1
    3ee0:	a1 2c       	mov	r10, r1
    3ee2:	b0 e4       	ldi	r27, 0x40	; 64
    3ee4:	bb 2e       	mov	r11, r27
    3ee6:	3d c0       	rjmp	.+122    	; 0x3f62 <strtol+0x126>
    3ee8:	fa e0       	ldi	r31, 0x0A	; 10
    3eea:	ef 16       	cp	r14, r31
    3eec:	f1 04       	cpc	r15, r1
    3eee:	39 f0       	breq	.+14     	; 0x3efe <strtol+0xc2>
    3ef0:	20 e1       	ldi	r18, 0x10	; 16
    3ef2:	e2 16       	cp	r14, r18
    3ef4:	f1 04       	cpc	r15, r1
    3ef6:	b1 f4       	brne	.+44     	; 0x3f24 <strtol+0xe8>
    3ef8:	2f c0       	rjmp	.+94     	; 0x3f58 <strtol+0x11c>
    3efa:	10 33       	cpi	r17, 0x30	; 48
    3efc:	11 f1       	breq	.+68     	; 0x3f42 <strtol+0x106>
    3efe:	fa e0       	ldi	r31, 0x0A	; 10
    3f00:	ef 2e       	mov	r14, r31
    3f02:	f1 2c       	mov	r15, r1
    3f04:	ac ec       	ldi	r26, 0xCC	; 204
    3f06:	8a 2e       	mov	r8, r26
    3f08:	98 2c       	mov	r9, r8
    3f0a:	a8 2c       	mov	r10, r8
    3f0c:	ac e0       	ldi	r26, 0x0C	; 12
    3f0e:	ba 2e       	mov	r11, r26
    3f10:	28 c0       	rjmp	.+80     	; 0x3f62 <strtol+0x126>
    3f12:	78 e0       	ldi	r23, 0x08	; 8
    3f14:	e7 2e       	mov	r14, r23
    3f16:	f1 2c       	mov	r15, r1
    3f18:	81 2c       	mov	r8, r1
    3f1a:	91 2c       	mov	r9, r1
    3f1c:	a1 2c       	mov	r10, r1
    3f1e:	e0 e1       	ldi	r30, 0x10	; 16
    3f20:	be 2e       	mov	r11, r30
    3f22:	1f c0       	rjmp	.+62     	; 0x3f62 <strtol+0x126>
    3f24:	60 e0       	ldi	r22, 0x00	; 0
    3f26:	70 e0       	ldi	r23, 0x00	; 0
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	90 e8       	ldi	r25, 0x80	; 128
    3f2c:	97 01       	movw	r18, r14
    3f2e:	0f 2c       	mov	r0, r15
    3f30:	00 0c       	add	r0, r0
    3f32:	44 0b       	sbc	r20, r20
    3f34:	55 0b       	sbc	r21, r21
    3f36:	09 de       	rcall	.-1006   	; 0x3b4a <__udivmodsi4>
    3f38:	49 01       	movw	r8, r18
    3f3a:	5a 01       	movw	r10, r20
    3f3c:	12 c0       	rjmp	.+36     	; 0x3f62 <strtol+0x126>
    3f3e:	10 33       	cpi	r17, 0x30	; 48
    3f40:	59 f4       	brne	.+22     	; 0x3f58 <strtol+0x11c>
    3f42:	88 81       	ld	r24, Y
    3f44:	8f 7d       	andi	r24, 0xDF	; 223
    3f46:	88 35       	cpi	r24, 0x58	; 88
    3f48:	09 f0       	breq	.+2      	; 0x3f4c <strtol+0x110>
    3f4a:	bb cf       	rjmp	.-138    	; 0x3ec2 <strtol+0x86>
    3f4c:	19 81       	ldd	r17, Y+1	; 0x01
    3f4e:	22 96       	adiw	r28, 0x02	; 2
    3f50:	02 60       	ori	r16, 0x02	; 2
    3f52:	80 e1       	ldi	r24, 0x10	; 16
    3f54:	e8 2e       	mov	r14, r24
    3f56:	f1 2c       	mov	r15, r1
    3f58:	81 2c       	mov	r8, r1
    3f5a:	91 2c       	mov	r9, r1
    3f5c:	a1 2c       	mov	r10, r1
    3f5e:	68 e0       	ldi	r22, 0x08	; 8
    3f60:	b6 2e       	mov	r11, r22
    3f62:	40 e0       	ldi	r20, 0x00	; 0
    3f64:	60 e0       	ldi	r22, 0x00	; 0
    3f66:	70 e0       	ldi	r23, 0x00	; 0
    3f68:	cb 01       	movw	r24, r22
    3f6a:	27 01       	movw	r4, r14
    3f6c:	0f 2c       	mov	r0, r15
    3f6e:	00 0c       	add	r0, r0
    3f70:	66 08       	sbc	r6, r6
    3f72:	77 08       	sbc	r7, r7
    3f74:	fe 01       	movw	r30, r28
    3f76:	50 ed       	ldi	r21, 0xD0	; 208
    3f78:	35 2e       	mov	r3, r21
    3f7a:	31 0e       	add	r3, r17
    3f7c:	29 e0       	ldi	r18, 0x09	; 9
    3f7e:	23 15       	cp	r18, r3
    3f80:	70 f4       	brcc	.+28     	; 0x3f9e <strtol+0x162>
    3f82:	2f eb       	ldi	r18, 0xBF	; 191
    3f84:	21 0f       	add	r18, r17
    3f86:	2a 31       	cpi	r18, 0x1A	; 26
    3f88:	18 f4       	brcc	.+6      	; 0x3f90 <strtol+0x154>
    3f8a:	39 ec       	ldi	r19, 0xC9	; 201
    3f8c:	33 2e       	mov	r3, r19
    3f8e:	06 c0       	rjmp	.+12     	; 0x3f9c <strtol+0x160>
    3f90:	2f e9       	ldi	r18, 0x9F	; 159
    3f92:	21 0f       	add	r18, r17
    3f94:	2a 31       	cpi	r18, 0x1A	; 26
    3f96:	10 f5       	brcc	.+68     	; 0x3fdc <strtol+0x1a0>
    3f98:	29 ea       	ldi	r18, 0xA9	; 169
    3f9a:	32 2e       	mov	r3, r18
    3f9c:	31 0e       	add	r3, r17
    3f9e:	23 2d       	mov	r18, r3
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	2e 15       	cp	r18, r14
    3fa4:	3f 05       	cpc	r19, r15
    3fa6:	d4 f4       	brge	.+52     	; 0x3fdc <strtol+0x1a0>
    3fa8:	47 fd       	sbrc	r20, 7
    3faa:	15 c0       	rjmp	.+42     	; 0x3fd6 <strtol+0x19a>
    3fac:	86 16       	cp	r8, r22
    3fae:	97 06       	cpc	r9, r23
    3fb0:	a8 06       	cpc	r10, r24
    3fb2:	b9 06       	cpc	r11, r25
    3fb4:	68 f0       	brcs	.+26     	; 0x3fd0 <strtol+0x194>
    3fb6:	a3 01       	movw	r20, r6
    3fb8:	92 01       	movw	r18, r4
    3fba:	f5 d4       	rcall	.+2538   	; 0x49a6 <__mulsi3>
    3fbc:	63 0d       	add	r22, r3
    3fbe:	71 1d       	adc	r23, r1
    3fc0:	81 1d       	adc	r24, r1
    3fc2:	91 1d       	adc	r25, r1
    3fc4:	61 30       	cpi	r22, 0x01	; 1
    3fc6:	71 05       	cpc	r23, r1
    3fc8:	81 05       	cpc	r24, r1
    3fca:	20 e8       	ldi	r18, 0x80	; 128
    3fcc:	92 07       	cpc	r25, r18
    3fce:	10 f0       	brcs	.+4      	; 0x3fd4 <strtol+0x198>
    3fd0:	4f ef       	ldi	r20, 0xFF	; 255
    3fd2:	01 c0       	rjmp	.+2      	; 0x3fd6 <strtol+0x19a>
    3fd4:	41 e0       	ldi	r20, 0x01	; 1
    3fd6:	21 96       	adiw	r28, 0x01	; 1
    3fd8:	10 81       	ld	r17, Z
    3fda:	cc cf       	rjmp	.-104    	; 0x3f74 <strtol+0x138>
    3fdc:	20 2f       	mov	r18, r16
    3fde:	21 70       	andi	r18, 0x01	; 1
    3fe0:	c1 14       	cp	r12, r1
    3fe2:	d1 04       	cpc	r13, r1
    3fe4:	71 f0       	breq	.+28     	; 0x4002 <strtol+0x1c6>
    3fe6:	44 23       	and	r20, r20
    3fe8:	29 f0       	breq	.+10     	; 0x3ff4 <strtol+0x1b8>
    3fea:	21 97       	sbiw	r28, 0x01	; 1
    3fec:	f6 01       	movw	r30, r12
    3fee:	d1 83       	std	Z+1, r29	; 0x01
    3ff0:	c0 83       	st	Z, r28
    3ff2:	07 c0       	rjmp	.+14     	; 0x4002 <strtol+0x1c6>
    3ff4:	01 ff       	sbrs	r16, 1
    3ff6:	19 c0       	rjmp	.+50     	; 0x402a <strtol+0x1ee>
    3ff8:	22 97       	sbiw	r28, 0x02	; 2
    3ffa:	f6 01       	movw	r30, r12
    3ffc:	d1 83       	std	Z+1, r29	; 0x01
    3ffe:	c0 83       	st	Z, r28
    4000:	14 c0       	rjmp	.+40     	; 0x402a <strtol+0x1ee>
    4002:	47 ff       	sbrs	r20, 7
    4004:	12 c0       	rjmp	.+36     	; 0x402a <strtol+0x1ee>
    4006:	22 23       	and	r18, r18
    4008:	29 f0       	breq	.+10     	; 0x4014 <strtol+0x1d8>
    400a:	60 e0       	ldi	r22, 0x00	; 0
    400c:	70 e0       	ldi	r23, 0x00	; 0
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	90 e8       	ldi	r25, 0x80	; 128
    4012:	04 c0       	rjmp	.+8      	; 0x401c <strtol+0x1e0>
    4014:	6f ef       	ldi	r22, 0xFF	; 255
    4016:	7f ef       	ldi	r23, 0xFF	; 255
    4018:	8f ef       	ldi	r24, 0xFF	; 255
    401a:	9f e7       	ldi	r25, 0x7F	; 127
    401c:	22 e2       	ldi	r18, 0x22	; 34
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	30 93 4a 06 	sts	0x064A, r19	; 0x80064a <errno+0x1>
    4024:	20 93 49 06 	sts	0x0649, r18	; 0x800649 <errno>
    4028:	09 c0       	rjmp	.+18     	; 0x403c <strtol+0x200>
    402a:	22 23       	and	r18, r18
    402c:	81 f0       	breq	.+32     	; 0x404e <strtol+0x212>
    402e:	90 95       	com	r25
    4030:	80 95       	com	r24
    4032:	70 95       	com	r23
    4034:	61 95       	neg	r22
    4036:	7f 4f       	sbci	r23, 0xFF	; 255
    4038:	8f 4f       	sbci	r24, 0xFF	; 255
    403a:	9f 4f       	sbci	r25, 0xFF	; 255
    403c:	46 2f       	mov	r20, r22
    403e:	37 2f       	mov	r19, r23
    4040:	28 2f       	mov	r18, r24
    4042:	12 c0       	rjmp	.+36     	; 0x4068 <strtol+0x22c>
    4044:	40 e0       	ldi	r20, 0x00	; 0
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	0d c0       	rjmp	.+26     	; 0x4068 <strtol+0x22c>
    404e:	97 ff       	sbrs	r25, 7
    4050:	f5 cf       	rjmp	.-22     	; 0x403c <strtol+0x200>
    4052:	82 e2       	ldi	r24, 0x22	; 34
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	90 93 4a 06 	sts	0x064A, r25	; 0x80064a <errno+0x1>
    405a:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <errno>
    405e:	6f ef       	ldi	r22, 0xFF	; 255
    4060:	7f ef       	ldi	r23, 0xFF	; 255
    4062:	8f ef       	ldi	r24, 0xFF	; 255
    4064:	9f e7       	ldi	r25, 0x7F	; 127
    4066:	ea cf       	rjmp	.-44     	; 0x403c <strtol+0x200>
    4068:	64 2f       	mov	r22, r20
    406a:	73 2f       	mov	r23, r19
    406c:	82 2f       	mov	r24, r18
    406e:	df 91       	pop	r29
    4070:	cf 91       	pop	r28
    4072:	1f 91       	pop	r17
    4074:	0f 91       	pop	r16
    4076:	ff 90       	pop	r15
    4078:	ef 90       	pop	r14
    407a:	df 90       	pop	r13
    407c:	cf 90       	pop	r12
    407e:	bf 90       	pop	r11
    4080:	af 90       	pop	r10
    4082:	9f 90       	pop	r9
    4084:	8f 90       	pop	r8
    4086:	7f 90       	pop	r7
    4088:	6f 90       	pop	r6
    408a:	5f 90       	pop	r5
    408c:	4f 90       	pop	r4
    408e:	3f 90       	pop	r3
    4090:	08 95       	ret

00004092 <strtoul>:
    4092:	3f 92       	push	r3
    4094:	4f 92       	push	r4
    4096:	5f 92       	push	r5
    4098:	6f 92       	push	r6
    409a:	7f 92       	push	r7
    409c:	8f 92       	push	r8
    409e:	9f 92       	push	r9
    40a0:	af 92       	push	r10
    40a2:	bf 92       	push	r11
    40a4:	cf 92       	push	r12
    40a6:	df 92       	push	r13
    40a8:	ef 92       	push	r14
    40aa:	ff 92       	push	r15
    40ac:	0f 93       	push	r16
    40ae:	1f 93       	push	r17
    40b0:	cf 93       	push	r28
    40b2:	df 93       	push	r29
    40b4:	5c 01       	movw	r10, r24
    40b6:	6b 01       	movw	r12, r22
    40b8:	7a 01       	movw	r14, r20
    40ba:	61 15       	cp	r22, r1
    40bc:	71 05       	cpc	r23, r1
    40be:	19 f0       	breq	.+6      	; 0x40c6 <strtoul+0x34>
    40c0:	fb 01       	movw	r30, r22
    40c2:	91 83       	std	Z+1, r25	; 0x01
    40c4:	80 83       	st	Z, r24
    40c6:	e1 14       	cp	r14, r1
    40c8:	f1 04       	cpc	r15, r1
    40ca:	29 f0       	breq	.+10     	; 0x40d6 <strtoul+0x44>
    40cc:	c7 01       	movw	r24, r14
    40ce:	02 97       	sbiw	r24, 0x02	; 2
    40d0:	83 97       	sbiw	r24, 0x23	; 35
    40d2:	08 f0       	brcs	.+2      	; 0x40d6 <strtoul+0x44>
    40d4:	c6 c0       	rjmp	.+396    	; 0x4262 <strtoul+0x1d0>
    40d6:	e5 01       	movw	r28, r10
    40d8:	21 96       	adiw	r28, 0x01	; 1
    40da:	f5 01       	movw	r30, r10
    40dc:	10 81       	ld	r17, Z
    40de:	81 2f       	mov	r24, r17
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	00 d1       	rcall	.+512    	; 0x42e4 <isspace>
    40e4:	89 2b       	or	r24, r25
    40e6:	11 f0       	breq	.+4      	; 0x40ec <strtoul+0x5a>
    40e8:	5e 01       	movw	r10, r28
    40ea:	f5 cf       	rjmp	.-22     	; 0x40d6 <strtoul+0x44>
    40ec:	1d 32       	cpi	r17, 0x2D	; 45
    40ee:	29 f4       	brne	.+10     	; 0x40fa <strtoul+0x68>
    40f0:	21 96       	adiw	r28, 0x01	; 1
    40f2:	f5 01       	movw	r30, r10
    40f4:	11 81       	ldd	r17, Z+1	; 0x01
    40f6:	01 e0       	ldi	r16, 0x01	; 1
    40f8:	07 c0       	rjmp	.+14     	; 0x4108 <strtoul+0x76>
    40fa:	1b 32       	cpi	r17, 0x2B	; 43
    40fc:	21 f4       	brne	.+8      	; 0x4106 <strtoul+0x74>
    40fe:	e5 01       	movw	r28, r10
    4100:	22 96       	adiw	r28, 0x02	; 2
    4102:	f5 01       	movw	r30, r10
    4104:	11 81       	ldd	r17, Z+1	; 0x01
    4106:	00 e0       	ldi	r16, 0x00	; 0
    4108:	e1 14       	cp	r14, r1
    410a:	f1 04       	cpc	r15, r1
    410c:	b1 f0       	breq	.+44     	; 0x413a <strtoul+0xa8>
    410e:	f0 e1       	ldi	r31, 0x10	; 16
    4110:	ef 16       	cp	r14, r31
    4112:	f1 04       	cpc	r15, r1
    4114:	29 f4       	brne	.+10     	; 0x4120 <strtoul+0x8e>
    4116:	ae c0       	rjmp	.+348    	; 0x4274 <strtoul+0x1e2>
    4118:	10 e3       	ldi	r17, 0x30	; 48
    411a:	e1 14       	cp	r14, r1
    411c:	f1 04       	cpc	r15, r1
    411e:	01 f1       	breq	.+64     	; 0x4160 <strtoul+0xce>
    4120:	2a e0       	ldi	r18, 0x0A	; 10
    4122:	e2 16       	cp	r14, r18
    4124:	f1 04       	cpc	r15, r1
    4126:	a9 f1       	breq	.+106    	; 0x4192 <strtoul+0x100>
    4128:	80 e1       	ldi	r24, 0x10	; 16
    412a:	e8 16       	cp	r14, r24
    412c:	f1 04       	cpc	r15, r1
    412e:	71 f0       	breq	.+28     	; 0x414c <strtoul+0xba>
    4130:	e8 e0       	ldi	r30, 0x08	; 8
    4132:	ee 16       	cp	r14, r30
    4134:	f1 04       	cpc	r15, r1
    4136:	f1 f4       	brne	.+60     	; 0x4174 <strtoul+0xe2>
    4138:	13 c0       	rjmp	.+38     	; 0x4160 <strtoul+0xce>
    413a:	10 33       	cpi	r17, 0x30	; 48
    413c:	39 f5       	brne	.+78     	; 0x418c <strtoul+0xfa>
    413e:	88 81       	ld	r24, Y
    4140:	8f 7d       	andi	r24, 0xDF	; 223
    4142:	88 35       	cpi	r24, 0x58	; 88
    4144:	49 f7       	brne	.-46     	; 0x4118 <strtoul+0x86>
    4146:	19 81       	ldd	r17, Y+1	; 0x01
    4148:	22 96       	adiw	r28, 0x02	; 2
    414a:	02 60       	ori	r16, 0x02	; 2
    414c:	f0 e1       	ldi	r31, 0x10	; 16
    414e:	ef 2e       	mov	r14, r31
    4150:	f1 2c       	mov	r15, r1
    4152:	88 24       	eor	r8, r8
    4154:	8a 94       	dec	r8
    4156:	98 2c       	mov	r9, r8
    4158:	a8 2c       	mov	r10, r8
    415a:	af e0       	ldi	r26, 0x0F	; 15
    415c:	ba 2e       	mov	r11, r26
    415e:	1f c0       	rjmp	.+62     	; 0x419e <strtoul+0x10c>
    4160:	78 e0       	ldi	r23, 0x08	; 8
    4162:	e7 2e       	mov	r14, r23
    4164:	f1 2c       	mov	r15, r1
    4166:	88 24       	eor	r8, r8
    4168:	8a 94       	dec	r8
    416a:	98 2c       	mov	r9, r8
    416c:	a8 2c       	mov	r10, r8
    416e:	ef e1       	ldi	r30, 0x1F	; 31
    4170:	be 2e       	mov	r11, r30
    4172:	15 c0       	rjmp	.+42     	; 0x419e <strtoul+0x10c>
    4174:	6f ef       	ldi	r22, 0xFF	; 255
    4176:	7f ef       	ldi	r23, 0xFF	; 255
    4178:	cb 01       	movw	r24, r22
    417a:	97 01       	movw	r18, r14
    417c:	0f 2c       	mov	r0, r15
    417e:	00 0c       	add	r0, r0
    4180:	44 0b       	sbc	r20, r20
    4182:	55 0b       	sbc	r21, r21
    4184:	e2 dc       	rcall	.-1596   	; 0x3b4a <__udivmodsi4>
    4186:	49 01       	movw	r8, r18
    4188:	5a 01       	movw	r10, r20
    418a:	09 c0       	rjmp	.+18     	; 0x419e <strtoul+0x10c>
    418c:	8a e0       	ldi	r24, 0x0A	; 10
    418e:	e8 2e       	mov	r14, r24
    4190:	f1 2c       	mov	r15, r1
    4192:	69 e9       	ldi	r22, 0x99	; 153
    4194:	86 2e       	mov	r8, r22
    4196:	98 2c       	mov	r9, r8
    4198:	a8 2c       	mov	r10, r8
    419a:	69 e1       	ldi	r22, 0x19	; 25
    419c:	b6 2e       	mov	r11, r22
    419e:	40 e0       	ldi	r20, 0x00	; 0
    41a0:	60 e0       	ldi	r22, 0x00	; 0
    41a2:	70 e0       	ldi	r23, 0x00	; 0
    41a4:	cb 01       	movw	r24, r22
    41a6:	27 01       	movw	r4, r14
    41a8:	0f 2c       	mov	r0, r15
    41aa:	00 0c       	add	r0, r0
    41ac:	66 08       	sbc	r6, r6
    41ae:	77 08       	sbc	r7, r7
    41b0:	fe 01       	movw	r30, r28
    41b2:	50 ed       	ldi	r21, 0xD0	; 208
    41b4:	35 2e       	mov	r3, r21
    41b6:	31 0e       	add	r3, r17
    41b8:	29 e0       	ldi	r18, 0x09	; 9
    41ba:	23 15       	cp	r18, r3
    41bc:	70 f4       	brcc	.+28     	; 0x41da <strtoul+0x148>
    41be:	2f eb       	ldi	r18, 0xBF	; 191
    41c0:	21 0f       	add	r18, r17
    41c2:	2a 31       	cpi	r18, 0x1A	; 26
    41c4:	18 f4       	brcc	.+6      	; 0x41cc <strtoul+0x13a>
    41c6:	39 ec       	ldi	r19, 0xC9	; 201
    41c8:	33 2e       	mov	r3, r19
    41ca:	06 c0       	rjmp	.+12     	; 0x41d8 <strtoul+0x146>
    41cc:	2f e9       	ldi	r18, 0x9F	; 159
    41ce:	21 0f       	add	r18, r17
    41d0:	2a 31       	cpi	r18, 0x1A	; 26
    41d2:	28 f5       	brcc	.+74     	; 0x421e <strtoul+0x18c>
    41d4:	29 ea       	ldi	r18, 0xA9	; 169
    41d6:	32 2e       	mov	r3, r18
    41d8:	31 0e       	add	r3, r17
    41da:	23 2d       	mov	r18, r3
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	2e 15       	cp	r18, r14
    41e0:	3f 05       	cpc	r19, r15
    41e2:	ec f4       	brge	.+58     	; 0x421e <strtoul+0x18c>
    41e4:	4f 3f       	cpi	r20, 0xFF	; 255
    41e6:	c1 f0       	breq	.+48     	; 0x4218 <strtoul+0x186>
    41e8:	86 16       	cp	r8, r22
    41ea:	97 06       	cpc	r9, r23
    41ec:	a8 06       	cpc	r10, r24
    41ee:	b9 06       	cpc	r11, r25
    41f0:	80 f0       	brcs	.+32     	; 0x4212 <strtoul+0x180>
    41f2:	a3 01       	movw	r20, r6
    41f4:	92 01       	movw	r18, r4
    41f6:	d7 d3       	rcall	.+1966   	; 0x49a6 <__mulsi3>
    41f8:	23 2d       	mov	r18, r3
    41fa:	30 e0       	ldi	r19, 0x00	; 0
    41fc:	40 e0       	ldi	r20, 0x00	; 0
    41fe:	50 e0       	ldi	r21, 0x00	; 0
    4200:	62 0f       	add	r22, r18
    4202:	73 1f       	adc	r23, r19
    4204:	84 1f       	adc	r24, r20
    4206:	95 1f       	adc	r25, r21
    4208:	62 17       	cp	r22, r18
    420a:	73 07       	cpc	r23, r19
    420c:	84 07       	cpc	r24, r20
    420e:	95 07       	cpc	r25, r21
    4210:	10 f4       	brcc	.+4      	; 0x4216 <strtoul+0x184>
    4212:	4f ef       	ldi	r20, 0xFF	; 255
    4214:	01 c0       	rjmp	.+2      	; 0x4218 <strtoul+0x186>
    4216:	41 e0       	ldi	r20, 0x01	; 1
    4218:	21 96       	adiw	r28, 0x01	; 1
    421a:	10 81       	ld	r17, Z
    421c:	c9 cf       	rjmp	.-110    	; 0x41b0 <strtoul+0x11e>
    421e:	c1 14       	cp	r12, r1
    4220:	d1 04       	cpc	r13, r1
    4222:	51 f0       	breq	.+20     	; 0x4238 <strtoul+0x1a6>
    4224:	44 23       	and	r20, r20
    4226:	11 f0       	breq	.+4      	; 0x422c <strtoul+0x19a>
    4228:	21 97       	sbiw	r28, 0x01	; 1
    422a:	03 c0       	rjmp	.+6      	; 0x4232 <strtoul+0x1a0>
    422c:	01 ff       	sbrs	r16, 1
    422e:	04 c0       	rjmp	.+8      	; 0x4238 <strtoul+0x1a6>
    4230:	22 97       	sbiw	r28, 0x02	; 2
    4232:	f6 01       	movw	r30, r12
    4234:	d1 83       	std	Z+1, r29	; 0x01
    4236:	c0 83       	st	Z, r28
    4238:	00 ff       	sbrs	r16, 0
    423a:	07 c0       	rjmp	.+14     	; 0x424a <strtoul+0x1b8>
    423c:	90 95       	com	r25
    423e:	80 95       	com	r24
    4240:	70 95       	com	r23
    4242:	61 95       	neg	r22
    4244:	7f 4f       	sbci	r23, 0xFF	; 255
    4246:	8f 4f       	sbci	r24, 0xFF	; 255
    4248:	9f 4f       	sbci	r25, 0xFF	; 255
    424a:	4f 3f       	cpi	r20, 0xFF	; 255
    424c:	79 f4       	brne	.+30     	; 0x426c <strtoul+0x1da>
    424e:	82 e2       	ldi	r24, 0x22	; 34
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	90 93 4a 06 	sts	0x064A, r25	; 0x80064a <errno+0x1>
    4256:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <errno>
    425a:	3f ef       	ldi	r19, 0xFF	; 255
    425c:	2f ef       	ldi	r18, 0xFF	; 255
    425e:	9f ef       	ldi	r25, 0xFF	; 255
    4260:	0d c0       	rjmp	.+26     	; 0x427c <strtoul+0x1ea>
    4262:	40 e0       	ldi	r20, 0x00	; 0
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	20 e0       	ldi	r18, 0x00	; 0
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	08 c0       	rjmp	.+16     	; 0x427c <strtoul+0x1ea>
    426c:	46 2f       	mov	r20, r22
    426e:	37 2f       	mov	r19, r23
    4270:	28 2f       	mov	r18, r24
    4272:	04 c0       	rjmp	.+8      	; 0x427c <strtoul+0x1ea>
    4274:	10 33       	cpi	r17, 0x30	; 48
    4276:	09 f0       	breq	.+2      	; 0x427a <strtoul+0x1e8>
    4278:	69 cf       	rjmp	.-302    	; 0x414c <strtoul+0xba>
    427a:	61 cf       	rjmp	.-318    	; 0x413e <strtoul+0xac>
    427c:	64 2f       	mov	r22, r20
    427e:	73 2f       	mov	r23, r19
    4280:	82 2f       	mov	r24, r18
    4282:	df 91       	pop	r29
    4284:	cf 91       	pop	r28
    4286:	1f 91       	pop	r17
    4288:	0f 91       	pop	r16
    428a:	ff 90       	pop	r15
    428c:	ef 90       	pop	r14
    428e:	df 90       	pop	r13
    4290:	cf 90       	pop	r12
    4292:	bf 90       	pop	r11
    4294:	af 90       	pop	r10
    4296:	9f 90       	pop	r9
    4298:	8f 90       	pop	r8
    429a:	7f 90       	pop	r7
    429c:	6f 90       	pop	r6
    429e:	5f 90       	pop	r5
    42a0:	4f 90       	pop	r4
    42a2:	3f 90       	pop	r3
    42a4:	08 95       	ret

000042a6 <isalnum>:
    42a6:	91 11       	cpse	r25, r1
    42a8:	06 c0       	rjmp	.+12     	; 0x42b6 <__ctype_isfalse>
    42aa:	80 53       	subi	r24, 0x30	; 48
    42ac:	8a 50       	subi	r24, 0x0A	; 10
    42ae:	10 f0       	brcs	.+4      	; 0x42b4 <isalnum+0xe>
    42b0:	86 5c       	subi	r24, 0xC6	; 198
    42b2:	06 c0       	rjmp	.+12     	; 0x42c0 <isalpha>
    42b4:	08 95       	ret

000042b6 <__ctype_isfalse>:
    42b6:	99 27       	eor	r25, r25
    42b8:	88 27       	eor	r24, r24

000042ba <__ctype_istrue>:
    42ba:	08 95       	ret

000042bc <isupper>:
    42bc:	85 fd       	sbrc	r24, 5
    42be:	fb cf       	rjmp	.-10     	; 0x42b6 <__ctype_isfalse>

000042c0 <isalpha>:
    42c0:	80 62       	ori	r24, 0x20	; 32

000042c2 <islower>:
    42c2:	91 11       	cpse	r25, r1
    42c4:	f8 cf       	rjmp	.-16     	; 0x42b6 <__ctype_isfalse>
    42c6:	81 56       	subi	r24, 0x61	; 97
    42c8:	8a 51       	subi	r24, 0x1A	; 26
    42ca:	e0 f7       	brcc	.-8      	; 0x42c4 <islower+0x2>
    42cc:	08 95       	ret

000042ce <isxdigit>:
    42ce:	91 11       	cpse	r25, r1
    42d0:	f2 cf       	rjmp	.-28     	; 0x42b6 <__ctype_isfalse>
    42d2:	80 53       	subi	r24, 0x30	; 48
    42d4:	8a 50       	subi	r24, 0x0A	; 10
    42d6:	28 f0       	brcs	.+10     	; 0x42e2 <isxdigit+0x14>
    42d8:	86 5c       	subi	r24, 0xC6	; 198
    42da:	80 62       	ori	r24, 0x20	; 32
    42dc:	81 56       	subi	r24, 0x61	; 97
    42de:	86 50       	subi	r24, 0x06	; 6
    42e0:	b8 f7       	brcc	.-18     	; 0x42d0 <isxdigit+0x2>
    42e2:	08 95       	ret

000042e4 <isspace>:
    42e4:	91 11       	cpse	r25, r1
    42e6:	e7 cf       	rjmp	.-50     	; 0x42b6 <__ctype_isfalse>
    42e8:	80 32       	cpi	r24, 0x20	; 32
    42ea:	19 f0       	breq	.+6      	; 0x42f2 <isspace+0xe>
    42ec:	89 50       	subi	r24, 0x09	; 9
    42ee:	85 50       	subi	r24, 0x05	; 5
    42f0:	d0 f7       	brcc	.-12     	; 0x42e6 <isspace+0x2>
    42f2:	08 95       	ret

000042f4 <tolower>:
    42f4:	91 11       	cpse	r25, r1
    42f6:	08 95       	ret
    42f8:	81 54       	subi	r24, 0x41	; 65
    42fa:	8a 51       	subi	r24, 0x1A	; 26
    42fc:	08 f4       	brcc	.+2      	; 0x4300 <tolower+0xc>
    42fe:	80 5e       	subi	r24, 0xE0	; 224
    4300:	85 5a       	subi	r24, 0xA5	; 165
    4302:	08 95       	ret

00004304 <memcpy>:
    4304:	fb 01       	movw	r30, r22
    4306:	dc 01       	movw	r26, r24
    4308:	02 c0       	rjmp	.+4      	; 0x430e <memcpy+0xa>
    430a:	01 90       	ld	r0, Z+
    430c:	0d 92       	st	X+, r0
    430e:	41 50       	subi	r20, 0x01	; 1
    4310:	50 40       	sbci	r21, 0x00	; 0
    4312:	d8 f7       	brcc	.-10     	; 0x430a <memcpy+0x6>
    4314:	08 95       	ret

00004316 <memmove>:
    4316:	68 17       	cp	r22, r24
    4318:	79 07       	cpc	r23, r25
    431a:	68 f4       	brcc	.+26     	; 0x4336 <memmove+0x20>
    431c:	fb 01       	movw	r30, r22
    431e:	dc 01       	movw	r26, r24
    4320:	e4 0f       	add	r30, r20
    4322:	f5 1f       	adc	r31, r21
    4324:	a4 0f       	add	r26, r20
    4326:	b5 1f       	adc	r27, r21
    4328:	02 c0       	rjmp	.+4      	; 0x432e <memmove+0x18>
    432a:	02 90       	ld	r0, -Z
    432c:	0e 92       	st	-X, r0
    432e:	41 50       	subi	r20, 0x01	; 1
    4330:	50 40       	sbci	r21, 0x00	; 0
    4332:	d8 f7       	brcc	.-10     	; 0x432a <memmove+0x14>
    4334:	08 95       	ret
    4336:	e6 cf       	rjmp	.-52     	; 0x4304 <memcpy>

00004338 <strcpy>:
    4338:	fb 01       	movw	r30, r22
    433a:	dc 01       	movw	r26, r24
    433c:	01 90       	ld	r0, Z+
    433e:	0d 92       	st	X+, r0
    4340:	00 20       	and	r0, r0
    4342:	e1 f7       	brne	.-8      	; 0x433c <strcpy+0x4>
    4344:	08 95       	ret

00004346 <strlcpy>:
    4346:	dc 01       	movw	r26, r24
    4348:	fb 01       	movw	r30, r22
    434a:	41 50       	subi	r20, 0x01	; 1
    434c:	50 40       	sbci	r21, 0x00	; 0
    434e:	58 f0       	brcs	.+22     	; 0x4366 <strlcpy+0x20>
    4350:	49 f0       	breq	.+18     	; 0x4364 <strlcpy+0x1e>
    4352:	01 90       	ld	r0, Z+
    4354:	0d 92       	st	X+, r0
    4356:	00 20       	and	r0, r0
    4358:	c1 f7       	brne	.-16     	; 0x434a <strlcpy+0x4>
    435a:	e6 1b       	sub	r30, r22
    435c:	f7 0b       	sbc	r31, r23
    435e:	31 97       	sbiw	r30, 0x01	; 1
    4360:	cf 01       	movw	r24, r30
    4362:	08 95       	ret
    4364:	1c 92       	st	X, r1
    4366:	01 90       	ld	r0, Z+
    4368:	00 20       	and	r0, r0
    436a:	e9 f7       	brne	.-6      	; 0x4366 <strlcpy+0x20>
    436c:	f6 cf       	rjmp	.-20     	; 0x435a <strlcpy+0x14>

0000436e <strncmp>:
    436e:	fb 01       	movw	r30, r22
    4370:	dc 01       	movw	r26, r24
    4372:	41 50       	subi	r20, 0x01	; 1
    4374:	50 40       	sbci	r21, 0x00	; 0
    4376:	30 f0       	brcs	.+12     	; 0x4384 <strncmp+0x16>
    4378:	8d 91       	ld	r24, X+
    437a:	01 90       	ld	r0, Z+
    437c:	80 19       	sub	r24, r0
    437e:	19 f4       	brne	.+6      	; 0x4386 <strncmp+0x18>
    4380:	00 20       	and	r0, r0
    4382:	b9 f7       	brne	.-18     	; 0x4372 <strncmp+0x4>
    4384:	88 1b       	sub	r24, r24
    4386:	99 0b       	sbc	r25, r25
    4388:	08 95       	ret

0000438a <__itoa_ncheck>:
    438a:	bb 27       	eor	r27, r27
    438c:	4a 30       	cpi	r20, 0x0A	; 10
    438e:	31 f4       	brne	.+12     	; 0x439c <__itoa_ncheck+0x12>
    4390:	99 23       	and	r25, r25
    4392:	22 f4       	brpl	.+8      	; 0x439c <__itoa_ncheck+0x12>
    4394:	bd e2       	ldi	r27, 0x2D	; 45
    4396:	90 95       	com	r25
    4398:	81 95       	neg	r24
    439a:	9f 4f       	sbci	r25, 0xFF	; 255
    439c:	01 c0       	rjmp	.+2      	; 0x43a0 <__utoa_common>

0000439e <__utoa_ncheck>:
    439e:	bb 27       	eor	r27, r27

000043a0 <__utoa_common>:
    43a0:	fb 01       	movw	r30, r22
    43a2:	55 27       	eor	r21, r21
    43a4:	aa 27       	eor	r26, r26
    43a6:	88 0f       	add	r24, r24
    43a8:	99 1f       	adc	r25, r25
    43aa:	aa 1f       	adc	r26, r26
    43ac:	a4 17       	cp	r26, r20
    43ae:	10 f0       	brcs	.+4      	; 0x43b4 <__utoa_common+0x14>
    43b0:	a4 1b       	sub	r26, r20
    43b2:	83 95       	inc	r24
    43b4:	50 51       	subi	r21, 0x10	; 16
    43b6:	b9 f7       	brne	.-18     	; 0x43a6 <__utoa_common+0x6>
    43b8:	a0 5d       	subi	r26, 0xD0	; 208
    43ba:	aa 33       	cpi	r26, 0x3A	; 58
    43bc:	08 f0       	brcs	.+2      	; 0x43c0 <__utoa_common+0x20>
    43be:	a9 5d       	subi	r26, 0xD9	; 217
    43c0:	a1 93       	st	Z+, r26
    43c2:	00 97       	sbiw	r24, 0x00	; 0
    43c4:	79 f7       	brne	.-34     	; 0x43a4 <__utoa_common+0x4>
    43c6:	b1 11       	cpse	r27, r1
    43c8:	b1 93       	st	Z+, r27
    43ca:	11 92       	st	Z+, r1
    43cc:	cb 01       	movw	r24, r22
    43ce:	41 c2       	rjmp	.+1154   	; 0x4852 <strrev>

000043d0 <sprintf>:
    43d0:	0f 93       	push	r16
    43d2:	1f 93       	push	r17
    43d4:	cf 93       	push	r28
    43d6:	df 93       	push	r29
    43d8:	cd b7       	in	r28, 0x3d	; 61
    43da:	de b7       	in	r29, 0x3e	; 62
    43dc:	2e 97       	sbiw	r28, 0x0e	; 14
    43de:	0f b6       	in	r0, 0x3f	; 63
    43e0:	f8 94       	cli
    43e2:	de bf       	out	0x3e, r29	; 62
    43e4:	0f be       	out	0x3f, r0	; 63
    43e6:	cd bf       	out	0x3d, r28	; 61
    43e8:	0d 89       	ldd	r16, Y+21	; 0x15
    43ea:	1e 89       	ldd	r17, Y+22	; 0x16
    43ec:	86 e0       	ldi	r24, 0x06	; 6
    43ee:	8c 83       	std	Y+4, r24	; 0x04
    43f0:	1a 83       	std	Y+2, r17	; 0x02
    43f2:	09 83       	std	Y+1, r16	; 0x01
    43f4:	8f ef       	ldi	r24, 0xFF	; 255
    43f6:	9f e7       	ldi	r25, 0x7F	; 127
    43f8:	9e 83       	std	Y+6, r25	; 0x06
    43fa:	8d 83       	std	Y+5, r24	; 0x05
    43fc:	ae 01       	movw	r20, r28
    43fe:	47 5e       	subi	r20, 0xE7	; 231
    4400:	5f 4f       	sbci	r21, 0xFF	; 255
    4402:	6f 89       	ldd	r22, Y+23	; 0x17
    4404:	78 8d       	ldd	r23, Y+24	; 0x18
    4406:	ce 01       	movw	r24, r28
    4408:	01 96       	adiw	r24, 0x01	; 1
    440a:	10 d0       	rcall	.+32     	; 0x442c <vfprintf>
    440c:	ef 81       	ldd	r30, Y+7	; 0x07
    440e:	f8 85       	ldd	r31, Y+8	; 0x08
    4410:	e0 0f       	add	r30, r16
    4412:	f1 1f       	adc	r31, r17
    4414:	10 82       	st	Z, r1
    4416:	2e 96       	adiw	r28, 0x0e	; 14
    4418:	0f b6       	in	r0, 0x3f	; 63
    441a:	f8 94       	cli
    441c:	de bf       	out	0x3e, r29	; 62
    441e:	0f be       	out	0x3f, r0	; 63
    4420:	cd bf       	out	0x3d, r28	; 61
    4422:	df 91       	pop	r29
    4424:	cf 91       	pop	r28
    4426:	1f 91       	pop	r17
    4428:	0f 91       	pop	r16
    442a:	08 95       	ret

0000442c <vfprintf>:
    442c:	2f 92       	push	r2
    442e:	3f 92       	push	r3
    4430:	4f 92       	push	r4
    4432:	5f 92       	push	r5
    4434:	6f 92       	push	r6
    4436:	7f 92       	push	r7
    4438:	8f 92       	push	r8
    443a:	9f 92       	push	r9
    443c:	af 92       	push	r10
    443e:	bf 92       	push	r11
    4440:	cf 92       	push	r12
    4442:	df 92       	push	r13
    4444:	ef 92       	push	r14
    4446:	ff 92       	push	r15
    4448:	0f 93       	push	r16
    444a:	1f 93       	push	r17
    444c:	cf 93       	push	r28
    444e:	df 93       	push	r29
    4450:	cd b7       	in	r28, 0x3d	; 61
    4452:	de b7       	in	r29, 0x3e	; 62
    4454:	2b 97       	sbiw	r28, 0x0b	; 11
    4456:	0f b6       	in	r0, 0x3f	; 63
    4458:	f8 94       	cli
    445a:	de bf       	out	0x3e, r29	; 62
    445c:	0f be       	out	0x3f, r0	; 63
    445e:	cd bf       	out	0x3d, r28	; 61
    4460:	6c 01       	movw	r12, r24
    4462:	7b 01       	movw	r14, r22
    4464:	8a 01       	movw	r16, r20
    4466:	fc 01       	movw	r30, r24
    4468:	17 82       	std	Z+7, r1	; 0x07
    446a:	16 82       	std	Z+6, r1	; 0x06
    446c:	83 81       	ldd	r24, Z+3	; 0x03
    446e:	81 ff       	sbrs	r24, 1
    4470:	bf c1       	rjmp	.+894    	; 0x47f0 <vfprintf+0x3c4>
    4472:	ce 01       	movw	r24, r28
    4474:	01 96       	adiw	r24, 0x01	; 1
    4476:	3c 01       	movw	r6, r24
    4478:	f6 01       	movw	r30, r12
    447a:	93 81       	ldd	r25, Z+3	; 0x03
    447c:	f7 01       	movw	r30, r14
    447e:	93 fd       	sbrc	r25, 3
    4480:	85 91       	lpm	r24, Z+
    4482:	93 ff       	sbrs	r25, 3
    4484:	81 91       	ld	r24, Z+
    4486:	7f 01       	movw	r14, r30
    4488:	88 23       	and	r24, r24
    448a:	09 f4       	brne	.+2      	; 0x448e <vfprintf+0x62>
    448c:	ad c1       	rjmp	.+858    	; 0x47e8 <vfprintf+0x3bc>
    448e:	85 32       	cpi	r24, 0x25	; 37
    4490:	39 f4       	brne	.+14     	; 0x44a0 <vfprintf+0x74>
    4492:	93 fd       	sbrc	r25, 3
    4494:	85 91       	lpm	r24, Z+
    4496:	93 ff       	sbrs	r25, 3
    4498:	81 91       	ld	r24, Z+
    449a:	7f 01       	movw	r14, r30
    449c:	85 32       	cpi	r24, 0x25	; 37
    449e:	21 f4       	brne	.+8      	; 0x44a8 <vfprintf+0x7c>
    44a0:	b6 01       	movw	r22, r12
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	e6 d1       	rcall	.+972    	; 0x4872 <fputc>
    44a6:	e8 cf       	rjmp	.-48     	; 0x4478 <vfprintf+0x4c>
    44a8:	91 2c       	mov	r9, r1
    44aa:	21 2c       	mov	r2, r1
    44ac:	31 2c       	mov	r3, r1
    44ae:	ff e1       	ldi	r31, 0x1F	; 31
    44b0:	f3 15       	cp	r31, r3
    44b2:	d8 f0       	brcs	.+54     	; 0x44ea <vfprintf+0xbe>
    44b4:	8b 32       	cpi	r24, 0x2B	; 43
    44b6:	79 f0       	breq	.+30     	; 0x44d6 <vfprintf+0xaa>
    44b8:	38 f4       	brcc	.+14     	; 0x44c8 <vfprintf+0x9c>
    44ba:	80 32       	cpi	r24, 0x20	; 32
    44bc:	79 f0       	breq	.+30     	; 0x44dc <vfprintf+0xb0>
    44be:	83 32       	cpi	r24, 0x23	; 35
    44c0:	a1 f4       	brne	.+40     	; 0x44ea <vfprintf+0xbe>
    44c2:	23 2d       	mov	r18, r3
    44c4:	20 61       	ori	r18, 0x10	; 16
    44c6:	1d c0       	rjmp	.+58     	; 0x4502 <vfprintf+0xd6>
    44c8:	8d 32       	cpi	r24, 0x2D	; 45
    44ca:	61 f0       	breq	.+24     	; 0x44e4 <vfprintf+0xb8>
    44cc:	80 33       	cpi	r24, 0x30	; 48
    44ce:	69 f4       	brne	.+26     	; 0x44ea <vfprintf+0xbe>
    44d0:	23 2d       	mov	r18, r3
    44d2:	21 60       	ori	r18, 0x01	; 1
    44d4:	16 c0       	rjmp	.+44     	; 0x4502 <vfprintf+0xd6>
    44d6:	83 2d       	mov	r24, r3
    44d8:	82 60       	ori	r24, 0x02	; 2
    44da:	38 2e       	mov	r3, r24
    44dc:	e3 2d       	mov	r30, r3
    44de:	e4 60       	ori	r30, 0x04	; 4
    44e0:	3e 2e       	mov	r3, r30
    44e2:	2a c0       	rjmp	.+84     	; 0x4538 <vfprintf+0x10c>
    44e4:	f3 2d       	mov	r31, r3
    44e6:	f8 60       	ori	r31, 0x08	; 8
    44e8:	1d c0       	rjmp	.+58     	; 0x4524 <vfprintf+0xf8>
    44ea:	37 fc       	sbrc	r3, 7
    44ec:	2d c0       	rjmp	.+90     	; 0x4548 <vfprintf+0x11c>
    44ee:	20 ed       	ldi	r18, 0xD0	; 208
    44f0:	28 0f       	add	r18, r24
    44f2:	2a 30       	cpi	r18, 0x0A	; 10
    44f4:	40 f0       	brcs	.+16     	; 0x4506 <vfprintf+0xda>
    44f6:	8e 32       	cpi	r24, 0x2E	; 46
    44f8:	b9 f4       	brne	.+46     	; 0x4528 <vfprintf+0xfc>
    44fa:	36 fc       	sbrc	r3, 6
    44fc:	75 c1       	rjmp	.+746    	; 0x47e8 <vfprintf+0x3bc>
    44fe:	23 2d       	mov	r18, r3
    4500:	20 64       	ori	r18, 0x40	; 64
    4502:	32 2e       	mov	r3, r18
    4504:	19 c0       	rjmp	.+50     	; 0x4538 <vfprintf+0x10c>
    4506:	36 fe       	sbrs	r3, 6
    4508:	06 c0       	rjmp	.+12     	; 0x4516 <vfprintf+0xea>
    450a:	8a e0       	ldi	r24, 0x0A	; 10
    450c:	98 9e       	mul	r9, r24
    450e:	20 0d       	add	r18, r0
    4510:	11 24       	eor	r1, r1
    4512:	92 2e       	mov	r9, r18
    4514:	11 c0       	rjmp	.+34     	; 0x4538 <vfprintf+0x10c>
    4516:	ea e0       	ldi	r30, 0x0A	; 10
    4518:	2e 9e       	mul	r2, r30
    451a:	20 0d       	add	r18, r0
    451c:	11 24       	eor	r1, r1
    451e:	22 2e       	mov	r2, r18
    4520:	f3 2d       	mov	r31, r3
    4522:	f0 62       	ori	r31, 0x20	; 32
    4524:	3f 2e       	mov	r3, r31
    4526:	08 c0       	rjmp	.+16     	; 0x4538 <vfprintf+0x10c>
    4528:	8c 36       	cpi	r24, 0x6C	; 108
    452a:	21 f4       	brne	.+8      	; 0x4534 <vfprintf+0x108>
    452c:	83 2d       	mov	r24, r3
    452e:	80 68       	ori	r24, 0x80	; 128
    4530:	38 2e       	mov	r3, r24
    4532:	02 c0       	rjmp	.+4      	; 0x4538 <vfprintf+0x10c>
    4534:	88 36       	cpi	r24, 0x68	; 104
    4536:	41 f4       	brne	.+16     	; 0x4548 <vfprintf+0x11c>
    4538:	f7 01       	movw	r30, r14
    453a:	93 fd       	sbrc	r25, 3
    453c:	85 91       	lpm	r24, Z+
    453e:	93 ff       	sbrs	r25, 3
    4540:	81 91       	ld	r24, Z+
    4542:	7f 01       	movw	r14, r30
    4544:	81 11       	cpse	r24, r1
    4546:	b3 cf       	rjmp	.-154    	; 0x44ae <vfprintf+0x82>
    4548:	98 2f       	mov	r25, r24
    454a:	9f 7d       	andi	r25, 0xDF	; 223
    454c:	95 54       	subi	r25, 0x45	; 69
    454e:	93 30       	cpi	r25, 0x03	; 3
    4550:	28 f4       	brcc	.+10     	; 0x455c <vfprintf+0x130>
    4552:	0c 5f       	subi	r16, 0xFC	; 252
    4554:	1f 4f       	sbci	r17, 0xFF	; 255
    4556:	9f e3       	ldi	r25, 0x3F	; 63
    4558:	99 83       	std	Y+1, r25	; 0x01
    455a:	0d c0       	rjmp	.+26     	; 0x4576 <vfprintf+0x14a>
    455c:	83 36       	cpi	r24, 0x63	; 99
    455e:	31 f0       	breq	.+12     	; 0x456c <vfprintf+0x140>
    4560:	83 37       	cpi	r24, 0x73	; 115
    4562:	71 f0       	breq	.+28     	; 0x4580 <vfprintf+0x154>
    4564:	83 35       	cpi	r24, 0x53	; 83
    4566:	09 f0       	breq	.+2      	; 0x456a <vfprintf+0x13e>
    4568:	55 c0       	rjmp	.+170    	; 0x4614 <vfprintf+0x1e8>
    456a:	20 c0       	rjmp	.+64     	; 0x45ac <vfprintf+0x180>
    456c:	f8 01       	movw	r30, r16
    456e:	80 81       	ld	r24, Z
    4570:	89 83       	std	Y+1, r24	; 0x01
    4572:	0e 5f       	subi	r16, 0xFE	; 254
    4574:	1f 4f       	sbci	r17, 0xFF	; 255
    4576:	88 24       	eor	r8, r8
    4578:	83 94       	inc	r8
    457a:	91 2c       	mov	r9, r1
    457c:	53 01       	movw	r10, r6
    457e:	12 c0       	rjmp	.+36     	; 0x45a4 <vfprintf+0x178>
    4580:	28 01       	movw	r4, r16
    4582:	f2 e0       	ldi	r31, 0x02	; 2
    4584:	4f 0e       	add	r4, r31
    4586:	51 1c       	adc	r5, r1
    4588:	f8 01       	movw	r30, r16
    458a:	a0 80       	ld	r10, Z
    458c:	b1 80       	ldd	r11, Z+1	; 0x01
    458e:	36 fe       	sbrs	r3, 6
    4590:	03 c0       	rjmp	.+6      	; 0x4598 <vfprintf+0x16c>
    4592:	69 2d       	mov	r22, r9
    4594:	70 e0       	ldi	r23, 0x00	; 0
    4596:	02 c0       	rjmp	.+4      	; 0x459c <vfprintf+0x170>
    4598:	6f ef       	ldi	r22, 0xFF	; 255
    459a:	7f ef       	ldi	r23, 0xFF	; 255
    459c:	c5 01       	movw	r24, r10
    459e:	4e d1       	rcall	.+668    	; 0x483c <strnlen>
    45a0:	4c 01       	movw	r8, r24
    45a2:	82 01       	movw	r16, r4
    45a4:	f3 2d       	mov	r31, r3
    45a6:	ff 77       	andi	r31, 0x7F	; 127
    45a8:	3f 2e       	mov	r3, r31
    45aa:	15 c0       	rjmp	.+42     	; 0x45d6 <vfprintf+0x1aa>
    45ac:	28 01       	movw	r4, r16
    45ae:	22 e0       	ldi	r18, 0x02	; 2
    45b0:	42 0e       	add	r4, r18
    45b2:	51 1c       	adc	r5, r1
    45b4:	f8 01       	movw	r30, r16
    45b6:	a0 80       	ld	r10, Z
    45b8:	b1 80       	ldd	r11, Z+1	; 0x01
    45ba:	36 fe       	sbrs	r3, 6
    45bc:	03 c0       	rjmp	.+6      	; 0x45c4 <vfprintf+0x198>
    45be:	69 2d       	mov	r22, r9
    45c0:	70 e0       	ldi	r23, 0x00	; 0
    45c2:	02 c0       	rjmp	.+4      	; 0x45c8 <vfprintf+0x19c>
    45c4:	6f ef       	ldi	r22, 0xFF	; 255
    45c6:	7f ef       	ldi	r23, 0xFF	; 255
    45c8:	c5 01       	movw	r24, r10
    45ca:	2d d1       	rcall	.+602    	; 0x4826 <strnlen_P>
    45cc:	4c 01       	movw	r8, r24
    45ce:	f3 2d       	mov	r31, r3
    45d0:	f0 68       	ori	r31, 0x80	; 128
    45d2:	3f 2e       	mov	r3, r31
    45d4:	82 01       	movw	r16, r4
    45d6:	33 fc       	sbrc	r3, 3
    45d8:	19 c0       	rjmp	.+50     	; 0x460c <vfprintf+0x1e0>
    45da:	82 2d       	mov	r24, r2
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	88 16       	cp	r8, r24
    45e0:	99 06       	cpc	r9, r25
    45e2:	a0 f4       	brcc	.+40     	; 0x460c <vfprintf+0x1e0>
    45e4:	b6 01       	movw	r22, r12
    45e6:	80 e2       	ldi	r24, 0x20	; 32
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	43 d1       	rcall	.+646    	; 0x4872 <fputc>
    45ec:	2a 94       	dec	r2
    45ee:	f5 cf       	rjmp	.-22     	; 0x45da <vfprintf+0x1ae>
    45f0:	f5 01       	movw	r30, r10
    45f2:	37 fc       	sbrc	r3, 7
    45f4:	85 91       	lpm	r24, Z+
    45f6:	37 fe       	sbrs	r3, 7
    45f8:	81 91       	ld	r24, Z+
    45fa:	5f 01       	movw	r10, r30
    45fc:	b6 01       	movw	r22, r12
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	38 d1       	rcall	.+624    	; 0x4872 <fputc>
    4602:	21 10       	cpse	r2, r1
    4604:	2a 94       	dec	r2
    4606:	21 e0       	ldi	r18, 0x01	; 1
    4608:	82 1a       	sub	r8, r18
    460a:	91 08       	sbc	r9, r1
    460c:	81 14       	cp	r8, r1
    460e:	91 04       	cpc	r9, r1
    4610:	79 f7       	brne	.-34     	; 0x45f0 <vfprintf+0x1c4>
    4612:	e1 c0       	rjmp	.+450    	; 0x47d6 <vfprintf+0x3aa>
    4614:	84 36       	cpi	r24, 0x64	; 100
    4616:	11 f0       	breq	.+4      	; 0x461c <vfprintf+0x1f0>
    4618:	89 36       	cpi	r24, 0x69	; 105
    461a:	39 f5       	brne	.+78     	; 0x466a <vfprintf+0x23e>
    461c:	f8 01       	movw	r30, r16
    461e:	37 fe       	sbrs	r3, 7
    4620:	07 c0       	rjmp	.+14     	; 0x4630 <vfprintf+0x204>
    4622:	60 81       	ld	r22, Z
    4624:	71 81       	ldd	r23, Z+1	; 0x01
    4626:	82 81       	ldd	r24, Z+2	; 0x02
    4628:	93 81       	ldd	r25, Z+3	; 0x03
    462a:	0c 5f       	subi	r16, 0xFC	; 252
    462c:	1f 4f       	sbci	r17, 0xFF	; 255
    462e:	08 c0       	rjmp	.+16     	; 0x4640 <vfprintf+0x214>
    4630:	60 81       	ld	r22, Z
    4632:	71 81       	ldd	r23, Z+1	; 0x01
    4634:	07 2e       	mov	r0, r23
    4636:	00 0c       	add	r0, r0
    4638:	88 0b       	sbc	r24, r24
    463a:	99 0b       	sbc	r25, r25
    463c:	0e 5f       	subi	r16, 0xFE	; 254
    463e:	1f 4f       	sbci	r17, 0xFF	; 255
    4640:	f3 2d       	mov	r31, r3
    4642:	ff 76       	andi	r31, 0x6F	; 111
    4644:	3f 2e       	mov	r3, r31
    4646:	97 ff       	sbrs	r25, 7
    4648:	09 c0       	rjmp	.+18     	; 0x465c <vfprintf+0x230>
    464a:	90 95       	com	r25
    464c:	80 95       	com	r24
    464e:	70 95       	com	r23
    4650:	61 95       	neg	r22
    4652:	7f 4f       	sbci	r23, 0xFF	; 255
    4654:	8f 4f       	sbci	r24, 0xFF	; 255
    4656:	9f 4f       	sbci	r25, 0xFF	; 255
    4658:	f0 68       	ori	r31, 0x80	; 128
    465a:	3f 2e       	mov	r3, r31
    465c:	2a e0       	ldi	r18, 0x0A	; 10
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	a3 01       	movw	r20, r6
    4662:	43 d1       	rcall	.+646    	; 0x48ea <__ultoa_invert>
    4664:	88 2e       	mov	r8, r24
    4666:	86 18       	sub	r8, r6
    4668:	44 c0       	rjmp	.+136    	; 0x46f2 <vfprintf+0x2c6>
    466a:	85 37       	cpi	r24, 0x75	; 117
    466c:	31 f4       	brne	.+12     	; 0x467a <vfprintf+0x24e>
    466e:	23 2d       	mov	r18, r3
    4670:	2f 7e       	andi	r18, 0xEF	; 239
    4672:	b2 2e       	mov	r11, r18
    4674:	2a e0       	ldi	r18, 0x0A	; 10
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	25 c0       	rjmp	.+74     	; 0x46c4 <vfprintf+0x298>
    467a:	93 2d       	mov	r25, r3
    467c:	99 7f       	andi	r25, 0xF9	; 249
    467e:	b9 2e       	mov	r11, r25
    4680:	8f 36       	cpi	r24, 0x6F	; 111
    4682:	c1 f0       	breq	.+48     	; 0x46b4 <vfprintf+0x288>
    4684:	18 f4       	brcc	.+6      	; 0x468c <vfprintf+0x260>
    4686:	88 35       	cpi	r24, 0x58	; 88
    4688:	79 f0       	breq	.+30     	; 0x46a8 <vfprintf+0x27c>
    468a:	ae c0       	rjmp	.+348    	; 0x47e8 <vfprintf+0x3bc>
    468c:	80 37       	cpi	r24, 0x70	; 112
    468e:	19 f0       	breq	.+6      	; 0x4696 <vfprintf+0x26a>
    4690:	88 37       	cpi	r24, 0x78	; 120
    4692:	21 f0       	breq	.+8      	; 0x469c <vfprintf+0x270>
    4694:	a9 c0       	rjmp	.+338    	; 0x47e8 <vfprintf+0x3bc>
    4696:	e9 2f       	mov	r30, r25
    4698:	e0 61       	ori	r30, 0x10	; 16
    469a:	be 2e       	mov	r11, r30
    469c:	b4 fe       	sbrs	r11, 4
    469e:	0d c0       	rjmp	.+26     	; 0x46ba <vfprintf+0x28e>
    46a0:	fb 2d       	mov	r31, r11
    46a2:	f4 60       	ori	r31, 0x04	; 4
    46a4:	bf 2e       	mov	r11, r31
    46a6:	09 c0       	rjmp	.+18     	; 0x46ba <vfprintf+0x28e>
    46a8:	34 fe       	sbrs	r3, 4
    46aa:	0a c0       	rjmp	.+20     	; 0x46c0 <vfprintf+0x294>
    46ac:	29 2f       	mov	r18, r25
    46ae:	26 60       	ori	r18, 0x06	; 6
    46b0:	b2 2e       	mov	r11, r18
    46b2:	06 c0       	rjmp	.+12     	; 0x46c0 <vfprintf+0x294>
    46b4:	28 e0       	ldi	r18, 0x08	; 8
    46b6:	30 e0       	ldi	r19, 0x00	; 0
    46b8:	05 c0       	rjmp	.+10     	; 0x46c4 <vfprintf+0x298>
    46ba:	20 e1       	ldi	r18, 0x10	; 16
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	02 c0       	rjmp	.+4      	; 0x46c4 <vfprintf+0x298>
    46c0:	20 e1       	ldi	r18, 0x10	; 16
    46c2:	32 e0       	ldi	r19, 0x02	; 2
    46c4:	f8 01       	movw	r30, r16
    46c6:	b7 fe       	sbrs	r11, 7
    46c8:	07 c0       	rjmp	.+14     	; 0x46d8 <vfprintf+0x2ac>
    46ca:	60 81       	ld	r22, Z
    46cc:	71 81       	ldd	r23, Z+1	; 0x01
    46ce:	82 81       	ldd	r24, Z+2	; 0x02
    46d0:	93 81       	ldd	r25, Z+3	; 0x03
    46d2:	0c 5f       	subi	r16, 0xFC	; 252
    46d4:	1f 4f       	sbci	r17, 0xFF	; 255
    46d6:	06 c0       	rjmp	.+12     	; 0x46e4 <vfprintf+0x2b8>
    46d8:	60 81       	ld	r22, Z
    46da:	71 81       	ldd	r23, Z+1	; 0x01
    46dc:	80 e0       	ldi	r24, 0x00	; 0
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	0e 5f       	subi	r16, 0xFE	; 254
    46e2:	1f 4f       	sbci	r17, 0xFF	; 255
    46e4:	a3 01       	movw	r20, r6
    46e6:	01 d1       	rcall	.+514    	; 0x48ea <__ultoa_invert>
    46e8:	88 2e       	mov	r8, r24
    46ea:	86 18       	sub	r8, r6
    46ec:	fb 2d       	mov	r31, r11
    46ee:	ff 77       	andi	r31, 0x7F	; 127
    46f0:	3f 2e       	mov	r3, r31
    46f2:	36 fe       	sbrs	r3, 6
    46f4:	0d c0       	rjmp	.+26     	; 0x4710 <vfprintf+0x2e4>
    46f6:	23 2d       	mov	r18, r3
    46f8:	2e 7f       	andi	r18, 0xFE	; 254
    46fa:	a2 2e       	mov	r10, r18
    46fc:	89 14       	cp	r8, r9
    46fe:	58 f4       	brcc	.+22     	; 0x4716 <vfprintf+0x2ea>
    4700:	34 fe       	sbrs	r3, 4
    4702:	0b c0       	rjmp	.+22     	; 0x471a <vfprintf+0x2ee>
    4704:	32 fc       	sbrc	r3, 2
    4706:	09 c0       	rjmp	.+18     	; 0x471a <vfprintf+0x2ee>
    4708:	83 2d       	mov	r24, r3
    470a:	8e 7e       	andi	r24, 0xEE	; 238
    470c:	a8 2e       	mov	r10, r24
    470e:	05 c0       	rjmp	.+10     	; 0x471a <vfprintf+0x2ee>
    4710:	b8 2c       	mov	r11, r8
    4712:	a3 2c       	mov	r10, r3
    4714:	03 c0       	rjmp	.+6      	; 0x471c <vfprintf+0x2f0>
    4716:	b8 2c       	mov	r11, r8
    4718:	01 c0       	rjmp	.+2      	; 0x471c <vfprintf+0x2f0>
    471a:	b9 2c       	mov	r11, r9
    471c:	a4 fe       	sbrs	r10, 4
    471e:	0f c0       	rjmp	.+30     	; 0x473e <vfprintf+0x312>
    4720:	fe 01       	movw	r30, r28
    4722:	e8 0d       	add	r30, r8
    4724:	f1 1d       	adc	r31, r1
    4726:	80 81       	ld	r24, Z
    4728:	80 33       	cpi	r24, 0x30	; 48
    472a:	21 f4       	brne	.+8      	; 0x4734 <vfprintf+0x308>
    472c:	9a 2d       	mov	r25, r10
    472e:	99 7e       	andi	r25, 0xE9	; 233
    4730:	a9 2e       	mov	r10, r25
    4732:	09 c0       	rjmp	.+18     	; 0x4746 <vfprintf+0x31a>
    4734:	a2 fe       	sbrs	r10, 2
    4736:	06 c0       	rjmp	.+12     	; 0x4744 <vfprintf+0x318>
    4738:	b3 94       	inc	r11
    473a:	b3 94       	inc	r11
    473c:	04 c0       	rjmp	.+8      	; 0x4746 <vfprintf+0x31a>
    473e:	8a 2d       	mov	r24, r10
    4740:	86 78       	andi	r24, 0x86	; 134
    4742:	09 f0       	breq	.+2      	; 0x4746 <vfprintf+0x31a>
    4744:	b3 94       	inc	r11
    4746:	a3 fc       	sbrc	r10, 3
    4748:	10 c0       	rjmp	.+32     	; 0x476a <vfprintf+0x33e>
    474a:	a0 fe       	sbrs	r10, 0
    474c:	06 c0       	rjmp	.+12     	; 0x475a <vfprintf+0x32e>
    474e:	b2 14       	cp	r11, r2
    4750:	80 f4       	brcc	.+32     	; 0x4772 <vfprintf+0x346>
    4752:	28 0c       	add	r2, r8
    4754:	92 2c       	mov	r9, r2
    4756:	9b 18       	sub	r9, r11
    4758:	0d c0       	rjmp	.+26     	; 0x4774 <vfprintf+0x348>
    475a:	b2 14       	cp	r11, r2
    475c:	58 f4       	brcc	.+22     	; 0x4774 <vfprintf+0x348>
    475e:	b6 01       	movw	r22, r12
    4760:	80 e2       	ldi	r24, 0x20	; 32
    4762:	90 e0       	ldi	r25, 0x00	; 0
    4764:	86 d0       	rcall	.+268    	; 0x4872 <fputc>
    4766:	b3 94       	inc	r11
    4768:	f8 cf       	rjmp	.-16     	; 0x475a <vfprintf+0x32e>
    476a:	b2 14       	cp	r11, r2
    476c:	18 f4       	brcc	.+6      	; 0x4774 <vfprintf+0x348>
    476e:	2b 18       	sub	r2, r11
    4770:	02 c0       	rjmp	.+4      	; 0x4776 <vfprintf+0x34a>
    4772:	98 2c       	mov	r9, r8
    4774:	21 2c       	mov	r2, r1
    4776:	a4 fe       	sbrs	r10, 4
    4778:	0f c0       	rjmp	.+30     	; 0x4798 <vfprintf+0x36c>
    477a:	b6 01       	movw	r22, r12
    477c:	80 e3       	ldi	r24, 0x30	; 48
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	78 d0       	rcall	.+240    	; 0x4872 <fputc>
    4782:	a2 fe       	sbrs	r10, 2
    4784:	16 c0       	rjmp	.+44     	; 0x47b2 <vfprintf+0x386>
    4786:	a1 fc       	sbrc	r10, 1
    4788:	03 c0       	rjmp	.+6      	; 0x4790 <vfprintf+0x364>
    478a:	88 e7       	ldi	r24, 0x78	; 120
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	02 c0       	rjmp	.+4      	; 0x4794 <vfprintf+0x368>
    4790:	88 e5       	ldi	r24, 0x58	; 88
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	b6 01       	movw	r22, r12
    4796:	0c c0       	rjmp	.+24     	; 0x47b0 <vfprintf+0x384>
    4798:	8a 2d       	mov	r24, r10
    479a:	86 78       	andi	r24, 0x86	; 134
    479c:	51 f0       	breq	.+20     	; 0x47b2 <vfprintf+0x386>
    479e:	a1 fe       	sbrs	r10, 1
    47a0:	02 c0       	rjmp	.+4      	; 0x47a6 <vfprintf+0x37a>
    47a2:	8b e2       	ldi	r24, 0x2B	; 43
    47a4:	01 c0       	rjmp	.+2      	; 0x47a8 <vfprintf+0x37c>
    47a6:	80 e2       	ldi	r24, 0x20	; 32
    47a8:	a7 fc       	sbrc	r10, 7
    47aa:	8d e2       	ldi	r24, 0x2D	; 45
    47ac:	b6 01       	movw	r22, r12
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	60 d0       	rcall	.+192    	; 0x4872 <fputc>
    47b2:	89 14       	cp	r8, r9
    47b4:	30 f4       	brcc	.+12     	; 0x47c2 <vfprintf+0x396>
    47b6:	b6 01       	movw	r22, r12
    47b8:	80 e3       	ldi	r24, 0x30	; 48
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	5a d0       	rcall	.+180    	; 0x4872 <fputc>
    47be:	9a 94       	dec	r9
    47c0:	f8 cf       	rjmp	.-16     	; 0x47b2 <vfprintf+0x386>
    47c2:	8a 94       	dec	r8
    47c4:	f3 01       	movw	r30, r6
    47c6:	e8 0d       	add	r30, r8
    47c8:	f1 1d       	adc	r31, r1
    47ca:	80 81       	ld	r24, Z
    47cc:	b6 01       	movw	r22, r12
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	50 d0       	rcall	.+160    	; 0x4872 <fputc>
    47d2:	81 10       	cpse	r8, r1
    47d4:	f6 cf       	rjmp	.-20     	; 0x47c2 <vfprintf+0x396>
    47d6:	22 20       	and	r2, r2
    47d8:	09 f4       	brne	.+2      	; 0x47dc <vfprintf+0x3b0>
    47da:	4e ce       	rjmp	.-868    	; 0x4478 <vfprintf+0x4c>
    47dc:	b6 01       	movw	r22, r12
    47de:	80 e2       	ldi	r24, 0x20	; 32
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	47 d0       	rcall	.+142    	; 0x4872 <fputc>
    47e4:	2a 94       	dec	r2
    47e6:	f7 cf       	rjmp	.-18     	; 0x47d6 <vfprintf+0x3aa>
    47e8:	f6 01       	movw	r30, r12
    47ea:	86 81       	ldd	r24, Z+6	; 0x06
    47ec:	97 81       	ldd	r25, Z+7	; 0x07
    47ee:	02 c0       	rjmp	.+4      	; 0x47f4 <vfprintf+0x3c8>
    47f0:	8f ef       	ldi	r24, 0xFF	; 255
    47f2:	9f ef       	ldi	r25, 0xFF	; 255
    47f4:	2b 96       	adiw	r28, 0x0b	; 11
    47f6:	0f b6       	in	r0, 0x3f	; 63
    47f8:	f8 94       	cli
    47fa:	de bf       	out	0x3e, r29	; 62
    47fc:	0f be       	out	0x3f, r0	; 63
    47fe:	cd bf       	out	0x3d, r28	; 61
    4800:	df 91       	pop	r29
    4802:	cf 91       	pop	r28
    4804:	1f 91       	pop	r17
    4806:	0f 91       	pop	r16
    4808:	ff 90       	pop	r15
    480a:	ef 90       	pop	r14
    480c:	df 90       	pop	r13
    480e:	cf 90       	pop	r12
    4810:	bf 90       	pop	r11
    4812:	af 90       	pop	r10
    4814:	9f 90       	pop	r9
    4816:	8f 90       	pop	r8
    4818:	7f 90       	pop	r7
    481a:	6f 90       	pop	r6
    481c:	5f 90       	pop	r5
    481e:	4f 90       	pop	r4
    4820:	3f 90       	pop	r3
    4822:	2f 90       	pop	r2
    4824:	08 95       	ret

00004826 <strnlen_P>:
    4826:	fc 01       	movw	r30, r24
    4828:	05 90       	lpm	r0, Z+
    482a:	61 50       	subi	r22, 0x01	; 1
    482c:	70 40       	sbci	r23, 0x00	; 0
    482e:	01 10       	cpse	r0, r1
    4830:	d8 f7       	brcc	.-10     	; 0x4828 <strnlen_P+0x2>
    4832:	80 95       	com	r24
    4834:	90 95       	com	r25
    4836:	8e 0f       	add	r24, r30
    4838:	9f 1f       	adc	r25, r31
    483a:	08 95       	ret

0000483c <strnlen>:
    483c:	fc 01       	movw	r30, r24
    483e:	61 50       	subi	r22, 0x01	; 1
    4840:	70 40       	sbci	r23, 0x00	; 0
    4842:	01 90       	ld	r0, Z+
    4844:	01 10       	cpse	r0, r1
    4846:	d8 f7       	brcc	.-10     	; 0x483e <strnlen+0x2>
    4848:	80 95       	com	r24
    484a:	90 95       	com	r25
    484c:	8e 0f       	add	r24, r30
    484e:	9f 1f       	adc	r25, r31
    4850:	08 95       	ret

00004852 <strrev>:
    4852:	dc 01       	movw	r26, r24
    4854:	fc 01       	movw	r30, r24
    4856:	67 2f       	mov	r22, r23
    4858:	71 91       	ld	r23, Z+
    485a:	77 23       	and	r23, r23
    485c:	e1 f7       	brne	.-8      	; 0x4856 <strrev+0x4>
    485e:	32 97       	sbiw	r30, 0x02	; 2
    4860:	04 c0       	rjmp	.+8      	; 0x486a <strrev+0x18>
    4862:	7c 91       	ld	r23, X
    4864:	6d 93       	st	X+, r22
    4866:	70 83       	st	Z, r23
    4868:	62 91       	ld	r22, -Z
    486a:	ae 17       	cp	r26, r30
    486c:	bf 07       	cpc	r27, r31
    486e:	c8 f3       	brcs	.-14     	; 0x4862 <strrev+0x10>
    4870:	08 95       	ret

00004872 <fputc>:
    4872:	0f 93       	push	r16
    4874:	1f 93       	push	r17
    4876:	cf 93       	push	r28
    4878:	df 93       	push	r29
    487a:	fb 01       	movw	r30, r22
    487c:	23 81       	ldd	r18, Z+3	; 0x03
    487e:	21 fd       	sbrc	r18, 1
    4880:	03 c0       	rjmp	.+6      	; 0x4888 <fputc+0x16>
    4882:	8f ef       	ldi	r24, 0xFF	; 255
    4884:	9f ef       	ldi	r25, 0xFF	; 255
    4886:	2c c0       	rjmp	.+88     	; 0x48e0 <fputc+0x6e>
    4888:	22 ff       	sbrs	r18, 2
    488a:	16 c0       	rjmp	.+44     	; 0x48b8 <fputc+0x46>
    488c:	46 81       	ldd	r20, Z+6	; 0x06
    488e:	57 81       	ldd	r21, Z+7	; 0x07
    4890:	24 81       	ldd	r18, Z+4	; 0x04
    4892:	35 81       	ldd	r19, Z+5	; 0x05
    4894:	42 17       	cp	r20, r18
    4896:	53 07       	cpc	r21, r19
    4898:	44 f4       	brge	.+16     	; 0x48aa <fputc+0x38>
    489a:	a0 81       	ld	r26, Z
    489c:	b1 81       	ldd	r27, Z+1	; 0x01
    489e:	9d 01       	movw	r18, r26
    48a0:	2f 5f       	subi	r18, 0xFF	; 255
    48a2:	3f 4f       	sbci	r19, 0xFF	; 255
    48a4:	31 83       	std	Z+1, r19	; 0x01
    48a6:	20 83       	st	Z, r18
    48a8:	8c 93       	st	X, r24
    48aa:	26 81       	ldd	r18, Z+6	; 0x06
    48ac:	37 81       	ldd	r19, Z+7	; 0x07
    48ae:	2f 5f       	subi	r18, 0xFF	; 255
    48b0:	3f 4f       	sbci	r19, 0xFF	; 255
    48b2:	37 83       	std	Z+7, r19	; 0x07
    48b4:	26 83       	std	Z+6, r18	; 0x06
    48b6:	14 c0       	rjmp	.+40     	; 0x48e0 <fputc+0x6e>
    48b8:	8b 01       	movw	r16, r22
    48ba:	ec 01       	movw	r28, r24
    48bc:	fb 01       	movw	r30, r22
    48be:	00 84       	ldd	r0, Z+8	; 0x08
    48c0:	f1 85       	ldd	r31, Z+9	; 0x09
    48c2:	e0 2d       	mov	r30, r0
    48c4:	09 95       	icall
    48c6:	89 2b       	or	r24, r25
    48c8:	e1 f6       	brne	.-72     	; 0x4882 <fputc+0x10>
    48ca:	d8 01       	movw	r26, r16
    48cc:	16 96       	adiw	r26, 0x06	; 6
    48ce:	8d 91       	ld	r24, X+
    48d0:	9c 91       	ld	r25, X
    48d2:	17 97       	sbiw	r26, 0x07	; 7
    48d4:	01 96       	adiw	r24, 0x01	; 1
    48d6:	17 96       	adiw	r26, 0x07	; 7
    48d8:	9c 93       	st	X, r25
    48da:	8e 93       	st	-X, r24
    48dc:	16 97       	sbiw	r26, 0x06	; 6
    48de:	ce 01       	movw	r24, r28
    48e0:	df 91       	pop	r29
    48e2:	cf 91       	pop	r28
    48e4:	1f 91       	pop	r17
    48e6:	0f 91       	pop	r16
    48e8:	08 95       	ret

000048ea <__ultoa_invert>:
    48ea:	fa 01       	movw	r30, r20
    48ec:	aa 27       	eor	r26, r26
    48ee:	28 30       	cpi	r18, 0x08	; 8
    48f0:	51 f1       	breq	.+84     	; 0x4946 <__ultoa_invert+0x5c>
    48f2:	20 31       	cpi	r18, 0x10	; 16
    48f4:	81 f1       	breq	.+96     	; 0x4956 <__ultoa_invert+0x6c>
    48f6:	e8 94       	clt
    48f8:	6f 93       	push	r22
    48fa:	6e 7f       	andi	r22, 0xFE	; 254
    48fc:	6e 5f       	subi	r22, 0xFE	; 254
    48fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4900:	8f 4f       	sbci	r24, 0xFF	; 255
    4902:	9f 4f       	sbci	r25, 0xFF	; 255
    4904:	af 4f       	sbci	r26, 0xFF	; 255
    4906:	b1 e0       	ldi	r27, 0x01	; 1
    4908:	3e d0       	rcall	.+124    	; 0x4986 <__ultoa_invert+0x9c>
    490a:	b4 e0       	ldi	r27, 0x04	; 4
    490c:	3c d0       	rcall	.+120    	; 0x4986 <__ultoa_invert+0x9c>
    490e:	67 0f       	add	r22, r23
    4910:	78 1f       	adc	r23, r24
    4912:	89 1f       	adc	r24, r25
    4914:	9a 1f       	adc	r25, r26
    4916:	a1 1d       	adc	r26, r1
    4918:	68 0f       	add	r22, r24
    491a:	79 1f       	adc	r23, r25
    491c:	8a 1f       	adc	r24, r26
    491e:	91 1d       	adc	r25, r1
    4920:	a1 1d       	adc	r26, r1
    4922:	6a 0f       	add	r22, r26
    4924:	71 1d       	adc	r23, r1
    4926:	81 1d       	adc	r24, r1
    4928:	91 1d       	adc	r25, r1
    492a:	a1 1d       	adc	r26, r1
    492c:	20 d0       	rcall	.+64     	; 0x496e <__ultoa_invert+0x84>
    492e:	09 f4       	brne	.+2      	; 0x4932 <__ultoa_invert+0x48>
    4930:	68 94       	set
    4932:	3f 91       	pop	r19
    4934:	2a e0       	ldi	r18, 0x0A	; 10
    4936:	26 9f       	mul	r18, r22
    4938:	11 24       	eor	r1, r1
    493a:	30 19       	sub	r19, r0
    493c:	30 5d       	subi	r19, 0xD0	; 208
    493e:	31 93       	st	Z+, r19
    4940:	de f6       	brtc	.-74     	; 0x48f8 <__ultoa_invert+0xe>
    4942:	cf 01       	movw	r24, r30
    4944:	08 95       	ret
    4946:	46 2f       	mov	r20, r22
    4948:	47 70       	andi	r20, 0x07	; 7
    494a:	40 5d       	subi	r20, 0xD0	; 208
    494c:	41 93       	st	Z+, r20
    494e:	b3 e0       	ldi	r27, 0x03	; 3
    4950:	0f d0       	rcall	.+30     	; 0x4970 <__ultoa_invert+0x86>
    4952:	c9 f7       	brne	.-14     	; 0x4946 <__ultoa_invert+0x5c>
    4954:	f6 cf       	rjmp	.-20     	; 0x4942 <__ultoa_invert+0x58>
    4956:	46 2f       	mov	r20, r22
    4958:	4f 70       	andi	r20, 0x0F	; 15
    495a:	40 5d       	subi	r20, 0xD0	; 208
    495c:	4a 33       	cpi	r20, 0x3A	; 58
    495e:	18 f0       	brcs	.+6      	; 0x4966 <__ultoa_invert+0x7c>
    4960:	49 5d       	subi	r20, 0xD9	; 217
    4962:	31 fd       	sbrc	r19, 1
    4964:	40 52       	subi	r20, 0x20	; 32
    4966:	41 93       	st	Z+, r20
    4968:	02 d0       	rcall	.+4      	; 0x496e <__ultoa_invert+0x84>
    496a:	a9 f7       	brne	.-22     	; 0x4956 <__ultoa_invert+0x6c>
    496c:	ea cf       	rjmp	.-44     	; 0x4942 <__ultoa_invert+0x58>
    496e:	b4 e0       	ldi	r27, 0x04	; 4
    4970:	a6 95       	lsr	r26
    4972:	97 95       	ror	r25
    4974:	87 95       	ror	r24
    4976:	77 95       	ror	r23
    4978:	67 95       	ror	r22
    497a:	ba 95       	dec	r27
    497c:	c9 f7       	brne	.-14     	; 0x4970 <__ultoa_invert+0x86>
    497e:	00 97       	sbiw	r24, 0x00	; 0
    4980:	61 05       	cpc	r22, r1
    4982:	71 05       	cpc	r23, r1
    4984:	08 95       	ret
    4986:	9b 01       	movw	r18, r22
    4988:	ac 01       	movw	r20, r24
    498a:	0a 2e       	mov	r0, r26
    498c:	06 94       	lsr	r0
    498e:	57 95       	ror	r21
    4990:	47 95       	ror	r20
    4992:	37 95       	ror	r19
    4994:	27 95       	ror	r18
    4996:	ba 95       	dec	r27
    4998:	c9 f7       	brne	.-14     	; 0x498c <__ultoa_invert+0xa2>
    499a:	62 0f       	add	r22, r18
    499c:	73 1f       	adc	r23, r19
    499e:	84 1f       	adc	r24, r20
    49a0:	95 1f       	adc	r25, r21
    49a2:	a0 1d       	adc	r26, r0
    49a4:	08 95       	ret

000049a6 <__mulsi3>:
    49a6:	db 01       	movw	r26, r22
    49a8:	8f 93       	push	r24
    49aa:	9f 93       	push	r25
    49ac:	1c d9       	rcall	.-3528   	; 0x3be6 <__muluhisi3>
    49ae:	bf 91       	pop	r27
    49b0:	af 91       	pop	r26
    49b2:	a2 9f       	mul	r26, r18
    49b4:	80 0d       	add	r24, r0
    49b6:	91 1d       	adc	r25, r1
    49b8:	a3 9f       	mul	r26, r19
    49ba:	90 0d       	add	r25, r0
    49bc:	b2 9f       	mul	r27, r18
    49be:	90 0d       	add	r25, r0
    49c0:	11 24       	eor	r1, r1
    49c2:	08 95       	ret

000049c4 <_exit>:
    49c4:	f8 94       	cli

000049c6 <__stop_program>:
    49c6:	ff cf       	rjmp	.-2      	; 0x49c6 <__stop_program>
